

================================================================
== Vivado HLS Report for 'down'
================================================================
* Date:           Thu May 15 10:44:46 2014

* Version:        2013.4 (build date: Mon Dec 09 17:07:59 PM 2013)
* Project:        tiler
* Solution:       solution1
* Product family: spartan3e spartan3e_fpv5 
* Target device:  xc3s500efg320-4


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +---------+-------+----------+------------+
    |  Clock  | Target| Estimated| Uncertainty|
    +---------+-------+----------+------------+
    |default  |  20.00|     13.60|        2.50|
    +---------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+---------+
    |  Latency  |  Interval | Pipeline|
    | min | max | min | max |   Type  |
    +-----+-----+-----+-----+---------+
    |    1|  273|    1|  273|   none  |
    +-----+-----+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +----------+-----+-----+----------+-----------+-----------+---------+----------+
        |          |  Latency  | Iteration|  Initiation Interval  |   Trip  |          |
        | Loop Name| min | max |  Latency |  achieved |   target  |  Count  | Pipelined|
        +----------+-----+-----+----------+-----------+-----------+---------+----------+
        |- Loop 1  |    0|  255|         1|          -|          -| 0 ~ 255 |    no    |
        +----------+-----+-----+----------+-----------+-----------+---------+----------+



================================================================
== Utilization Estimates
================================================================
* Summary: 
+-----------------+---------+------+----------+
|       Name      | BRAM_18K|  LUT | MULT18x18|
+-----------------+---------+------+----------+
|Expression       |        -|     -|         -|
|FIFO             |        -|     -|         -|
|Instance         |        -|     -|         -|
|Memory           |        -|     -|         -|
|Multiplexer      |        -|     -|         -|
|Register         |        -|     -|         -|
|ShiftMemory      |        -|     -|         -|
+-----------------+---------+------+----------+
|Total            |        0|     0|         0|
+-----------------+---------+------+----------+
|Available        |       20|  9312|        20|
+-----------------+---------+------+----------+
|Utilization (%)  |        0|     0|         0|
+-----------------+---------+------+----------+

+ Detail: 
    * Instance: 
    N/A

    * Memory: 
    N/A

    * FIFO: 
    N/A

    * Shift register: 
    N/A

    * Expression: 
    N/A

    * Multiplexer: 
    N/A

    * Register: 
    N/A



================================================================
== Interface
================================================================
* Summary: 
N/A

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 19
* Pipeline: 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	19  / (!tmp_7)
	2  / (tmp_7 & !tmp_i)
	15  / (tmp_7 & tmp_i)
2 --> 
	3  / true
3 --> 
	4  / true
4 --> 
	5  / true
5 --> 
	6  / true
6 --> 
	7  / true
7 --> 
	8  / true
8 --> 
	9  / true
9 --> 
	10  / true
10 --> 
	11  / true
11 --> 
	12  / true
12 --> 
	13  / (tmp_i_26)
	15  / (!tmp_i_26)
13 --> 
	14  / true
14 --> 
	15  / true
15 --> 
	16  / true
16 --> 
	17  / true
17 --> 
	18  / true
18 --> 
	19  / true
19 --> 
	19  / (tmp_7 & tmp_9 & tmp_2)
* FSM state operations: 

 <State 1>: 11.04ns
ST_1: ntiles_V_load [1/1] 0.00ns
:0  %ntiles_V_load = load i8* @ntiles_V, align 1

ST_1: tmp_cast [1/1] 0.00ns
:1  %tmp_cast = zext i8 %ntiles_V_load to i9

ST_1: op2_assign_4 [1/1] 3.50ns
:2  %op2_assign_4 = add i9 %tmp_cast, -1

ST_1: t_V [1/1] 0.00ns
:3  %t_V = load i8* @cp_V, align 1

ST_1: tmp_cast_25 [1/1] 0.00ns
:4  %tmp_cast_25 = sext i8 %t_V to i9

ST_1: tmp_7 [1/1] 3.39ns
:5  %tmp_7 = icmp ult i9 %tmp_cast_25, %op2_assign_4

ST_1: stg_26 [1/1] 2.15ns
:6  br i1 %tmp_7, label %1, label %.loopexit

ST_1: p_4 [1/1] 3.50ns
:0  %p_4 = add i8 %t_V, 1

ST_1: stg_28 [1/1] 0.00ns
:1  store i8 %p_4, i8* @cp_V, align 1

ST_1: possible_V [1/1] 0.00ns
:2  %possible_V = load i36* @avail_V, align 8

ST_1: tmp_i [1/1] 3.40ns
:3  %tmp_i = icmp eq i8 %p_4, 0

ST_1: stg_31 [1/1] 2.67ns
:4  br i1 %tmp_i, label %left_possible_mask.exit_ifconv, label %2

ST_1: side_V_load [1/1] 0.00ns
:0  %side_V_load = load i8* @side_V, align 1

ST_1: tmp_40_tr_i [1/1] 0.00ns
:1  %tmp_40_tr_i = zext i8 %side_V_load to i9

ST_1: tmp_1_i [12/12] 7.54ns
:2  %tmp_1_i = sdiv i9 %tmp_cast_25, %tmp_40_tr_i

ST_1: tmp_42_tr_i [1/1] 0.00ns
:4  %tmp_42_tr_i = sext i8 %p_4 to i9

ST_1: tmp_2_i [12/12] 7.54ns
:5  %tmp_2_i = sdiv i9 %tmp_42_tr_i, %tmp_40_tr_i


 <State 2>: 7.54ns
ST_2: tmp_1_i [11/12] 7.54ns
:2  %tmp_1_i = sdiv i9 %tmp_cast_25, %tmp_40_tr_i

ST_2: tmp_2_i [11/12] 7.54ns
:5  %tmp_2_i = sdiv i9 %tmp_42_tr_i, %tmp_40_tr_i


 <State 3>: 7.54ns
ST_3: tmp_1_i [10/12] 7.54ns
:2  %tmp_1_i = sdiv i9 %tmp_cast_25, %tmp_40_tr_i

ST_3: tmp_2_i [10/12] 7.54ns
:5  %tmp_2_i = sdiv i9 %tmp_42_tr_i, %tmp_40_tr_i


 <State 4>: 7.54ns
ST_4: tmp_1_i [9/12] 7.54ns
:2  %tmp_1_i = sdiv i9 %tmp_cast_25, %tmp_40_tr_i

ST_4: tmp_2_i [9/12] 7.54ns
:5  %tmp_2_i = sdiv i9 %tmp_42_tr_i, %tmp_40_tr_i


 <State 5>: 7.54ns
ST_5: tmp_1_i [8/12] 7.54ns
:2  %tmp_1_i = sdiv i9 %tmp_cast_25, %tmp_40_tr_i

ST_5: tmp_2_i [8/12] 7.54ns
:5  %tmp_2_i = sdiv i9 %tmp_42_tr_i, %tmp_40_tr_i


 <State 6>: 7.54ns
ST_6: tmp_1_i [7/12] 7.54ns
:2  %tmp_1_i = sdiv i9 %tmp_cast_25, %tmp_40_tr_i

ST_6: tmp_2_i [7/12] 7.54ns
:5  %tmp_2_i = sdiv i9 %tmp_42_tr_i, %tmp_40_tr_i


 <State 7>: 7.54ns
ST_7: tmp_1_i [6/12] 7.54ns
:2  %tmp_1_i = sdiv i9 %tmp_cast_25, %tmp_40_tr_i

ST_7: tmp_2_i [6/12] 7.54ns
:5  %tmp_2_i = sdiv i9 %tmp_42_tr_i, %tmp_40_tr_i


 <State 8>: 7.54ns
ST_8: tmp_1_i [5/12] 7.54ns
:2  %tmp_1_i = sdiv i9 %tmp_cast_25, %tmp_40_tr_i

ST_8: tmp_2_i [5/12] 7.54ns
:5  %tmp_2_i = sdiv i9 %tmp_42_tr_i, %tmp_40_tr_i


 <State 9>: 7.54ns
ST_9: tmp_1_i [4/12] 7.54ns
:2  %tmp_1_i = sdiv i9 %tmp_cast_25, %tmp_40_tr_i

ST_9: tmp_2_i [4/12] 7.54ns
:5  %tmp_2_i = sdiv i9 %tmp_42_tr_i, %tmp_40_tr_i


 <State 10>: 7.54ns
ST_10: tmp_1_i [3/12] 7.54ns
:2  %tmp_1_i = sdiv i9 %tmp_cast_25, %tmp_40_tr_i

ST_10: tmp_2_i [3/12] 7.54ns
:5  %tmp_2_i = sdiv i9 %tmp_42_tr_i, %tmp_40_tr_i


 <State 11>: 7.54ns
ST_11: tmp_1_i [2/12] 7.54ns
:2  %tmp_1_i = sdiv i9 %tmp_cast_25, %tmp_40_tr_i

ST_11: tmp_2_i [2/12] 7.54ns
:5  %tmp_2_i = sdiv i9 %tmp_42_tr_i, %tmp_40_tr_i


 <State 12>: 13.60ns
ST_12: tmp_1_i [1/12] 7.54ns
:2  %tmp_1_i = sdiv i9 %tmp_cast_25, %tmp_40_tr_i

ST_12: r_V_11 [1/1] 0.00ns
:3  %r_V_11 = trunc i9 %tmp_1_i to i8

ST_12: tmp_2_i [1/12] 7.54ns
:5  %tmp_2_i = sdiv i9 %tmp_42_tr_i, %tmp_40_tr_i

ST_12: r_V_12 [1/1] 0.00ns
:6  %r_V_12 = trunc i9 %tmp_2_i to i8

ST_12: tmp_i_26 [1/1] 3.40ns
:7  %tmp_i_26 = icmp eq i8 %r_V_11, %r_V_12

ST_12: stg_62 [1/1] 2.67ns
:8  br i1 %tmp_i_26, label %3, label %left_possible_mask.exit_ifconv

ST_12: tmp_i_i [1/1] 0.00ns
:0  %tmp_i_i = zext i8 %t_V to i64

ST_12: pp_tile_V_addr_8 [1/1] 0.00ns
:1  %pp_tile_V_addr_8 = getelementptr [36 x i8]* @pp_tile_V, i64 0, i64 %tmp_i_i

ST_12: tile_V [2/2] 2.39ns
:2  %tile_V = load i8* %pp_tile_V_addr_8, align 2

ST_12: pp_rot_V_addr_7 [1/1] 0.00ns
:3  %pp_rot_V_addr_7 = getelementptr [36 x i2]* @pp_rot_V, i64 0, i64 %tmp_i_i

ST_12: rot_V [2/2] 2.39ns
:4  %rot_V = load i2* %pp_rot_V_addr_7, align 1


 <State 13>: 6.06ns
ST_13: tile_V [1/2] 2.39ns
:2  %tile_V = load i8* %pp_tile_V_addr_8, align 2

ST_13: rot_V [1/2] 2.39ns
:4  %rot_V = load i2* %pp_rot_V_addr_7, align 1

ST_13: r_V_s [1/1] 1.28ns
:5  %r_V_s = add i2 %rot_V, 1

ST_13: tmp [1/1] 0.00ns
:6  %tmp = call i10 @_ssdm_op_BitConcatenate.i10.i8.i2(i8 %tile_V, i2 %r_V_s)

ST_13: tmp_30 [1/1] 0.00ns
:7  %tmp_30 = zext i10 %tmp to i64

ST_13: tiles_V_addr [1/1] 0.00ns
:8  %tiles_V_addr = getelementptr [144 x i4]* @tiles_V, i64 0, i64 %tmp_30

ST_13: tiles_V_load [2/2] 2.39ns
:9  %tiles_V_load = load i4* %tiles_V_addr, align 1


 <State 14>: 4.78ns
ST_14: tiles_V_load [1/2] 2.39ns
:9  %tiles_V_load = load i4* %tiles_V_addr, align 1

ST_14: tmp_30_i [1/1] 0.00ns
:10  %tmp_30_i = zext i4 %tiles_V_load to i64

ST_14: colours_V_addr [1/1] 0.00ns
:11  %colours_V_addr = getelementptr [10 x i36]* @colours_V, i64 0, i64 %tmp_30_i

ST_14: colours_V_load [2/2] 2.39ns
:12  %colours_V_load = load i36* %colours_V_addr, align 8


 <State 15>: 5.89ns
ST_15: colours_V_load [1/2] 2.39ns
:12  %colours_V_load = load i36* %colours_V_addr, align 8

ST_15: stg_80 [1/1] 2.67ns
:13  br label %left_possible_mask.exit_ifconv

ST_15: side_V_load_3 [1/1] 0.00ns
left_possible_mask.exit_ifconv:1  %side_V_load_3 = load i8* @side_V, align 1

ST_15: up_V [1/1] 3.50ns
left_possible_mask.exit_ifconv:2  %up_V = sub i8 %p_4, %side_V_load_3

ST_15: tmp_36 [1/1] 0.00ns
left_possible_mask.exit_ifconv:3  %tmp_36 = call i1 @_ssdm_op_BitSelect.i1.i8.i32(i8 %up_V, i32 7)

ST_15: tmp_i_i3 [1/1] 0.00ns
left_possible_mask.exit_ifconv:4  %tmp_i_i3 = zext i8 %up_V to i64

ST_15: pp_tile_V_addr_9 [1/1] 0.00ns
left_possible_mask.exit_ifconv:5  %pp_tile_V_addr_9 = getelementptr [36 x i8]* @pp_tile_V, i64 0, i64 %tmp_i_i3

ST_15: tile_V_8 [2/2] 2.39ns
left_possible_mask.exit_ifconv:6  %tile_V_8 = load i8* %pp_tile_V_addr_9, align 2

ST_15: pp_rot_V_addr_8 [1/1] 0.00ns
left_possible_mask.exit_ifconv:7  %pp_rot_V_addr_8 = getelementptr [36 x i2]* @pp_rot_V, i64 0, i64 %tmp_i_i3

ST_15: rot_V_8 [2/2] 2.39ns
left_possible_mask.exit_ifconv:8  %rot_V_8 = load i2* %pp_rot_V_addr_8, align 1


 <State 16>: 6.78ns
ST_16: tile_V_8 [1/2] 2.39ns
left_possible_mask.exit_ifconv:6  %tile_V_8 = load i8* %pp_tile_V_addr_9, align 2

ST_16: rot_V_8 [1/2] 2.39ns
left_possible_mask.exit_ifconv:8  %rot_V_8 = load i2* %pp_rot_V_addr_8, align 1

ST_16: r_V_2 [1/1] 2.00ns
left_possible_mask.exit_ifconv:9  %r_V_2 = xor i2 %rot_V_8, -2

ST_16: tmp_31 [1/1] 0.00ns
left_possible_mask.exit_ifconv:10  %tmp_31 = call i10 @_ssdm_op_BitConcatenate.i10.i8.i2(i8 %tile_V_8, i2 %r_V_2)

ST_16: tmp_32 [1/1] 0.00ns
left_possible_mask.exit_ifconv:11  %tmp_32 = zext i10 %tmp_31 to i64

ST_16: tiles_V_addr_7 [1/1] 0.00ns
left_possible_mask.exit_ifconv:12  %tiles_V_addr_7 = getelementptr [144 x i4]* @tiles_V, i64 0, i64 %tmp_32

ST_16: tiles_V_load_6 [2/2] 2.39ns
left_possible_mask.exit_ifconv:13  %tiles_V_load_6 = load i4* %tiles_V_addr_7, align 1


 <State 17>: 4.78ns
ST_17: tiles_V_load_6 [1/2] 2.39ns
left_possible_mask.exit_ifconv:13  %tiles_V_load_6 = load i4* %tiles_V_addr_7, align 1

ST_17: tmp_i7 [1/1] 0.00ns
left_possible_mask.exit_ifconv:14  %tmp_i7 = zext i4 %tiles_V_load_6 to i64

ST_17: colours_V_addr_3 [1/1] 0.00ns
left_possible_mask.exit_ifconv:15  %colours_V_addr_3 = getelementptr [10 x i36]* @colours_V, i64 0, i64 %tmp_i7

ST_17: colours_V_load_2 [2/2] 2.39ns
left_possible_mask.exit_ifconv:16  %colours_V_load_2 = load i36* %colours_V_addr_3, align 8


 <State 18>: 4.39ns
ST_18: agg_result_V_i [1/1] 0.00ns
left_possible_mask.exit_ifconv:0  %agg_result_V_i = phi i36 [ %colours_V_load, %3 ], [ -1, %1 ], [ -1, %2 ]

ST_18: colours_V_load_2 [1/2] 2.39ns
left_possible_mask.exit_ifconv:16  %colours_V_load_2 = load i36* %colours_V_addr_3, align 8

ST_18: agg_result_V_i2 [1/1] 2.00ns
left_possible_mask.exit_ifconv:17  %agg_result_V_i2 = select i1 %tmp_36, i36 -1, i36 %colours_V_load_2

ST_18: tmp2 [1/1] 2.00ns
left_possible_mask.exit_ifconv:18  %tmp2 = and i36 %agg_result_V_i, %possible_V

ST_18: stg_104 [1/1] 2.10ns
left_possible_mask.exit_ifconv:19  br label %4


 <State 19>: 11.23ns
ST_19: op2_assign [1/1] 0.00ns
:0  %op2_assign = phi i8 [ 0, %left_possible_mask.exit_ifconv ], [ %t, %_ifconv ]

ST_19: tmp_9 [1/1] 3.40ns
:1  %tmp_9 = icmp ult i8 %op2_assign, %ntiles_V_load

ST_19: empty [1/1] 0.00ns
:2  %empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 0, i64 255, i64 0) nounwind

ST_19: t [1/1] 3.50ns
:3  %t = add i8 %op2_assign, 1

ST_19: stg_109 [1/1] 2.15ns
:4  br i1 %tmp_9, label %_ifconv, label %.loopexit

ST_19: tmp_s [1/1] 0.00ns
_ifconv:0  %tmp_s = zext i8 %op2_assign to i36

ST_19: r_V_13 [1/1] 3.24ns
_ifconv:1  %r_V_13 = shl i36 1, %tmp_s

ST_19: tmp3 [1/1] 2.00ns
_ifconv:2  %tmp3 = and i36 %agg_result_V_i2, %r_V_13

ST_19: r_V [1/1] 2.00ns
_ifconv:3  %r_V = and i36 %tmp3, %tmp2

ST_19: tmp_2 [1/1] 3.99ns
_ifconv:4  %tmp_2 = icmp eq i36 %r_V, 0

ST_19: stg_115 [1/1] 0.00ns
_ifconv:5  br i1 %tmp_2, label %4, label %_ifconv1

ST_19: tmp_3 [1/1] 0.00ns
_ifconv1:0  %tmp_3 = sext i8 %p_4 to i64

ST_19: pp_tile_V_addr [1/1] 0.00ns
_ifconv1:1  %pp_tile_V_addr = getelementptr [36 x i8]* @pp_tile_V, i64 0, i64 %tmp_3

ST_19: stg_118 [1/1] 2.39ns
_ifconv1:2  store i8 %op2_assign, i8* %pp_tile_V_addr, align 2

ST_19: pp_rot_V_addr [1/1] 0.00ns
_ifconv1:3  %pp_rot_V_addr = getelementptr [36 x i2]* @pp_rot_V, i64 0, i64 %tmp_3

ST_19: stg_120 [1/1] 2.39ns
_ifconv1:4  store i2 0, i2* %pp_rot_V_addr, align 1

ST_19: p_3 [1/1] 2.00ns
_ifconv1:5  %p_3 = xor i36 %r_V_13, -1

ST_19: tmp_4 [1/1] 2.00ns
_ifconv1:6  %tmp_4 = and i36 %possible_V, %p_3

ST_19: stg_123 [1/1] 0.00ns
_ifconv1:7  store i36 %tmp_4, i36* @avail_V, align 8

ST_19: stg_124 [1/1] 2.15ns
_ifconv1:8  br label %.loopexit

ST_19: p_s [1/1] 0.00ns
.loopexit:0  %p_s = phi i1 [ true, %_ifconv1 ], [ false, %0 ], [ false, %4 ]

ST_19: stg_126 [1/1] 0.00ns
.loopexit:1  ret i1 %p_s



============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15
	State 16
	State 17
	State 18
	State 19


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
