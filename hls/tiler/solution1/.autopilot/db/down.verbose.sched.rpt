

================================================================
== Vivado HLS Report for 'down'
================================================================
* Date:           Tue May 13 16:18:56 2014

* Version:        2013.4 (build date: Mon Dec 09 17:07:59 PM 2013)
* Project:        tiler
* Solution:       solution1
* Product family: spartan3e spartan3e_fpv5 
* Target device:  xc3s500efg320-4


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +---------+-------+----------+------------+
    |  Clock  | Target| Estimated| Uncertainty|
    +---------+-------+----------+------------+
    |default  |  20.00|     15.33|        2.50|
    +---------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-------+-----+-------+---------+
    |   Latency   |   Interval  | Pipeline|
    | min |  max  | min |  max  |   Type  |
    +-----+-------+-----+-------+---------+
    |   15|  65040|   15|  65040|   none  |
    +-----+-------+-----+-------+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +----------+-----+-------+----------+-----------+-----------+-----------+----------+
        |          |   Latency   | Iteration|  Initiation Interval  |    Trip   |          |
        | Loop Name| min |  max  |  Latency |  achieved |   target  |   Count   | Pipelined|
        +----------+-----+-------+----------+-----------+-----------+-----------+----------+
        |- Loop 1  |    0|  65025|         1|          -|          -| 0 ~ 65025 |    no    |
        +----------+-----+-------+----------+-----------+-----------+-----------+----------+



================================================================
== Utilization Estimates
================================================================
* Summary: 
+-----------------+---------+------+----------+
|       Name      | BRAM_18K|  LUT | MULT18x18|
+-----------------+---------+------+----------+
|Expression       |        -|     -|         -|
|FIFO             |        -|     -|         -|
|Instance         |        -|     -|         -|
|Memory           |        -|     -|         -|
|Multiplexer      |        -|     -|         -|
|Register         |        -|     -|         -|
|ShiftMemory      |        -|     -|         -|
+-----------------+---------+------+----------+
|Total            |        0|     0|         0|
+-----------------+---------+------+----------+
|Available        |       20|  9312|        20|
+-----------------+---------+------+----------+
|Utilization (%)  |        0|     0|         0|
+-----------------+---------+------+----------+

+ Detail: 
    * Instance: 
    N/A

    * Memory: 
    N/A

    * FIFO: 
    N/A

    * Shift register: 
    N/A

    * Expression: 
    N/A

    * Multiplexer: 
    N/A

    * Register: 
    N/A



================================================================
== Interface
================================================================
* Summary: 
N/A

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 16
* Pipeline: 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	3  / true
3 --> 
	4  / true
4 --> 
	5  / true
5 --> 
	6  / true
6 --> 
	7  / true
7 --> 
	8  / true
8 --> 
	9  / true
9 --> 
	10  / true
10 --> 
	11  / true
11 --> 
	12  / true
12 --> 
	13  / true
13 --> 
	14  / true
14 --> 
	15  / true
15 --> 
	16  / true
16 --> 
	16  / (tmp_8 & tmp_6)
* FSM state operations: 

 <State 1>: 7.54ns
ST_1: t_V [1/1] 0.00ns
_ifconv1:1  %t_V = load i8* @cp_V, align 1

ST_1: side_V_load_4 [1/1] 0.00ns
_ifconv1:4  %side_V_load_4 = load i8* @side_V, align 1

ST_1: tmp_tr_i [1/1] 0.00ns
_ifconv1:6  %tmp_tr_i = sext i8 %t_V to i9

ST_1: tmp_tr_i_19 [1/1] 0.00ns
_ifconv1:7  %tmp_tr_i_19 = zext i8 %side_V_load_4 to i9

ST_1: tmp_i [12/12] 7.54ns
_ifconv1:8  %tmp_i = sdiv i9 %tmp_tr_i, %tmp_tr_i_19


 <State 2>: 10.90ns
ST_2: cp_V_assign [1/1] 3.50ns
_ifconv1:2  %cp_V_assign = add i8 %t_V, 1

ST_2: stg_23 [1/1] 0.00ns
_ifconv1:3  store i8 %cp_V_assign, i8* @cp_V, align 1

ST_2: tmp_i [11/12] 7.54ns
_ifconv1:8  %tmp_i = sdiv i9 %tmp_tr_i, %tmp_tr_i_19

ST_2: r_V_9 [11/11] 7.40ns
_ifconv1:10  %r_V_9 = udiv i8 %cp_V_assign, %side_V_load_4


 <State 3>: 7.54ns
ST_3: tmp_i [10/12] 7.54ns
_ifconv1:8  %tmp_i = sdiv i9 %tmp_tr_i, %tmp_tr_i_19

ST_3: r_V_9 [10/11] 7.40ns
_ifconv1:10  %r_V_9 = udiv i8 %cp_V_assign, %side_V_load_4


 <State 4>: 7.54ns
ST_4: tmp_i [9/12] 7.54ns
_ifconv1:8  %tmp_i = sdiv i9 %tmp_tr_i, %tmp_tr_i_19

ST_4: r_V_9 [9/11] 7.40ns
_ifconv1:10  %r_V_9 = udiv i8 %cp_V_assign, %side_V_load_4


 <State 5>: 7.54ns
ST_5: tmp_i [8/12] 7.54ns
_ifconv1:8  %tmp_i = sdiv i9 %tmp_tr_i, %tmp_tr_i_19

ST_5: r_V_9 [8/11] 7.40ns
_ifconv1:10  %r_V_9 = udiv i8 %cp_V_assign, %side_V_load_4


 <State 6>: 7.54ns
ST_6: tmp_i [7/12] 7.54ns
_ifconv1:8  %tmp_i = sdiv i9 %tmp_tr_i, %tmp_tr_i_19

ST_6: r_V_9 [7/11] 7.40ns
_ifconv1:10  %r_V_9 = udiv i8 %cp_V_assign, %side_V_load_4


 <State 7>: 7.54ns
ST_7: tmp_i [6/12] 7.54ns
_ifconv1:8  %tmp_i = sdiv i9 %tmp_tr_i, %tmp_tr_i_19

ST_7: r_V_9 [6/11] 7.40ns
_ifconv1:10  %r_V_9 = udiv i8 %cp_V_assign, %side_V_load_4


 <State 8>: 7.54ns
ST_8: tmp_i [5/12] 7.54ns
_ifconv1:8  %tmp_i = sdiv i9 %tmp_tr_i, %tmp_tr_i_19

ST_8: r_V_9 [5/11] 7.40ns
_ifconv1:10  %r_V_9 = udiv i8 %cp_V_assign, %side_V_load_4


 <State 9>: 7.54ns
ST_9: tmp_i [4/12] 7.54ns
_ifconv1:8  %tmp_i = sdiv i9 %tmp_tr_i, %tmp_tr_i_19

ST_9: r_V_9 [4/11] 7.40ns
_ifconv1:10  %r_V_9 = udiv i8 %cp_V_assign, %side_V_load_4


 <State 10>: 7.54ns
ST_10: tmp_i [3/12] 7.54ns
_ifconv1:8  %tmp_i = sdiv i9 %tmp_tr_i, %tmp_tr_i_19

ST_10: r_V_9 [3/11] 7.40ns
_ifconv1:10  %r_V_9 = udiv i8 %cp_V_assign, %side_V_load_4


 <State 11>: 7.54ns
ST_11: tmp_i [2/12] 7.54ns
_ifconv1:8  %tmp_i = sdiv i9 %tmp_tr_i, %tmp_tr_i_19

ST_11: r_V_9 [2/11] 7.40ns
_ifconv1:10  %r_V_9 = udiv i8 %cp_V_assign, %side_V_load_4


 <State 12>: 15.33ns
ST_12: up_V [1/1] 3.50ns
_ifconv1:5  %up_V = sub i8 %cp_V_assign, %side_V_load_4

ST_12: tmp_i [1/12] 7.54ns
_ifconv1:8  %tmp_i = sdiv i9 %tmp_tr_i, %tmp_tr_i_19

ST_12: r_V_11 [1/1] 0.00ns
_ifconv1:9  %r_V_11 = trunc i9 %tmp_i to i8

ST_12: r_V_9 [1/11] 7.40ns
_ifconv1:10  %r_V_9 = udiv i8 %cp_V_assign, %side_V_load_4

ST_12: tmp_i_cast [1/1] 0.00ns
_ifconv1:11  %tmp_i_cast = sext i8 %r_V_11 to i9

ST_12: tmp_60_i_cast [1/1] 0.00ns
_ifconv1:12  %tmp_60_i_cast = zext i8 %r_V_9 to i9

ST_12: tmp_61_i [1/1] 3.40ns
_ifconv1:13  %tmp_61_i = icmp eq i9 %tmp_i_cast, %tmp_60_i_cast

ST_12: this_assign_i [1/1] 2.00ns
_ifconv1:14  %this_assign_i = select i1 %tmp_61_i, i8 %t_V, i8 -1

ST_12: tmp_31 [1/1] 0.00ns
_ifconv1:15  %tmp_31 = call i1 @_ssdm_op_BitSelect.i1.i8.i32(i8 %this_assign_i, i32 7)

ST_12: tmp_i_i [1/1] 0.00ns
_ifconv1:16  %tmp_i_i = zext i8 %this_assign_i to i64

ST_12: pp_tile_V_addr_1 [1/1] 0.00ns
_ifconv1:17  %pp_tile_V_addr_1 = getelementptr [36 x i8]* @pp_tile_V, i64 0, i64 %tmp_i_i

ST_12: tile_V [2/2] 2.39ns
_ifconv1:18  %tile_V = load i8* %pp_tile_V_addr_1, align 2

ST_12: pp_rot_V_addr_1 [1/1] 0.00ns
_ifconv1:19  %pp_rot_V_addr_1 = getelementptr [36 x i2]* @pp_rot_V, i64 0, i64 %tmp_i_i

ST_12: rot_V [2/2] 2.39ns
_ifconv1:20  %rot_V = load i2* %pp_rot_V_addr_1, align 1

ST_12: tmp_32 [1/1] 0.00ns
_ifconv1:29  %tmp_32 = call i1 @_ssdm_op_BitSelect.i1.i8.i32(i8 %up_V, i32 7)

ST_12: tmp_i23_i [1/1] 0.00ns
_ifconv1:30  %tmp_i23_i = zext i8 %up_V to i64

ST_12: pp_tile_V_addr_2 [1/1] 0.00ns
_ifconv1:31  %pp_tile_V_addr_2 = getelementptr [36 x i8]* @pp_tile_V, i64 0, i64 %tmp_i23_i

ST_12: tile_V_6 [2/2] 2.39ns
_ifconv1:32  %tile_V_6 = load i8* %pp_tile_V_addr_2, align 2

ST_12: pp_rot_V_addr_2 [1/1] 0.00ns
_ifconv1:33  %pp_rot_V_addr_2 = getelementptr [36 x i2]* @pp_rot_V, i64 0, i64 %tmp_i23_i

ST_12: rot_V_6 [2/2] 2.39ns
_ifconv1:34  %rot_V_6 = load i2* %pp_rot_V_addr_2, align 1


 <State 13>: 6.78ns
ST_13: tile_V [1/2] 2.39ns
_ifconv1:18  %tile_V = load i8* %pp_tile_V_addr_1, align 2

ST_13: rot_V [1/2] 2.39ns
_ifconv1:20  %rot_V = load i2* %pp_rot_V_addr_1, align 1

ST_13: r_V_s [1/1] 1.28ns
_ifconv1:21  %r_V_s = add i2 %rot_V, 1

ST_13: tmp_19 [1/1] 0.00ns
_ifconv1:22  %tmp_19 = call i10 @_ssdm_op_BitConcatenate.i10.i8.i2(i8 %tile_V, i2 %r_V_s)

ST_13: tmp_20 [1/1] 0.00ns
_ifconv1:23  %tmp_20 = zext i10 %tmp_19 to i64

ST_13: tiles_V_addr [1/1] 0.00ns
_ifconv1:24  %tiles_V_addr = getelementptr [144 x i4]* @tiles_V, i64 0, i64 %tmp_20

ST_13: tiles_V_load [2/2] 2.39ns
_ifconv1:25  %tiles_V_load = load i4* %tiles_V_addr, align 1

ST_13: tile_V_6 [1/2] 2.39ns
_ifconv1:32  %tile_V_6 = load i8* %pp_tile_V_addr_2, align 2

ST_13: rot_V_6 [1/2] 2.39ns
_ifconv1:34  %rot_V_6 = load i2* %pp_rot_V_addr_2, align 1

ST_13: r_V_1 [1/1] 2.00ns
_ifconv1:35  %r_V_1 = xor i2 %rot_V_6, -2

ST_13: tmp_21 [1/1] 0.00ns
_ifconv1:36  %tmp_21 = call i10 @_ssdm_op_BitConcatenate.i10.i8.i2(i8 %tile_V_6, i2 %r_V_1)

ST_13: tmp_22 [1/1] 0.00ns
_ifconv1:37  %tmp_22 = zext i10 %tmp_21 to i64

ST_13: tiles_V_addr_3 [1/1] 0.00ns
_ifconv1:38  %tiles_V_addr_3 = getelementptr [144 x i4]* @tiles_V, i64 0, i64 %tmp_22

ST_13: tiles_V_load_2 [2/2] 2.39ns
_ifconv1:39  %tiles_V_load_2 = load i4* %tiles_V_addr_3, align 1


 <State 14>: 6.78ns
ST_14: tiles_V_load [1/2] 2.39ns
_ifconv1:25  %tiles_V_load = load i4* %tiles_V_addr, align 1

ST_14: tmp_63_i_cast [1/1] 0.00ns
_ifconv1:26  %tmp_63_i_cast = zext i4 %tiles_V_load to i5

ST_14: p_i [1/1] 2.00ns
_ifconv1:27  %p_i = select i1 %tmp_31, i5 -1, i5 %tmp_63_i_cast

ST_14: p_i_cast [1/1] 0.00ns
_ifconv1:28  %p_i_cast = sext i5 %p_i to i8

ST_14: tiles_V_load_2 [1/2] 2.39ns
_ifconv1:39  %tiles_V_load_2 = load i4* %tiles_V_addr_3, align 1

ST_14: tmp_65_i_cast [1/1] 0.00ns
_ifconv1:40  %tmp_65_i_cast = zext i4 %tiles_V_load_2 to i5

ST_14: p_5_i [1/1] 2.00ns
_ifconv1:41  %p_5_i = select i1 %tmp_32, i5 -1, i5 %tmp_65_i_cast

ST_14: p_5_i_cast [1/1] 0.00ns
_ifconv1:42  %p_5_i_cast = sext i5 %p_5_i to i8

ST_14: tmp_3 [1/1] 0.00ns
_ifconv1:43  %tmp_3 = zext i8 %p_i_cast to i64

ST_14: colours_V_addr [1/1] 0.00ns
_ifconv1:44  %colours_V_addr = getelementptr [10 x i36]* @colours_V, i64 0, i64 %tmp_3

ST_14: colours_V_load [2/2] 2.39ns
_ifconv1:45  %colours_V_load = load i36* %colours_V_addr, align 8

ST_14: tmp_5 [1/1] 0.00ns
_ifconv1:47  %tmp_5 = zext i8 %p_5_i_cast to i64

ST_14: colours_V_addr_1 [1/1] 0.00ns
_ifconv1:48  %colours_V_addr_1 = getelementptr [10 x i36]* @colours_V, i64 0, i64 %tmp_5

ST_14: colours_V_load_1 [2/2] 2.39ns
_ifconv1:49  %colours_V_load_1 = load i36* %colours_V_addr_1, align 8


 <State 15>: 6.39ns
ST_15: possible_V [1/1] 0.00ns
_ifconv1:0  %possible_V = load i36* @avail_V, align 8

ST_15: colours_V_load [1/2] 2.39ns
_ifconv1:45  %colours_V_load = load i36* %colours_V_addr, align 8

ST_15: possible_V_1 [1/1] 2.00ns
_ifconv1:46  %possible_V_1 = select i1 %tmp_31, i36 -1, i36 %colours_V_load

ST_15: colours_V_load_1 [1/2] 2.39ns
_ifconv1:49  %colours_V_load_1 = load i36* %colours_V_addr_1, align 8

ST_15: possible_V_2 [1/1] 2.00ns
_ifconv1:50  %possible_V_2 = select i1 %tmp_32, i36 -1, i36 %colours_V_load_1

ST_15: lhs_V [1/1] 0.00ns
_ifconv1:51  %lhs_V = zext i8 %side_V_load_4 to i16

ST_15: r_V [1/1] 5.08ns
_ifconv1:52  %r_V = mul i16 %lhs_V, %lhs_V

ST_15: tmp [1/1] 2.00ns
_ifconv1:53  %tmp = and i36 %possible_V, %possible_V_1

ST_15: stg_100 [1/1] 2.38ns
_ifconv1:54  br label %0


 <State 16>: 11.23ns
ST_16: op2_assign [1/1] 0.00ns
:0  %op2_assign = phi i16 [ 0, %_ifconv1 ], [ %t, %_ifconv ]

ST_16: tmp_8 [1/1] 3.38ns
:1  %tmp_8 = icmp ult i16 %op2_assign, %r_V

ST_16: empty [1/1] 0.00ns
:2  %empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 0, i64 65025, i64 0) nounwind

ST_16: t [1/1] 3.74ns
:3  %t = add i16 %op2_assign, 1

ST_16: stg_105 [1/1] 0.00ns
:4  br i1 %tmp_8, label %_ifconv, label %.loopexit

ST_16: tmp_s [1/1] 0.00ns
_ifconv:0  %tmp_s = zext i16 %op2_assign to i36

ST_16: r_V_12 [1/1] 3.24ns
_ifconv:1  %r_V_12 = shl i36 1, %tmp_s

ST_16: tmp3 [1/1] 2.00ns
_ifconv:2  %tmp3 = and i36 %possible_V_2, %r_V_12

ST_16: r_V_4 [1/1] 2.00ns
_ifconv:3  %r_V_4 = and i36 %tmp3, %tmp

ST_16: tmp_6 [1/1] 3.99ns
_ifconv:4  %tmp_6 = icmp eq i36 %r_V_4, 0

ST_16: stg_111 [1/1] 0.00ns
_ifconv:5  br i1 %tmp_6, label %0, label %_ifconv2

ST_16: tmp_7 [1/1] 0.00ns
_ifconv2:0  %tmp_7 = zext i8 %cp_V_assign to i64

ST_16: tmp_33 [1/1] 0.00ns
_ifconv2:1  %tmp_33 = trunc i16 %op2_assign to i8

ST_16: pp_tile_V_addr [1/1] 0.00ns
_ifconv2:2  %pp_tile_V_addr = getelementptr [36 x i8]* @pp_tile_V, i64 0, i64 %tmp_7

ST_16: stg_115 [1/1] 2.39ns
_ifconv2:3  store i8 %tmp_33, i8* %pp_tile_V_addr, align 2

ST_16: pp_rot_V_addr [1/1] 0.00ns
_ifconv2:4  %pp_rot_V_addr = getelementptr [36 x i2]* @pp_rot_V, i64 0, i64 %tmp_7

ST_16: stg_117 [1/1] 2.39ns
_ifconv2:5  store i2 0, i2* %pp_rot_V_addr, align 1

ST_16: p_2 [1/1] 2.00ns
_ifconv2:6  %p_2 = xor i36 %r_V_12, -1

ST_16: tmp_1 [1/1] 2.00ns
_ifconv2:7  %tmp_1 = and i36 %possible_V, %p_2

ST_16: stg_120 [1/1] 0.00ns
_ifconv2:8  store i36 %tmp_1, i36* @avail_V, align 8

ST_16: stg_121 [1/1] 0.00ns
_ifconv2:9  br label %.loopexit

ST_16: stg_122 [1/1] 0.00ns
.loopexit:0  ret void



============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15
	State 16


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
