-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2013.4
-- Copyright (C) 2013 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity toplevel is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    input_V_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    input_V_V_empty_n : IN STD_LOGIC;
    input_V_V_read : OUT STD_LOGIC;
    output_V_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_V_V_full_n : IN STD_LOGIC;
    output_V_V_write : OUT STD_LOGIC );
end;


architecture behav of toplevel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "toplevel,hls_ip_2013_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc3s500efg320-4,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=15.327600,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=0}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv6_24 : STD_LOGIC_VECTOR (5 downto 0) := "100100";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv36_1 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal cp_V : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal avail_V : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000000";
    signal side_V : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal tiles_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tiles_V_ce0 : STD_LOGIC;
    signal tiles_V_we0 : STD_LOGIC;
    signal tiles_V_d0 : STD_LOGIC_VECTOR (3 downto 0);
    signal tiles_V_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal tiles_V_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tiles_V_ce1 : STD_LOGIC;
    signal tiles_V_q1 : STD_LOGIC_VECTOR (3 downto 0);
    signal colours_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal colours_V_ce0 : STD_LOGIC;
    signal colours_V_we0 : STD_LOGIC;
    signal colours_V_d0 : STD_LOGIC_VECTOR (35 downto 0);
    signal colours_V_q0 : STD_LOGIC_VECTOR (35 downto 0);
    signal colours_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal colours_V_ce1 : STD_LOGIC;
    signal colours_V_q1 : STD_LOGIC_VECTOR (35 downto 0);
    signal pp_tile_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal pp_tile_V_ce0 : STD_LOGIC;
    signal pp_tile_V_we0 : STD_LOGIC;
    signal pp_tile_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal pp_tile_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal pp_tile_V_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal pp_tile_V_ce1 : STD_LOGIC;
    signal pp_tile_V_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal pp_rot_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal pp_rot_V_ce0 : STD_LOGIC;
    signal pp_rot_V_we0 : STD_LOGIC;
    signal pp_rot_V_d0 : STD_LOGIC_VECTOR (1 downto 0);
    signal pp_rot_V_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal pp_rot_V_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal pp_rot_V_ce1 : STD_LOGIC;
    signal pp_rot_V_q1 : STD_LOGIC_VECTOR (1 downto 0);
    signal t_fu_273_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal exitcond_i_fu_267_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_95 : BOOLEAN;
    signal t_V_1_fu_335_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_V_1_reg_579 : STD_LOGIC_VECTOR (7 downto 0);
    signal e_V_fu_347_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond1_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_107 : BOOLEAN;
    signal t_1_fu_405_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_1_reg_595 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_4_fu_445_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal r_V_4_reg_600 : STD_LOGIC_VECTOR (35 downto 0);
    signal tmp_1_i_fu_399_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal e_fu_459_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal e_reg_608 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond_i9_fu_453_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal colours_V_addr_reg_618 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_V_fu_517_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_V_reg_626 : STD_LOGIC_VECTOR (7 downto 0);
    signal pp_tile_V_addr_reg_631 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_7_fu_511_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pp_rot_V_addr_reg_636 : STD_LOGIC_VECTOR (5 downto 0);
    signal e_V_1_fu_535_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal e_V_1_reg_644 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_11_fu_541_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_11_reg_649 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond_fu_529_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_solve_fu_239_ap_start : STD_LOGIC;
    signal grp_solve_fu_239_ap_done : STD_LOGIC;
    signal grp_solve_fu_239_ap_idle : STD_LOGIC;
    signal grp_solve_fu_239_ap_ready : STD_LOGIC;
    signal grp_solve_fu_239_avail_V_i : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_solve_fu_239_avail_V_o : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_solve_fu_239_avail_V_o_ap_vld : STD_LOGIC;
    signal grp_solve_fu_239_side_V : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_solve_fu_239_cp_V_i : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_solve_fu_239_cp_V_o : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_solve_fu_239_cp_V_o_ap_vld : STD_LOGIC;
    signal grp_solve_fu_239_pp_tile_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_solve_fu_239_pp_tile_V_ce0 : STD_LOGIC;
    signal grp_solve_fu_239_pp_tile_V_we0 : STD_LOGIC;
    signal grp_solve_fu_239_pp_tile_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_solve_fu_239_pp_tile_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_solve_fu_239_pp_tile_V_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_solve_fu_239_pp_tile_V_ce1 : STD_LOGIC;
    signal grp_solve_fu_239_pp_tile_V_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_solve_fu_239_pp_rot_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_solve_fu_239_pp_rot_V_ce0 : STD_LOGIC;
    signal grp_solve_fu_239_pp_rot_V_we0 : STD_LOGIC;
    signal grp_solve_fu_239_pp_rot_V_d0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_solve_fu_239_pp_rot_V_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_solve_fu_239_pp_rot_V_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_solve_fu_239_pp_rot_V_ce1 : STD_LOGIC;
    signal grp_solve_fu_239_pp_rot_V_q1 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_solve_fu_239_tiles_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_solve_fu_239_tiles_V_ce0 : STD_LOGIC;
    signal grp_solve_fu_239_tiles_V_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_solve_fu_239_tiles_V_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_solve_fu_239_tiles_V_ce1 : STD_LOGIC;
    signal grp_solve_fu_239_tiles_V_q1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_solve_fu_239_colours_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_solve_fu_239_colours_V_ce0 : STD_LOGIC;
    signal grp_solve_fu_239_colours_V_q0 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_solve_fu_239_colours_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_solve_fu_239_colours_V_ce1 : STD_LOGIC;
    signal grp_solve_fu_239_colours_V_q1 : STD_LOGIC_VECTOR (35 downto 0);
    signal op2_assign_reg_159 : STD_LOGIC_VECTOR (5 downto 0);
    signal t_V_reg_170 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_V_2_reg_182 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_fu_329_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal op2_assign_1_reg_193 : STD_LOGIC_VECTOR (31 downto 0);
    signal e_i_reg_205 : STD_LOGIC_VECTOR (2 downto 0);
    signal t_V_3_reg_216 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_V_4_reg_227 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_solve_fu_239_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal tmp_1_fu_380_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_481_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tiles_V_addr4_fu_475_p2_temp: signed (32-1 downto 0);
    signal tmp_9_i1_fu_486_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i1_fu_523_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_558_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_i_fu_293_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal tmp_3_fu_305_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_fu_279_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal r_V_2_fu_283_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal r_V_fu_319_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_V_fu_315_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_fu_319_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_cast_fu_325_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_fu_319_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_362_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tiles_V_addr5_cast_fu_370_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_9_trn_cast_fu_358_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tiles_V_addr6_fu_374_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_3_fu_389_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_V_1_fu_385_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_3_fu_389_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_3_fu_389_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_i5_cast_fu_395_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_i_fu_419_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal tmp_5_i6_fu_429_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_i8_fu_435_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_411_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_i8_cast_fu_441_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal tmp_4_i_fu_423_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal tmp_10_fu_469_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_i1_trn_fu_465_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tiles_V_addr4_fu_475_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_1_fu_501_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_V_2_fu_497_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_1_fu_501_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_cast_fu_507_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_1_fu_501_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_5_fu_545_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_5_fu_550_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);

    component solve IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        avail_V_i : IN STD_LOGIC_VECTOR (35 downto 0);
        avail_V_o : OUT STD_LOGIC_VECTOR (35 downto 0);
        avail_V_o_ap_vld : OUT STD_LOGIC;
        side_V : IN STD_LOGIC_VECTOR (7 downto 0);
        cp_V_i : IN STD_LOGIC_VECTOR (7 downto 0);
        cp_V_o : OUT STD_LOGIC_VECTOR (7 downto 0);
        cp_V_o_ap_vld : OUT STD_LOGIC;
        pp_tile_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        pp_tile_V_ce0 : OUT STD_LOGIC;
        pp_tile_V_we0 : OUT STD_LOGIC;
        pp_tile_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        pp_tile_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        pp_tile_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        pp_tile_V_ce1 : OUT STD_LOGIC;
        pp_tile_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        pp_rot_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        pp_rot_V_ce0 : OUT STD_LOGIC;
        pp_rot_V_we0 : OUT STD_LOGIC;
        pp_rot_V_d0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        pp_rot_V_q0 : IN STD_LOGIC_VECTOR (1 downto 0);
        pp_rot_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        pp_rot_V_ce1 : OUT STD_LOGIC;
        pp_rot_V_q1 : IN STD_LOGIC_VECTOR (1 downto 0);
        tiles_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        tiles_V_ce0 : OUT STD_LOGIC;
        tiles_V_q0 : IN STD_LOGIC_VECTOR (3 downto 0);
        tiles_V_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        tiles_V_ce1 : OUT STD_LOGIC;
        tiles_V_q1 : IN STD_LOGIC_VECTOR (3 downto 0);
        colours_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        colours_V_ce0 : OUT STD_LOGIC;
        colours_V_q0 : IN STD_LOGIC_VECTOR (35 downto 0);
        colours_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        colours_V_ce1 : OUT STD_LOGIC;
        colours_V_q1 : IN STD_LOGIC_VECTOR (35 downto 0) );
    end component;


    component toplevel_tiles_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (3 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component toplevel_colours_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (35 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (35 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (35 downto 0) );
    end component;


    component toplevel_pp_tile_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component toplevel_pp_rot_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (1 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;



begin
    tiles_V_U : component toplevel_tiles_V
    generic map (
        DataWidth => 4,
        AddressRange => 144,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => tiles_V_address0,
        ce0 => tiles_V_ce0,
        we0 => tiles_V_we0,
        d0 => tiles_V_d0,
        q0 => tiles_V_q0,
        address1 => tiles_V_address1,
        ce1 => tiles_V_ce1,
        q1 => tiles_V_q1);

    colours_V_U : component toplevel_colours_V
    generic map (
        DataWidth => 36,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => colours_V_address0,
        ce0 => colours_V_ce0,
        we0 => colours_V_we0,
        d0 => colours_V_d0,
        q0 => colours_V_q0,
        address1 => colours_V_address1,
        ce1 => colours_V_ce1,
        q1 => colours_V_q1);

    pp_tile_V_U : component toplevel_pp_tile_V
    generic map (
        DataWidth => 8,
        AddressRange => 36,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => pp_tile_V_address0,
        ce0 => pp_tile_V_ce0,
        we0 => pp_tile_V_we0,
        d0 => pp_tile_V_d0,
        q0 => pp_tile_V_q0,
        address1 => pp_tile_V_address1,
        ce1 => pp_tile_V_ce1,
        q1 => pp_tile_V_q1);

    pp_rot_V_U : component toplevel_pp_rot_V
    generic map (
        DataWidth => 2,
        AddressRange => 36,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => pp_rot_V_address0,
        ce0 => pp_rot_V_ce0,
        we0 => pp_rot_V_we0,
        d0 => pp_rot_V_d0,
        q0 => pp_rot_V_q0,
        address1 => pp_rot_V_address1,
        ce1 => pp_rot_V_ce1,
        q1 => pp_rot_V_q1);

    grp_solve_fu_239 : component solve
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_solve_fu_239_ap_start,
        ap_done => grp_solve_fu_239_ap_done,
        ap_idle => grp_solve_fu_239_ap_idle,
        ap_ready => grp_solve_fu_239_ap_ready,
        avail_V_i => grp_solve_fu_239_avail_V_i,
        avail_V_o => grp_solve_fu_239_avail_V_o,
        avail_V_o_ap_vld => grp_solve_fu_239_avail_V_o_ap_vld,
        side_V => grp_solve_fu_239_side_V,
        cp_V_i => grp_solve_fu_239_cp_V_i,
        cp_V_o => grp_solve_fu_239_cp_V_o,
        cp_V_o_ap_vld => grp_solve_fu_239_cp_V_o_ap_vld,
        pp_tile_V_address0 => grp_solve_fu_239_pp_tile_V_address0,
        pp_tile_V_ce0 => grp_solve_fu_239_pp_tile_V_ce0,
        pp_tile_V_we0 => grp_solve_fu_239_pp_tile_V_we0,
        pp_tile_V_d0 => grp_solve_fu_239_pp_tile_V_d0,
        pp_tile_V_q0 => grp_solve_fu_239_pp_tile_V_q0,
        pp_tile_V_address1 => grp_solve_fu_239_pp_tile_V_address1,
        pp_tile_V_ce1 => grp_solve_fu_239_pp_tile_V_ce1,
        pp_tile_V_q1 => grp_solve_fu_239_pp_tile_V_q1,
        pp_rot_V_address0 => grp_solve_fu_239_pp_rot_V_address0,
        pp_rot_V_ce0 => grp_solve_fu_239_pp_rot_V_ce0,
        pp_rot_V_we0 => grp_solve_fu_239_pp_rot_V_we0,
        pp_rot_V_d0 => grp_solve_fu_239_pp_rot_V_d0,
        pp_rot_V_q0 => grp_solve_fu_239_pp_rot_V_q0,
        pp_rot_V_address1 => grp_solve_fu_239_pp_rot_V_address1,
        pp_rot_V_ce1 => grp_solve_fu_239_pp_rot_V_ce1,
        pp_rot_V_q1 => grp_solve_fu_239_pp_rot_V_q1,
        tiles_V_address0 => grp_solve_fu_239_tiles_V_address0,
        tiles_V_ce0 => grp_solve_fu_239_tiles_V_ce0,
        tiles_V_q0 => grp_solve_fu_239_tiles_V_q0,
        tiles_V_address1 => grp_solve_fu_239_tiles_V_address1,
        tiles_V_ce1 => grp_solve_fu_239_tiles_V_ce1,
        tiles_V_q1 => grp_solve_fu_239_tiles_V_q1,
        colours_V_address0 => grp_solve_fu_239_colours_V_address0,
        colours_V_ce0 => grp_solve_fu_239_colours_V_ce0,
        colours_V_q0 => grp_solve_fu_239_colours_V_q0,
        colours_V_address1 => grp_solve_fu_239_colours_V_address1,
        colours_V_ce1 => grp_solve_fu_239_colours_V_ce1,
        colours_V_q1 => grp_solve_fu_239_colours_V_q1);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- grp_solve_fu_239_ap_start_ap_start_reg assign process. --
    grp_solve_fu_239_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_solve_fu_239_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_ST_st5_fsm_4 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_1_i_fu_399_p2))) then 
                    grp_solve_fu_239_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_solve_fu_239_ap_ready)) then 
                    grp_solve_fu_239_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- avail_V assign process. --
    avail_V_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and (exitcond_i_fu_267_p2 = ap_const_lv1_0) and not(ap_sig_bdd_95))) then 
                avail_V <= tmp_9_i_fu_293_p2;
            elsif ((((ap_ST_st5_fsm_4 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_1_i_fu_399_p2) and (ap_const_logic_1 = grp_solve_fu_239_avail_V_o_ap_vld)) or ((ap_ST_st9_fsm_8 = ap_CS_fsm) and (ap_const_logic_1 = grp_solve_fu_239_avail_V_o_ap_vld)))) then 
                avail_V <= grp_solve_fu_239_avail_V_o;
            end if; 
        end if;
    end process;

    -- cp_V assign process. --
    cp_V_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st1_fsm_0 = ap_CS_fsm)) then 
                cp_V <= ap_const_lv8_0;
            elsif ((((ap_ST_st5_fsm_4 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_1_i_fu_399_p2) and (ap_const_logic_1 = grp_solve_fu_239_cp_V_o_ap_vld)) or ((ap_ST_st9_fsm_8 = ap_CS_fsm) and (ap_const_logic_1 = grp_solve_fu_239_cp_V_o_ap_vld)))) then 
                cp_V <= grp_solve_fu_239_cp_V_o;
            end if; 
        end if;
    end process;

    -- e_i_reg_205 assign process. --
    e_i_reg_205_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st5_fsm_4 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_1_i_fu_399_p2)))) then 
                e_i_reg_205 <= ap_const_lv3_0;
            elsif ((ap_ST_st8_fsm_7 = ap_CS_fsm)) then 
                e_i_reg_205 <= e_reg_608;
            end if; 
        end if;
    end process;

    -- op2_assign_1_reg_193 assign process. --
    op2_assign_1_reg_193_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st6_fsm_5 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond_i9_fu_453_p2)))) then 
                op2_assign_1_reg_193 <= t_1_reg_595;
            elsif (((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_2_fu_329_p2))) then 
                op2_assign_1_reg_193 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- op2_assign_reg_159 assign process. --
    op2_assign_reg_159_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and (exitcond_i_fu_267_p2 = ap_const_lv1_0) and not(ap_sig_bdd_95))) then 
                op2_assign_reg_159 <= t_fu_273_p2;
            elsif ((ap_ST_st1_fsm_0 = ap_CS_fsm)) then 
                op2_assign_reg_159 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    -- t_V_2_reg_182 assign process. --
    t_V_2_reg_182_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_2_fu_329_p2)))) then 
                t_V_2_reg_182 <= ap_const_lv3_0;
            elsif (((ap_ST_st4_fsm_3 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond1_fu_341_p2) and not(ap_sig_bdd_107))) then 
                t_V_2_reg_182 <= e_V_fu_347_p2;
            end if; 
        end if;
    end process;

    -- t_V_3_reg_216 assign process. --
    t_V_3_reg_216_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st11_fsm_10 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond_fu_529_p2)))) then 
                t_V_3_reg_216 <= p_V_reg_626;
            elsif (((ap_ST_st9_fsm_8 = ap_CS_fsm) and not((ap_const_logic_0 = grp_solve_fu_239_ap_done)))) then 
                t_V_3_reg_216 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    -- t_V_4_reg_227 assign process. --
    t_V_4_reg_227_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st10_fsm_9 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_7_fu_511_p2)))) then 
                t_V_4_reg_227 <= ap_const_lv3_0;
            elsif (((ap_ST_st13_fsm_12 = ap_CS_fsm) and not((output_V_V_full_n = ap_const_logic_0)))) then 
                t_V_4_reg_227 <= e_V_1_reg_644;
            end if; 
        end if;
    end process;

    -- t_V_reg_170 assign process. --
    t_V_reg_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st4_fsm_3 = ap_CS_fsm) and not(ap_sig_bdd_107) and not((ap_const_lv1_0 = exitcond1_fu_341_p2)))) then 
                t_V_reg_170 <= t_V_1_reg_579;
            elsif (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((exitcond_i_fu_267_p2 = ap_const_lv1_0)) and not(ap_sig_bdd_95))) then 
                t_V_reg_170 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st7_fsm_6 = ap_CS_fsm)) then
                colours_V_addr_reg_618 <= tmp_9_i1_fu_486_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st11_fsm_10 = ap_CS_fsm)) then
                e_V_1_reg_644 <= e_V_1_fu_535_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st6_fsm_5 = ap_CS_fsm)) then
                e_reg_608 <= e_fu_459_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st10_fsm_9 = ap_CS_fsm)) then
                p_V_reg_626 <= p_V_fu_517_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st10_fsm_9 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_7_fu_511_p2)))) then
                pp_rot_V_addr_reg_636 <= tmp_i1_fu_523_p1(6 - 1 downto 0);
                pp_tile_V_addr_reg_631 <= tmp_i1_fu_523_p1(6 - 1 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st5_fsm_4 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_1_i_fu_399_p2)))) then
                r_V_4_reg_600 <= r_V_4_fu_445_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((exitcond_i_fu_267_p2 = ap_const_lv1_0)) and not(ap_sig_bdd_95))) then
                side_V <= tmp_3_fu_305_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st5_fsm_4 = ap_CS_fsm)) then
                t_1_reg_595 <= t_1_fu_405_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then
                t_V_1_reg_579 <= t_V_1_fu_335_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st11_fsm_10 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond_fu_529_p2))) then
                tmp_11_reg_649 <= tmp_11_fu_541_p1;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (output_V_V_full_n , ap_CS_fsm , exitcond_i_fu_267_p2 , ap_sig_bdd_95 , exitcond1_fu_341_p2 , ap_sig_bdd_107 , tmp_1_i_fu_399_p2 , exitcond_i9_fu_453_p2 , tmp_7_fu_511_p2 , exitcond_fu_529_p2 , grp_solve_fu_239_ap_done , tmp_2_fu_329_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when ap_ST_st2_fsm_1 => 
                if ((not((exitcond_i_fu_267_p2 = ap_const_lv1_0)) and not(ap_sig_bdd_95))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                elsif (((exitcond_i_fu_267_p2 = ap_const_lv1_0) and not(ap_sig_bdd_95))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st3_fsm_2 => 
                if ((ap_const_lv1_0 = tmp_2_fu_329_p2)) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st4_fsm_3 => 
                if (((ap_const_lv1_0 = exitcond1_fu_341_p2) and not(ap_sig_bdd_107))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                elsif ((not(ap_sig_bdd_107) and not((ap_const_lv1_0 = exitcond1_fu_341_p2)))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st5_fsm_4 => 
                if (not((ap_const_lv1_0 = tmp_1_i_fu_399_p2))) then
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_st9_fsm_8;
                end if;
            when ap_ST_st6_fsm_5 => 
                if ((ap_const_lv1_0 = exitcond_i9_fu_453_p2)) then
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st9_fsm_8 => 
                if (not((ap_const_logic_0 = grp_solve_fu_239_ap_done))) then
                    ap_NS_fsm <= ap_ST_st10_fsm_9;
                else
                    ap_NS_fsm <= ap_ST_st9_fsm_8;
                end if;
            when ap_ST_st10_fsm_9 => 
                if ((ap_const_lv1_0 = tmp_7_fu_511_p2)) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st11_fsm_10;
                end if;
            when ap_ST_st11_fsm_10 => 
                if ((ap_const_lv1_0 = exitcond_fu_529_p2)) then
                    ap_NS_fsm <= ap_ST_st12_fsm_11;
                else
                    ap_NS_fsm <= ap_ST_st10_fsm_9;
                end if;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                if (not((output_V_V_full_n = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st11_fsm_10;
                else
                    ap_NS_fsm <= ap_ST_st13_fsm_12;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;

    -- ap_sig_bdd_107 assign process. --
    ap_sig_bdd_107_assign_proc : process(input_V_V_empty_n, exitcond1_fu_341_p2)
    begin
                ap_sig_bdd_107 <= ((input_V_V_empty_n = ap_const_logic_0) and (ap_const_lv1_0 = exitcond1_fu_341_p2));
    end process;


    -- ap_sig_bdd_95 assign process. --
    ap_sig_bdd_95_assign_proc : process(input_V_V_empty_n, exitcond_i_fu_267_p2)
    begin
                ap_sig_bdd_95 <= ((input_V_V_empty_n = ap_const_logic_0) and not((exitcond_i_fu_267_p2 = ap_const_lv1_0)));
    end process;


    -- colours_V_address0 assign process. --
    colours_V_address0_assign_proc : process(ap_CS_fsm, colours_V_addr_reg_618, grp_solve_fu_239_colours_V_address0, tmp_9_i1_fu_486_p1)
    begin
        if ((ap_ST_st8_fsm_7 = ap_CS_fsm)) then 
            colours_V_address0 <= colours_V_addr_reg_618;
        elsif ((ap_ST_st7_fsm_6 = ap_CS_fsm)) then 
            colours_V_address0 <= tmp_9_i1_fu_486_p1(4 - 1 downto 0);
        elsif ((ap_ST_st9_fsm_8 = ap_CS_fsm)) then 
            colours_V_address0 <= grp_solve_fu_239_colours_V_address0;
        else 
            colours_V_address0 <= "XXXX";
        end if; 
    end process;

    colours_V_address1 <= grp_solve_fu_239_colours_V_address1;

    -- colours_V_ce0 assign process. --
    colours_V_ce0_assign_proc : process(ap_CS_fsm, grp_solve_fu_239_colours_V_ce0)
    begin
        if (((ap_ST_st7_fsm_6 = ap_CS_fsm) or (ap_ST_st8_fsm_7 = ap_CS_fsm))) then 
            colours_V_ce0 <= ap_const_logic_1;
        elsif ((ap_ST_st9_fsm_8 = ap_CS_fsm)) then 
            colours_V_ce0 <= grp_solve_fu_239_colours_V_ce0;
        else 
            colours_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- colours_V_ce1 assign process. --
    colours_V_ce1_assign_proc : process(ap_CS_fsm, grp_solve_fu_239_colours_V_ce1)
    begin
        if ((ap_ST_st9_fsm_8 = ap_CS_fsm)) then 
            colours_V_ce1 <= grp_solve_fu_239_colours_V_ce1;
        else 
            colours_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    colours_V_d0 <= (colours_V_q0 or r_V_4_reg_600);

    -- colours_V_we0 assign process. --
    colours_V_we0_assign_proc : process(ap_CS_fsm)
    begin
        if (((ap_ST_st8_fsm_7 = ap_CS_fsm))) then 
            colours_V_we0 <= ap_const_logic_1;
        else 
            colours_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    e_V_1_fu_535_p2 <= std_logic_vector(unsigned(t_V_4_reg_227) + unsigned(ap_const_lv3_1));
    e_V_fu_347_p2 <= std_logic_vector(unsigned(t_V_2_reg_182) + unsigned(ap_const_lv3_1));
    e_fu_459_p2 <= std_logic_vector(unsigned(e_i_reg_205) + unsigned(ap_const_lv3_1));
    exitcond1_fu_341_p2 <= "1" when (t_V_2_reg_182 = ap_const_lv3_4) else "0";
    exitcond_fu_529_p2 <= "1" when (t_V_4_reg_227 = ap_const_lv3_4) else "0";
    exitcond_i9_fu_453_p2 <= "1" when (e_i_reg_205 = ap_const_lv3_4) else "0";
    exitcond_i_fu_267_p2 <= "1" when (op2_assign_reg_159 = ap_const_lv6_24) else "0";
    grp_solve_fu_239_ap_start <= grp_solve_fu_239_ap_start_ap_start_reg;
    grp_solve_fu_239_avail_V_i <= avail_V;
    grp_solve_fu_239_colours_V_q0 <= colours_V_q0;
    grp_solve_fu_239_colours_V_q1 <= colours_V_q1;
    grp_solve_fu_239_cp_V_i <= cp_V;
    grp_solve_fu_239_pp_rot_V_q0 <= pp_rot_V_q0;
    grp_solve_fu_239_pp_rot_V_q1 <= pp_rot_V_q1;
    grp_solve_fu_239_pp_tile_V_q0 <= pp_tile_V_q0;
    grp_solve_fu_239_pp_tile_V_q1 <= pp_tile_V_q1;
    grp_solve_fu_239_side_V <= side_V;
    grp_solve_fu_239_tiles_V_q0 <= tiles_V_q0;
    grp_solve_fu_239_tiles_V_q1 <= tiles_V_q1;

    -- input_V_V_read assign process. --
    input_V_V_read_assign_proc : process(ap_CS_fsm, exitcond_i_fu_267_p2, ap_sig_bdd_95, exitcond1_fu_341_p2, ap_sig_bdd_107)
    begin
        if ((((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((exitcond_i_fu_267_p2 = ap_const_lv1_0)) and not(ap_sig_bdd_95)) or ((ap_ST_st4_fsm_3 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond1_fu_341_p2) and not(ap_sig_bdd_107)))) then 
            input_V_V_read <= ap_const_logic_1;
        else 
            input_V_V_read <= ap_const_logic_0;
        end if; 
    end process;

    lhs_V_1_fu_385_p1 <= std_logic_vector(resize(unsigned(side_V),16));
    lhs_V_2_fu_497_p1 <= std_logic_vector(resize(unsigned(side_V),16));
    lhs_V_fu_315_p1 <= std_logic_vector(resize(unsigned(side_V),16));
    output_V_V_din <= std_logic_vector(resize(unsigned(tiles_V_q0),32));

    -- output_V_V_write assign process. --
    output_V_V_write_assign_proc : process(output_V_V_full_n, ap_CS_fsm)
    begin
        if (((ap_ST_st13_fsm_12 = ap_CS_fsm) and not((output_V_V_full_n = ap_const_logic_0)))) then 
            output_V_V_write <= ap_const_logic_1;
        else 
            output_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

    p_V_fu_517_p2 <= std_logic_vector(unsigned(t_V_3_reg_216) + unsigned(ap_const_lv8_1));

    -- pp_rot_V_address0 assign process. --
    pp_rot_V_address0_assign_proc : process(ap_CS_fsm, pp_rot_V_addr_reg_636, grp_solve_fu_239_pp_rot_V_address0)
    begin
        if ((ap_ST_st11_fsm_10 = ap_CS_fsm)) then 
            pp_rot_V_address0 <= pp_rot_V_addr_reg_636;
        elsif ((ap_ST_st9_fsm_8 = ap_CS_fsm)) then 
            pp_rot_V_address0 <= grp_solve_fu_239_pp_rot_V_address0;
        else 
            pp_rot_V_address0 <= "XXXXXX";
        end if; 
    end process;

    pp_rot_V_address1 <= grp_solve_fu_239_pp_rot_V_address1;

    -- pp_rot_V_ce0 assign process. --
    pp_rot_V_ce0_assign_proc : process(ap_CS_fsm, grp_solve_fu_239_pp_rot_V_ce0)
    begin
        if ((ap_ST_st11_fsm_10 = ap_CS_fsm)) then 
            pp_rot_V_ce0 <= ap_const_logic_1;
        elsif ((ap_ST_st9_fsm_8 = ap_CS_fsm)) then 
            pp_rot_V_ce0 <= grp_solve_fu_239_pp_rot_V_ce0;
        else 
            pp_rot_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- pp_rot_V_ce1 assign process. --
    pp_rot_V_ce1_assign_proc : process(ap_CS_fsm, grp_solve_fu_239_pp_rot_V_ce1)
    begin
        if ((ap_ST_st9_fsm_8 = ap_CS_fsm)) then 
            pp_rot_V_ce1 <= grp_solve_fu_239_pp_rot_V_ce1;
        else 
            pp_rot_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    pp_rot_V_d0 <= grp_solve_fu_239_pp_rot_V_d0;

    -- pp_rot_V_we0 assign process. --
    pp_rot_V_we0_assign_proc : process(ap_CS_fsm, grp_solve_fu_239_pp_rot_V_we0)
    begin
        if ((ap_ST_st9_fsm_8 = ap_CS_fsm)) then 
            pp_rot_V_we0 <= grp_solve_fu_239_pp_rot_V_we0;
        else 
            pp_rot_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- pp_tile_V_address0 assign process. --
    pp_tile_V_address0_assign_proc : process(ap_CS_fsm, pp_tile_V_addr_reg_631, grp_solve_fu_239_pp_tile_V_address0)
    begin
        if ((ap_ST_st11_fsm_10 = ap_CS_fsm)) then 
            pp_tile_V_address0 <= pp_tile_V_addr_reg_631;
        elsif ((ap_ST_st9_fsm_8 = ap_CS_fsm)) then 
            pp_tile_V_address0 <= grp_solve_fu_239_pp_tile_V_address0;
        else 
            pp_tile_V_address0 <= "XXXXXX";
        end if; 
    end process;

    pp_tile_V_address1 <= grp_solve_fu_239_pp_tile_V_address1;

    -- pp_tile_V_ce0 assign process. --
    pp_tile_V_ce0_assign_proc : process(ap_CS_fsm, grp_solve_fu_239_pp_tile_V_ce0)
    begin
        if ((ap_ST_st11_fsm_10 = ap_CS_fsm)) then 
            pp_tile_V_ce0 <= ap_const_logic_1;
        elsif ((ap_ST_st9_fsm_8 = ap_CS_fsm)) then 
            pp_tile_V_ce0 <= grp_solve_fu_239_pp_tile_V_ce0;
        else 
            pp_tile_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- pp_tile_V_ce1 assign process. --
    pp_tile_V_ce1_assign_proc : process(ap_CS_fsm, grp_solve_fu_239_pp_tile_V_ce1)
    begin
        if ((ap_ST_st9_fsm_8 = ap_CS_fsm)) then 
            pp_tile_V_ce1 <= grp_solve_fu_239_pp_tile_V_ce1;
        else 
            pp_tile_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    pp_tile_V_d0 <= grp_solve_fu_239_pp_tile_V_d0;

    -- pp_tile_V_we0 assign process. --
    pp_tile_V_we0_assign_proc : process(ap_CS_fsm, grp_solve_fu_239_pp_tile_V_we0)
    begin
        if ((ap_ST_st9_fsm_8 = ap_CS_fsm)) then 
            pp_tile_V_we0 <= grp_solve_fu_239_pp_tile_V_we0;
        else 
            pp_tile_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    r_V_1_fu_501_p0 <= lhs_V_2_fu_497_p1(8 - 1 downto 0);
    r_V_1_fu_501_p1 <= lhs_V_2_fu_497_p1(8 - 1 downto 0);
    r_V_1_fu_501_p2 <= std_logic_vector(resize(unsigned(r_V_1_fu_501_p0) * unsigned(r_V_1_fu_501_p1), 16));
    r_V_2_fu_283_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv36_1),to_integer(unsigned('0' & tmp_i_fu_279_p1(31-1 downto 0)))));
    r_V_3_fu_389_p0 <= lhs_V_1_fu_385_p1(8 - 1 downto 0);
    r_V_3_fu_389_p1 <= lhs_V_1_fu_385_p1(8 - 1 downto 0);
    r_V_3_fu_389_p2 <= std_logic_vector(resize(unsigned(r_V_3_fu_389_p0) * unsigned(r_V_3_fu_389_p1), 16));
    r_V_4_fu_445_p3 <= 
        tmp_7_i8_cast_fu_441_p1 when (tmp_9_fu_411_p3(0) = '1') else 
        tmp_4_i_fu_423_p2;
    r_V_5_fu_545_p2 <= std_logic_vector(unsigned(tmp_11_reg_649) + unsigned(pp_rot_V_q0));
    r_V_fu_319_p0 <= lhs_V_fu_315_p1(8 - 1 downto 0);
    r_V_fu_319_p1 <= lhs_V_fu_315_p1(8 - 1 downto 0);
    r_V_fu_319_p2 <= std_logic_vector(resize(unsigned(r_V_fu_319_p0) * unsigned(r_V_fu_319_p1), 16));
    t_1_fu_405_p2 <= std_logic_vector(unsigned(op2_assign_1_reg_193) + unsigned(ap_const_lv32_1));
    t_V_1_fu_335_p2 <= std_logic_vector(unsigned(t_V_reg_170) + unsigned(ap_const_lv8_1));
    t_fu_273_p2 <= std_logic_vector(unsigned(op2_assign_reg_159) + unsigned(ap_const_lv6_1));
    tiles_V_addr4_fu_475_p2 <= std_logic_vector(unsigned(tmp_10_fu_469_p2) + unsigned(tmp_8_i1_trn_fu_465_p1));
    tiles_V_addr5_cast_fu_370_p1 <= std_logic_vector(resize(unsigned(tmp_fu_362_p3),11));
    tiles_V_addr6_fu_374_p2 <= std_logic_vector(unsigned(tiles_V_addr5_cast_fu_370_p1) + unsigned(tmp_9_trn_cast_fu_358_p1));

    -- tiles_V_address0 assign process. --
    tiles_V_address0_assign_proc : process(ap_CS_fsm, grp_solve_fu_239_tiles_V_address0, tmp_1_fu_380_p1, tmp_4_fu_481_p1, tmp_6_fu_558_p1)
    begin
        if ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
            tiles_V_address0 <= tmp_1_fu_380_p1(8 - 1 downto 0);
        elsif ((ap_ST_st12_fsm_11 = ap_CS_fsm)) then 
            tiles_V_address0 <= tmp_6_fu_558_p1(8 - 1 downto 0);
        elsif ((ap_ST_st6_fsm_5 = ap_CS_fsm)) then 
            tiles_V_address0 <= tmp_4_fu_481_p1(8 - 1 downto 0);
        elsif ((ap_ST_st9_fsm_8 = ap_CS_fsm)) then 
            tiles_V_address0 <= grp_solve_fu_239_tiles_V_address0;
        else 
            tiles_V_address0 <= "XXXXXXXX";
        end if; 
    end process;

    tiles_V_address1 <= grp_solve_fu_239_tiles_V_address1;

    -- tiles_V_ce0 assign process. --
    tiles_V_ce0_assign_proc : process(ap_CS_fsm, ap_sig_bdd_107, grp_solve_fu_239_tiles_V_ce0)
    begin
        if ((((ap_ST_st4_fsm_3 = ap_CS_fsm) and not(ap_sig_bdd_107)) or (ap_ST_st6_fsm_5 = ap_CS_fsm) or (ap_ST_st12_fsm_11 = ap_CS_fsm))) then 
            tiles_V_ce0 <= ap_const_logic_1;
        elsif ((ap_ST_st9_fsm_8 = ap_CS_fsm)) then 
            tiles_V_ce0 <= grp_solve_fu_239_tiles_V_ce0;
        else 
            tiles_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- tiles_V_ce1 assign process. --
    tiles_V_ce1_assign_proc : process(ap_CS_fsm, grp_solve_fu_239_tiles_V_ce1)
    begin
        if ((ap_ST_st9_fsm_8 = ap_CS_fsm)) then 
            tiles_V_ce1 <= grp_solve_fu_239_tiles_V_ce1;
        else 
            tiles_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    tiles_V_d0 <= input_V_V_dout(4 - 1 downto 0);

    -- tiles_V_we0 assign process. --
    tiles_V_we0_assign_proc : process(ap_CS_fsm, exitcond1_fu_341_p2, ap_sig_bdd_107)
    begin
        if ((((ap_ST_st4_fsm_3 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond1_fu_341_p2) and not(ap_sig_bdd_107)))) then 
            tiles_V_we0 <= ap_const_logic_1;
        else 
            tiles_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_469_p2 <= std_logic_vector(shift_left(unsigned(op2_assign_1_reg_193),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    tmp_11_fu_541_p1 <= t_V_4_reg_227(2 - 1 downto 0);
    tmp_1_fu_380_p1 <= std_logic_vector(resize(unsigned(tiles_V_addr6_fu_374_p2),64));
    tmp_1_i_fu_399_p2 <= "1" when (unsigned(op2_assign_1_reg_193) < unsigned(tmp_i5_cast_fu_395_p1)) else "0";
    tmp_2_fu_329_p2 <= "1" when (unsigned(tmp_cast_fu_325_p1) < unsigned(r_V_fu_319_p2)) else "0";
    tmp_3_fu_305_p1 <= input_V_V_dout(8 - 1 downto 0);
    tmp_3_i_fu_419_p1 <= std_logic_vector(resize(unsigned(op2_assign_1_reg_193),36));
    
    tiles_V_addr4_fu_475_p2_temp <= signed(tiles_V_addr4_fu_475_p2);
    tmp_4_fu_481_p1 <= std_logic_vector(resize(tiles_V_addr4_fu_475_p2_temp,64));

    tmp_4_i_fu_423_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv36_1),to_integer(unsigned('0' & tmp_3_i_fu_419_p1(31-1 downto 0)))));
    tmp_5_cast_fu_507_p1 <= std_logic_vector(resize(unsigned(t_V_3_reg_216),16));
    tmp_5_fu_550_p3 <= (pp_tile_V_q0 & r_V_5_fu_545_p2);
    tmp_5_i6_fu_429_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(op2_assign_1_reg_193));
    tmp_6_fu_558_p1 <= std_logic_vector(resize(unsigned(tmp_5_fu_550_p3),64));
    tmp_7_fu_511_p2 <= "1" when (unsigned(tmp_5_cast_fu_507_p1) < unsigned(r_V_1_fu_501_p2)) else "0";
    tmp_7_i8_cast_fu_441_p1 <= std_logic_vector(resize(unsigned(tmp_7_i8_fu_435_p2),36));
    tmp_7_i8_fu_435_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_1),to_integer(unsigned('0' & tmp_5_i6_fu_429_p2(31-1 downto 0)))));
    tmp_8_i1_trn_fu_465_p1 <= std_logic_vector(resize(unsigned(e_i_reg_205),32));
    tmp_9_fu_411_p3 <= op2_assign_1_reg_193(31 downto 31);
    tmp_9_i1_fu_486_p1 <= std_logic_vector(resize(unsigned(tiles_V_q0),64));
    tmp_9_i_fu_293_p2 <= (avail_V or r_V_2_fu_283_p2);
    tmp_9_trn_cast_fu_358_p1 <= std_logic_vector(resize(unsigned(t_V_2_reg_182),11));
    tmp_cast_fu_325_p1 <= std_logic_vector(resize(unsigned(t_V_reg_170),16));
    tmp_fu_362_p3 <= (t_V_reg_170 & ap_const_lv2_0);
    tmp_i1_fu_523_p1 <= std_logic_vector(resize(unsigned(t_V_3_reg_216),64));
    tmp_i5_cast_fu_395_p1 <= std_logic_vector(resize(unsigned(r_V_3_fu_389_p2),32));
    tmp_i_fu_279_p1 <= std_logic_vector(resize(unsigned(op2_assign_reg_159),36));
end behav;
