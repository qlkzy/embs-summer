## ==============================================================
## File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
## Version: 2013.4
## Copyright (C) 2013 Xilinx Inc. All rights reserved.
## 
## ==============================================================


switch -- [lindex $argv 0] {
    "ip"    { set NETLIST "IP"   }
    "top"   { set NETLIST "TOP"  }
    default { set NETLIST "NONE" }
}

if { [catch {
    source ./settings.tcl
    source ./extraction.tcl

    set cur_dir [file normalize "."]

    #open a project "project" 
    set project_file project.xise
    if { [file exists $project_file] } {
        project open $project_file
    } else {
        project new $project_file
    }

    project set "Preferred Language" $language

    #config device
    if { [string equal -nocase $family "spartan3adsp"]} {
        set family "spartan-3a dsp"
    }

    project set family $family
    project set device $device
    project set package $package
    project set speed $speed

    #add files into project
    # collect the local .vhd, .v, .ucf and .xco files.
    set design_files [glob -nocomplain *.v *.vhd *.vhdl *.ucf *.xco]

    foreach file $design_files {
        if { [catch { xfile add $file } err] } {
            puts "$err"
        } else {
            puts "$file added to the project."
        }
    }

    #set top module
    set arch ""
    if { [string equal -nocase $language "vhdl"] } {
        set arch "behav"
        puts "Set top module: $top_module|$arch"
        project set top $arch $top_module
    } else {
        puts "Set top module: $top_module|$arch"
        project set top $top_module
    }

    #options 
    project set "Optimization Goal" $optimization_goal
    project set "FSM Encoding Algorithm" $fsm_ext
    project set "Optimization Effort" $optimization_effort
    project set "Register Duplication" $register_duplication -process "Synthesize - XST"
    if {[string equal -nocase $register_duplication "true"]} {
        project set "Register Duplication" On -process "Map"
    }
    project set "Register Balancing" $register_balancing
    if {[info exists use_new_parser]} {
        project set "Other XST Command Line Options" "-use_new_parser $use_new_parser"
    }
     
    if {[string equal -nocase $par_effort "extra"]} {
        project set "Place & Route Effort Level" high
        project set "Extra Effort (Highest PAR level only)" normal
    } elseif {[string equal -nocase $par_effort "high"]} {
        project set "Place & Route Effort Level" high
    }

    if {[string equal -nocase $add_io_buffers "false"] || $NETLIST == "TOP" } {
        project set "Add I/O Buffers" False
        project set "Trim Unconnected Signals" False
    }

    # run implementation from synthesis through timing analysis
    puts "Running implementation from synthesis through timing analysis ..."

    set xco_files ""
    set xco_synth_files ""
    foreach f $design_files {
        if {[file ext $f] == ".xco"} {
            lappend xco_files $f
            # for each xco file, say A.xco, check if there is a verilog file A_synth.v
            set synth_file [file root $f]_synth.v
            if {[file isfile $synth_file]} {
                lappend xco_synth_files $synth_file
            }
        }
    }

    # regenerate all cores
    if {$xco_files != ""} {
        process run "Regenerate All Cores"
    }

    # delete _synth.v generated by coregen
    foreach f $xco_files {
        set synth_file [file root $f]_synth.v
        if {[lsearch $xco_synth_files $synth_file] < 0} {
            file delete -force $synth_file
        }
    }

    if {$NETLIST == "IP"} {
        # don't run XST or PAR
    } elseif {$NETLIST == "TOP"} {
        # run XST only
        process run "Synthesize - XST"
    } else {
        process run "Implement Design"
    }

    #close project
    puts "close project ..."
    project close
} result] } {
    puts "@E \[IMPL-249\] Errors occured while synthesizing the design: $result"
    cd $cur_dir
    exit 1
} else {
    if {$NETLIST == "IP"} {
        exit 0
    }

    if { [file isfile ${top_module}.syr] } {
        set fl [open ${top_module}.syr r]
        set report_buf [read -nonewline $fl]
        close $fl
        set pattern {Number of errors.*?(\d+).*}
        if {[regexp $pattern $report_buf match error_num]} {
            if { $error_num >0 } {
                puts "@E \[IMPL-249\] Errors occured while synthesizing the design."
                cd $cur_dir
                exit 1
            }
        }
    } else {
        puts "@E \[IMPL-249\] Errors occured while synthesizing the design."
        cd $cur_dir
        exit 1
    }

    if {$NETLIST == "TOP"} {
        exit 0
    }

    if { [catch { compile_reports_ise $top_module $language } err] } {
        puts "@E \[IMPL-251\] Errors occured while compiling report: $err"
        cd $cur_dir
        exit 1
    }

    exit 0
}

# vim:set ts=4 sw=4 et:
