-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2013.4
-- Copyright (C) 2013 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity check is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_V : IN STD_LOGIC_VECTOR (7 downto 0);
    side_V : IN STD_LOGIC_VECTOR (7 downto 0);
    pp_tile_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    pp_tile_V_ce0 : OUT STD_LOGIC;
    pp_tile_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    pp_tile_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    pp_tile_V_ce1 : OUT STD_LOGIC;
    pp_tile_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    pp_rot_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    pp_rot_V_ce0 : OUT STD_LOGIC;
    pp_rot_V_q0 : IN STD_LOGIC_VECTOR (1 downto 0);
    pp_rot_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    pp_rot_V_ce1 : OUT STD_LOGIC;
    pp_rot_V_q1 : IN STD_LOGIC_VECTOR (1 downto 0);
    tiles_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    tiles_V_ce0 : OUT STD_LOGIC;
    tiles_V_q0 : IN STD_LOGIC_VECTOR (3 downto 0);
    tiles_V_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    tiles_V_ce1 : OUT STD_LOGIC;
    tiles_V_q1 : IN STD_LOGIC_VECTOR (3 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of check is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (4 downto 0) := "01011";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (4 downto 0) := "01100";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (4 downto 0) := "01101";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (4 downto 0) := "01110";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal tmp_i_fu_184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_reg_332 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_i_fu_208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_i_reg_346 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_177_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_29_i_reg_380 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_fu_273_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_reg_384 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_phi_fu_162_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_157 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i_fu_219_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i2_i_fu_225_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_23_fu_244_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_25_fu_263_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_i3_fu_281_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i3_i_fu_287_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_27_fu_306_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_29_fu_319_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_198_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_V_temp: signed (8-1 downto 0);
    signal grp_fu_198_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_198_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_fu_204_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal this_assign_i_fu_214_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_9_fu_230_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_236_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_s_fu_249_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_24_fu_255_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal up_V_fu_268_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_1_fu_292_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_26_fu_298_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_28_fu_311_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal toplevel_srem_10s_10ns_10_13_U31_ap_start : STD_LOGIC;
    signal grp_fu_198_ce : STD_LOGIC;
    signal ap_return_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);

    component toplevel_srem_10s_10ns_10_13 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;



begin
    toplevel_srem_10s_10ns_10_13_U31 : component toplevel_srem_10s_10ns_10_13
    generic map (
        ID => 31,
        NUM_STAGE => 13,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => toplevel_srem_10s_10ns_10_13_U31_ap_start,
        din0 => grp_fu_198_p0,
        din1 => grp_fu_198_p1,
        ce => grp_fu_198_ce,
        dout => grp_fu_198_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_return_preg assign process. --
    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv1_0;
            else
                if ((ap_ST_st17_fsm_16 = ap_CS_fsm)) then 
                    ap_return_preg <= tmp_s_phi_fu_162_p6;
                end if; 
            end if;
        end if;
    end process;


    -- tmp_s_reg_157 assign process. --
    tmp_s_reg_157_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st15_fsm_14 = ap_CS_fsm) and ((not((tmp_i_reg_332 = ap_const_lv1_0)) and not((ap_const_lv1_0 = tmp_32_fu_273_p3))) or (not((ap_const_lv1_0 = tmp_28_i_reg_346)) and not((ap_const_lv1_0 = tmp_32_fu_273_p3))) or (not((ap_const_lv1_0 = grp_fu_177_p2)) and not((ap_const_lv1_0 = tmp_32_fu_273_p3)))))) then 
                tmp_s_reg_157 <= ap_const_lv1_1;
            elsif (((ap_ST_st17_fsm_16 = ap_CS_fsm) and ((not((tmp_i_reg_332 = ap_const_lv1_0)) and (ap_const_lv1_0 = tmp_32_reg_384)) or (not((ap_const_lv1_0 = tmp_28_i_reg_346)) and (ap_const_lv1_0 = tmp_32_reg_384)) or ((ap_const_lv1_0 = tmp_32_reg_384) and not((ap_const_lv1_0 = tmp_29_i_reg_380)))))) then 
                tmp_s_reg_157 <= grp_fu_177_p2;
            elsif (((ap_ST_st15_fsm_14 = ap_CS_fsm) and (tmp_i_reg_332 = ap_const_lv1_0) and (ap_const_lv1_0 = tmp_28_i_reg_346) and (ap_const_lv1_0 = grp_fu_177_p2))) then 
                tmp_s_reg_157 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st13_fsm_12 = ap_CS_fsm)) then
                tmp_28_i_reg_346 <= tmp_28_i_fu_208_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st15_fsm_14 = ap_CS_fsm) and (tmp_i_reg_332 = ap_const_lv1_0) and (ap_const_lv1_0 = tmp_28_i_reg_346))) then
                tmp_29_i_reg_380 <= grp_fu_177_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st15_fsm_14 = ap_CS_fsm) and (not((tmp_i_reg_332 = ap_const_lv1_0)) or not((ap_const_lv1_0 = tmp_28_i_reg_346)) or not((ap_const_lv1_0 = grp_fu_177_p2))))) then
                tmp_32_reg_384 <= up_V_fu_268_p2(7 downto 7);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)))) then
                tmp_i_reg_332 <= tmp_i_fu_184_p2;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start , ap_CS_fsm , tmp_i_fu_184_p2 , tmp_i_reg_332 , tmp_28_i_fu_208_p2 , tmp_28_i_reg_346 , grp_fu_177_p2 , tmp_32_fu_273_p3)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if ((not((ap_start = ap_const_logic_0)) and not((tmp_i_fu_184_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_st15_fsm_14;
                elsif ((not((ap_start = ap_const_logic_0)) and (tmp_i_fu_184_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                if (not((ap_const_lv1_0 = tmp_28_i_fu_208_p2))) then
                    ap_NS_fsm <= ap_ST_st15_fsm_14;
                else
                    ap_NS_fsm <= ap_ST_st14_fsm_13;
                end if;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                if (((not((tmp_i_reg_332 = ap_const_lv1_0)) and (ap_const_lv1_0 = tmp_32_fu_273_p3)) or (not((ap_const_lv1_0 = tmp_28_i_reg_346)) and (ap_const_lv1_0 = tmp_32_fu_273_p3)) or (not((ap_const_lv1_0 = grp_fu_177_p2)) and (ap_const_lv1_0 = tmp_32_fu_273_p3)))) then
                    ap_NS_fsm <= ap_ST_st16_fsm_15;
                else
                    ap_NS_fsm <= ap_ST_st17_fsm_16;
                end if;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm)) or (ap_ST_st17_fsm_16 = ap_CS_fsm))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st17_fsm_16 = ap_CS_fsm)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_return assign process. --
    ap_return_assign_proc : process(ap_CS_fsm, tmp_s_phi_fu_162_p6, ap_return_preg)
    begin
        if ((ap_ST_st17_fsm_16 = ap_CS_fsm)) then 
            ap_return <= tmp_s_phi_fu_162_p6;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    grp_fu_177_p2 <= "1" when (tiles_V_q0 = tiles_V_q1) else "0";
    grp_fu_198_ce <= ap_const_logic_1;
    
    p_V_temp <= signed(p_V);
    grp_fu_198_p0 <= std_logic_vector(resize(p_V_temp,10));

    grp_fu_198_p1 <= std_logic_vector(resize(unsigned(side_V),10));

    -- pp_rot_V_address0 assign process. --
    pp_rot_V_address0_assign_proc : process(ap_CS_fsm, tmp_i_i_fu_219_p1, tmp_i_i3_fu_281_p1)
    begin
        if ((ap_ST_st15_fsm_14 = ap_CS_fsm)) then 
            pp_rot_V_address0 <= tmp_i_i3_fu_281_p1(6 - 1 downto 0);
        elsif ((ap_ST_st13_fsm_12 = ap_CS_fsm)) then 
            pp_rot_V_address0 <= tmp_i_i_fu_219_p1(6 - 1 downto 0);
        else 
            pp_rot_V_address0 <= "XXXXXX";
        end if; 
    end process;


    -- pp_rot_V_address1 assign process. --
    pp_rot_V_address1_assign_proc : process(ap_CS_fsm, tmp_i2_i_fu_225_p1, tmp_i3_i_fu_287_p1)
    begin
        if ((ap_ST_st15_fsm_14 = ap_CS_fsm)) then 
            pp_rot_V_address1 <= tmp_i3_i_fu_287_p1(6 - 1 downto 0);
        elsif ((ap_ST_st13_fsm_12 = ap_CS_fsm)) then 
            pp_rot_V_address1 <= tmp_i2_i_fu_225_p1(6 - 1 downto 0);
        else 
            pp_rot_V_address1 <= "XXXXXX";
        end if; 
    end process;


    -- pp_rot_V_ce0 assign process. --
    pp_rot_V_ce0_assign_proc : process(ap_CS_fsm)
    begin
        if (((ap_ST_st13_fsm_12 = ap_CS_fsm) or (ap_ST_st15_fsm_14 = ap_CS_fsm))) then 
            pp_rot_V_ce0 <= ap_const_logic_1;
        else 
            pp_rot_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- pp_rot_V_ce1 assign process. --
    pp_rot_V_ce1_assign_proc : process(ap_CS_fsm)
    begin
        if (((ap_ST_st13_fsm_12 = ap_CS_fsm) or (ap_ST_st15_fsm_14 = ap_CS_fsm))) then 
            pp_rot_V_ce1 <= ap_const_logic_1;
        else 
            pp_rot_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- pp_tile_V_address0 assign process. --
    pp_tile_V_address0_assign_proc : process(ap_CS_fsm, tmp_i_i_fu_219_p1, tmp_i_i3_fu_281_p1)
    begin
        if ((ap_ST_st15_fsm_14 = ap_CS_fsm)) then 
            pp_tile_V_address0 <= tmp_i_i3_fu_281_p1(6 - 1 downto 0);
        elsif ((ap_ST_st13_fsm_12 = ap_CS_fsm)) then 
            pp_tile_V_address0 <= tmp_i_i_fu_219_p1(6 - 1 downto 0);
        else 
            pp_tile_V_address0 <= "XXXXXX";
        end if; 
    end process;


    -- pp_tile_V_address1 assign process. --
    pp_tile_V_address1_assign_proc : process(ap_CS_fsm, tmp_i2_i_fu_225_p1, tmp_i3_i_fu_287_p1)
    begin
        if ((ap_ST_st15_fsm_14 = ap_CS_fsm)) then 
            pp_tile_V_address1 <= tmp_i3_i_fu_287_p1(6 - 1 downto 0);
        elsif ((ap_ST_st13_fsm_12 = ap_CS_fsm)) then 
            pp_tile_V_address1 <= tmp_i2_i_fu_225_p1(6 - 1 downto 0);
        else 
            pp_tile_V_address1 <= "XXXXXX";
        end if; 
    end process;


    -- pp_tile_V_ce0 assign process. --
    pp_tile_V_ce0_assign_proc : process(ap_CS_fsm)
    begin
        if (((ap_ST_st13_fsm_12 = ap_CS_fsm) or (ap_ST_st15_fsm_14 = ap_CS_fsm))) then 
            pp_tile_V_ce0 <= ap_const_logic_1;
        else 
            pp_tile_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- pp_tile_V_ce1 assign process. --
    pp_tile_V_ce1_assign_proc : process(ap_CS_fsm)
    begin
        if (((ap_ST_st13_fsm_12 = ap_CS_fsm) or (ap_ST_st15_fsm_14 = ap_CS_fsm))) then 
            pp_tile_V_ce1 <= ap_const_logic_1;
        else 
            pp_tile_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    r_V_1_fu_292_p2 <= (pp_rot_V_q0 xor ap_const_lv2_2);
    r_V_9_fu_230_p2 <= std_logic_vector(unsigned(pp_rot_V_q0) + unsigned(ap_const_lv2_1));
    r_V_fu_204_p1 <= grp_fu_198_p2(8 - 1 downto 0);
    r_V_s_fu_249_p2 <= std_logic_vector(unsigned(pp_rot_V_q1) + unsigned(ap_const_lv2_3));
    this_assign_i_fu_214_p2 <= std_logic_vector(unsigned(p_V) + unsigned(ap_const_lv8_FF));

    -- tiles_V_address0 assign process. --
    tiles_V_address0_assign_proc : process(ap_CS_fsm, tmp_23_fu_244_p1, tmp_27_fu_306_p1)
    begin
        if ((ap_ST_st16_fsm_15 = ap_CS_fsm)) then 
            tiles_V_address0 <= tmp_27_fu_306_p1(8 - 1 downto 0);
        elsif ((ap_ST_st14_fsm_13 = ap_CS_fsm)) then 
            tiles_V_address0 <= tmp_23_fu_244_p1(8 - 1 downto 0);
        else 
            tiles_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    -- tiles_V_address1 assign process. --
    tiles_V_address1_assign_proc : process(ap_CS_fsm, tmp_25_fu_263_p1, tmp_29_fu_319_p1)
    begin
        if ((ap_ST_st16_fsm_15 = ap_CS_fsm)) then 
            tiles_V_address1 <= tmp_29_fu_319_p1(8 - 1 downto 0);
        elsif ((ap_ST_st14_fsm_13 = ap_CS_fsm)) then 
            tiles_V_address1 <= tmp_25_fu_263_p1(8 - 1 downto 0);
        else 
            tiles_V_address1 <= "XXXXXXXX";
        end if; 
    end process;


    -- tiles_V_ce0 assign process. --
    tiles_V_ce0_assign_proc : process(ap_CS_fsm)
    begin
        if (((ap_ST_st14_fsm_13 = ap_CS_fsm) or (ap_ST_st16_fsm_15 = ap_CS_fsm))) then 
            tiles_V_ce0 <= ap_const_logic_1;
        else 
            tiles_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- tiles_V_ce1 assign process. --
    tiles_V_ce1_assign_proc : process(ap_CS_fsm)
    begin
        if (((ap_ST_st14_fsm_13 = ap_CS_fsm) or (ap_ST_st16_fsm_15 = ap_CS_fsm))) then 
            tiles_V_ce1 <= ap_const_logic_1;
        else 
            tiles_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_23_fu_244_p1 <= std_logic_vector(resize(unsigned(tmp_fu_236_p3),64));
    tmp_24_fu_255_p3 <= (pp_tile_V_q1 & r_V_s_fu_249_p2);
    tmp_25_fu_263_p1 <= std_logic_vector(resize(unsigned(tmp_24_fu_255_p3),64));
    tmp_26_fu_298_p3 <= (pp_tile_V_q0 & r_V_1_fu_292_p2);
    tmp_27_fu_306_p1 <= std_logic_vector(resize(unsigned(tmp_26_fu_298_p3),64));
    tmp_28_fu_311_p3 <= (pp_tile_V_q1 & pp_rot_V_q1);
    tmp_28_i_fu_208_p2 <= "1" when (r_V_fu_204_p1 = ap_const_lv8_0) else "0";
    tmp_29_fu_319_p1 <= std_logic_vector(resize(unsigned(tmp_28_fu_311_p3),64));
    tmp_32_fu_273_p3 <= up_V_fu_268_p2(7 downto 7);
    tmp_fu_236_p3 <= (pp_tile_V_q0 & r_V_9_fu_230_p2);
    tmp_i2_i_fu_225_p1 <= std_logic_vector(resize(unsigned(p_V),64));
    tmp_i3_i_fu_287_p1 <= std_logic_vector(resize(unsigned(p_V),64));
    tmp_i_fu_184_p2 <= "1" when (p_V = ap_const_lv8_0) else "0";
    tmp_i_i3_fu_281_p1 <= std_logic_vector(resize(unsigned(up_V_fu_268_p2),64));
    tmp_i_i_fu_219_p1 <= std_logic_vector(resize(unsigned(this_assign_i_fu_214_p2),64));

    -- tmp_s_phi_fu_162_p6 assign process. --
    tmp_s_phi_fu_162_p6_assign_proc : process(ap_CS_fsm, tmp_i_reg_332, tmp_28_i_reg_346, grp_fu_177_p2, tmp_29_i_reg_380, tmp_32_reg_384, tmp_s_reg_157)
    begin
        if (((ap_ST_st17_fsm_16 = ap_CS_fsm) and ((not((tmp_i_reg_332 = ap_const_lv1_0)) and (ap_const_lv1_0 = tmp_32_reg_384)) or (not((ap_const_lv1_0 = tmp_28_i_reg_346)) and (ap_const_lv1_0 = tmp_32_reg_384)) or ((ap_const_lv1_0 = tmp_32_reg_384) and not((ap_const_lv1_0 = tmp_29_i_reg_380)))))) then 
            tmp_s_phi_fu_162_p6 <= grp_fu_177_p2;
        else 
            tmp_s_phi_fu_162_p6 <= tmp_s_reg_157;
        end if; 
    end process;


    -- toplevel_srem_10s_10ns_10_13_U31_ap_start assign process. --
    toplevel_srem_10s_10ns_10_13_U31_ap_start_assign_proc : process(ap_start, ap_CS_fsm, tmp_i_fu_184_p2)
    begin
        if (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)) and (tmp_i_fu_184_p2 = ap_const_lv1_0))) then 
            toplevel_srem_10s_10ns_10_13_U31_ap_start <= ap_const_logic_1;
        else 
            toplevel_srem_10s_10ns_10_13_U31_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    up_V_fu_268_p2 <= std_logic_vector(unsigned(p_V) - unsigned(side_V));
end behav;
