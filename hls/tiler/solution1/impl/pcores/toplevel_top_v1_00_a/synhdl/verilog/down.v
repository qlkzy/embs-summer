// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.4
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module down (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        avail_V_i,
        avail_V_o,
        avail_V_o_ap_vld,
        cp_V_i,
        cp_V_o,
        cp_V_o_ap_vld,
        side_V,
        pp_tile_V_address0,
        pp_tile_V_ce0,
        pp_tile_V_we0,
        pp_tile_V_d0,
        pp_tile_V_q0,
        pp_tile_V_address1,
        pp_tile_V_ce1,
        pp_tile_V_q1,
        pp_rot_V_address0,
        pp_rot_V_ce0,
        pp_rot_V_we0,
        pp_rot_V_d0,
        pp_rot_V_q0,
        pp_rot_V_address1,
        pp_rot_V_ce1,
        pp_rot_V_q1,
        tiles_V_address0,
        tiles_V_ce0,
        tiles_V_q0,
        tiles_V_address1,
        tiles_V_ce1,
        tiles_V_q1,
        colours_V_address0,
        colours_V_ce0,
        colours_V_q0,
        colours_V_address1,
        colours_V_ce1,
        colours_V_q1
);

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [35:0] avail_V_i;
output  [35:0] avail_V_o;
output   avail_V_o_ap_vld;
input  [7:0] cp_V_i;
output  [7:0] cp_V_o;
output   cp_V_o_ap_vld;
input  [7:0] side_V;
output  [5:0] pp_tile_V_address0;
output   pp_tile_V_ce0;
output   pp_tile_V_we0;
output  [7:0] pp_tile_V_d0;
input  [7:0] pp_tile_V_q0;
output  [5:0] pp_tile_V_address1;
output   pp_tile_V_ce1;
input  [7:0] pp_tile_V_q1;
output  [5:0] pp_rot_V_address0;
output   pp_rot_V_ce0;
output   pp_rot_V_we0;
output  [1:0] pp_rot_V_d0;
input  [1:0] pp_rot_V_q0;
output  [5:0] pp_rot_V_address1;
output   pp_rot_V_ce1;
input  [1:0] pp_rot_V_q1;
output  [7:0] tiles_V_address0;
output   tiles_V_ce0;
input  [3:0] tiles_V_q0;
output  [7:0] tiles_V_address1;
output   tiles_V_ce1;
input  [3:0] tiles_V_q1;
output  [3:0] colours_V_address0;
output   colours_V_ce0;
input  [35:0] colours_V_q0;
output  [3:0] colours_V_address1;
output   colours_V_ce1;
input  [35:0] colours_V_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[35:0] avail_V_o;
reg avail_V_o_ap_vld;
reg[7:0] cp_V_o;
reg cp_V_o_ap_vld;
reg[5:0] pp_tile_V_address0;
reg pp_tile_V_ce0;
reg pp_tile_V_we0;
reg pp_tile_V_ce1;
reg[5:0] pp_rot_V_address0;
reg pp_rot_V_ce0;
reg pp_rot_V_we0;
reg pp_rot_V_ce1;
reg tiles_V_ce0;
reg tiles_V_ce1;
reg colours_V_ce0;
reg colours_V_ce1;
reg   [3:0] ap_CS_fsm = 4'b0000;
reg   [7:0] t_V_reg_439;
wire   [7:0] cp_V_assign_fu_191_p2;
reg   [7:0] cp_V_assign_reg_462;
reg   [0:0] tmp_31_reg_469;
reg   [0:0] tmp_32_reg_485;
reg   [35:0] possible_V_reg_521;
wire   [35:0] possible_V_2_fu_353_p3;
reg   [35:0] possible_V_2_reg_526;
wire   [15:0] r_V_fu_363_p2;
reg   [15:0] r_V_reg_531;
wire   [35:0] tmp_fu_369_p2;
reg   [35:0] tmp_reg_536;
wire   [15:0] t_fu_380_p2;
reg   [15:0] op2_assign_reg_157;
wire   [0:0] tmp_6_fu_406_p2;
wire   [0:0] tmp_8_fu_375_p2;
wire   [63:0] tmp_i_i_fu_244_p1;
wire   [63:0] tmp_i23_i_fu_258_p1;
wire   [63:0] tmp_20_fu_278_p1;
wire   [63:0] tmp_22_fu_297_p1;
wire   [63:0] tmp_3_fu_332_p1;
wire   [63:0] tmp_5_fu_337_p1;
wire   [63:0] tmp_7_fu_412_p1;
wire   [35:0] tmp_1_fu_428_p2;
wire   [8:0] grp_fu_185_p0;
wire   [8:0] grp_fu_185_p1;
wire   [7:0] grp_fu_202_p0;
wire   [7:0] grp_fu_202_p1;
wire   [8:0] grp_fu_185_p2;
wire   [7:0] r_V_11_fu_211_p1;
wire   [7:0] grp_fu_202_p2;
wire   [8:0] tmp_61_i_fu_223_p0;
wire   [8:0] tmp_60_i_cast_fu_219_p1;
wire   [0:0] tmp_61_i_fu_223_p2;
wire   [7:0] this_assign_i_fu_229_p3;
wire   [7:0] up_V_fu_207_p2;
wire   [1:0] r_V_s_fu_264_p2;
wire   [9:0] tmp_19_fu_270_p3;
wire   [1:0] r_V_1_fu_283_p2;
wire   [9:0] tmp_21_fu_289_p3;
wire   [4:0] tmp_63_i_cast_fu_302_p1;
wire   [4:0] p_i_fu_306_p3;
wire   [4:0] tmp_65_i_cast_fu_317_p1;
wire   [4:0] p_5_i_fu_321_p3;
wire   [7:0] tmp_3_fu_332_p0;
wire   [7:0] tmp_5_fu_337_p0;
wire   [7:0] r_V_fu_363_p0;
wire   [15:0] lhs_V_fu_360_p1;
wire   [7:0] r_V_fu_363_p1;
wire   [35:0] possible_V_1_fu_346_p3;
wire   [35:0] tmp_s_fu_386_p1;
wire   [35:0] r_V_12_fu_390_p2;
wire   [35:0] tmp3_fu_396_p2;
wire   [35:0] r_V_4_fu_401_p2;
wire   [35:0] p_2_fu_422_p2;
reg    toplevel_sdiv_9s_9ns_9_12_U1_ap_start;
wire    grp_fu_185_ce;
reg    toplevel_udiv_8ns_8ns_8_11_U2_ap_start;
wire    grp_fu_202_ce;
reg   [3:0] ap_NS_fsm;
parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 4'b0000;
parameter    ap_ST_st2_fsm_1 = 4'b1;
parameter    ap_ST_st3_fsm_2 = 4'b10;
parameter    ap_ST_st4_fsm_3 = 4'b11;
parameter    ap_ST_st5_fsm_4 = 4'b100;
parameter    ap_ST_st6_fsm_5 = 4'b101;
parameter    ap_ST_st7_fsm_6 = 4'b110;
parameter    ap_ST_st8_fsm_7 = 4'b111;
parameter    ap_ST_st9_fsm_8 = 4'b1000;
parameter    ap_ST_st10_fsm_9 = 4'b1001;
parameter    ap_ST_st11_fsm_10 = 4'b1010;
parameter    ap_ST_st12_fsm_11 = 4'b1011;
parameter    ap_ST_st13_fsm_12 = 4'b1100;
parameter    ap_ST_st14_fsm_13 = 4'b1101;
parameter    ap_ST_st15_fsm_14 = 4'b1110;
parameter    ap_ST_st16_fsm_15 = 4'b1111;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv16_0 = 16'b0000000000000000;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv8_1 = 8'b1;
parameter    ap_const_lv8_FF = 8'b11111111;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv2_1 = 2'b1;
parameter    ap_const_lv2_2 = 2'b10;
parameter    ap_const_lv5_1F = 5'b11111;
parameter    ap_const_lv36_FFFFFFFFF = 36'b111111111111111111111111111111111111;
parameter    ap_const_lv16_1 = 16'b1;
parameter    ap_const_lv36_1 = 36'b1;
parameter    ap_const_lv36_0 = 36'b000000000000000000000000000000000000;
parameter    ap_true = 1'b1;


toplevel_sdiv_9s_9ns_9_12 #(
    .ID( 1 ),
    .NUM_STAGE( 12 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 9 ))
toplevel_sdiv_9s_9ns_9_12_U1(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .start( toplevel_sdiv_9s_9ns_9_12_U1_ap_start ),
    .din0( grp_fu_185_p0 ),
    .din1( grp_fu_185_p1 ),
    .ce( grp_fu_185_ce ),
    .dout( grp_fu_185_p2 )
);

toplevel_udiv_8ns_8ns_8_11 #(
    .ID( 2 ),
    .NUM_STAGE( 11 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
toplevel_udiv_8ns_8ns_8_11_U2(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .start( toplevel_udiv_8ns_8ns_8_11_U2_ap_start ),
    .din0( grp_fu_202_p0 ),
    .din1( grp_fu_202_p1 ),
    .ce( grp_fu_202_ce ),
    .dout( grp_fu_202_p2 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st16_fsm_15 == ap_CS_fsm) & ~(ap_const_lv1_0 == tmp_6_fu_406_p2) & ~(ap_const_lv1_0 == tmp_8_fu_375_p2))) begin
        op2_assign_reg_157 <= t_fu_380_p2;
    end else if ((ap_ST_st15_fsm_14 == ap_CS_fsm)) begin
        op2_assign_reg_157 <= ap_const_lv16_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st2_fsm_1 == ap_CS_fsm)) begin
        cp_V_assign_reg_462 <= cp_V_assign_fu_191_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st15_fsm_14 == ap_CS_fsm)) begin
        possible_V_2_reg_526 <= possible_V_2_fu_353_p3;
        possible_V_reg_521 <= avail_V_i;
        r_V_reg_531 <= r_V_fu_363_p2;
        tmp_reg_536 <= tmp_fu_369_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0))) begin
        t_V_reg_439 <= cp_V_i;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st12_fsm_11 == ap_CS_fsm)) begin
        tmp_31_reg_469 <= this_assign_i_fu_229_p3[ap_const_lv32_7];
        tmp_32_reg_485 <= up_V_fu_207_p2[ap_const_lv32_7];
    end
end

/// ap_done assign process. ///
always @ (ap_start or ap_CS_fsm or tmp_6_fu_406_p2 or tmp_8_fu_375_p2)
begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm)) | ((ap_ST_st16_fsm_15 == ap_CS_fsm) & ((ap_const_lv1_0 == tmp_6_fu_406_p2) | (ap_const_lv1_0 == tmp_8_fu_375_p2))))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_CS_fsm)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_CS_fsm or tmp_6_fu_406_p2 or tmp_8_fu_375_p2)
begin
    if (((ap_ST_st16_fsm_15 == ap_CS_fsm) & ((ap_const_lv1_0 == tmp_6_fu_406_p2) | (ap_const_lv1_0 == tmp_8_fu_375_p2)))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// avail_V_o assign process. ///
always @ (ap_CS_fsm or avail_V_i or tmp_6_fu_406_p2 or tmp_8_fu_375_p2 or tmp_1_fu_428_p2)
begin
    if (((ap_ST_st16_fsm_15 == ap_CS_fsm) & (ap_const_lv1_0 == tmp_6_fu_406_p2) & ~(ap_const_lv1_0 == tmp_8_fu_375_p2))) begin
        avail_V_o = tmp_1_fu_428_p2;
    end else begin
        avail_V_o = avail_V_i;
    end
end

/// avail_V_o_ap_vld assign process. ///
always @ (ap_CS_fsm or tmp_6_fu_406_p2 or tmp_8_fu_375_p2)
begin
    if (((ap_ST_st16_fsm_15 == ap_CS_fsm) & (ap_const_lv1_0 == tmp_6_fu_406_p2) & ~(ap_const_lv1_0 == tmp_8_fu_375_p2))) begin
        avail_V_o_ap_vld = ap_const_logic_1;
    end else begin
        avail_V_o_ap_vld = ap_const_logic_0;
    end
end

/// colours_V_ce0 assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st14_fsm_13 == ap_CS_fsm)) begin
        colours_V_ce0 = ap_const_logic_1;
    end else begin
        colours_V_ce0 = ap_const_logic_0;
    end
end

/// colours_V_ce1 assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st14_fsm_13 == ap_CS_fsm)) begin
        colours_V_ce1 = ap_const_logic_1;
    end else begin
        colours_V_ce1 = ap_const_logic_0;
    end
end

/// cp_V_o assign process. ///
always @ (ap_CS_fsm or cp_V_i or cp_V_assign_fu_191_p2)
begin
    if ((ap_ST_st2_fsm_1 == ap_CS_fsm)) begin
        cp_V_o = cp_V_assign_fu_191_p2;
    end else begin
        cp_V_o = cp_V_i;
    end
end

/// cp_V_o_ap_vld assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st2_fsm_1 == ap_CS_fsm)) begin
        cp_V_o_ap_vld = ap_const_logic_1;
    end else begin
        cp_V_o_ap_vld = ap_const_logic_0;
    end
end

/// pp_rot_V_address0 assign process. ///
always @ (ap_CS_fsm or tmp_i_i_fu_244_p1 or tmp_7_fu_412_p1)
begin
    if ((ap_ST_st16_fsm_15 == ap_CS_fsm)) begin
        pp_rot_V_address0 = tmp_7_fu_412_p1;
    end else if ((ap_ST_st12_fsm_11 == ap_CS_fsm)) begin
        pp_rot_V_address0 = tmp_i_i_fu_244_p1;
    end else begin
        pp_rot_V_address0 = 'bx;
    end
end

/// pp_rot_V_ce0 assign process. ///
always @ (ap_CS_fsm)
begin
    if (((ap_ST_st12_fsm_11 == ap_CS_fsm) | (ap_ST_st16_fsm_15 == ap_CS_fsm))) begin
        pp_rot_V_ce0 = ap_const_logic_1;
    end else begin
        pp_rot_V_ce0 = ap_const_logic_0;
    end
end

/// pp_rot_V_ce1 assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st12_fsm_11 == ap_CS_fsm)) begin
        pp_rot_V_ce1 = ap_const_logic_1;
    end else begin
        pp_rot_V_ce1 = ap_const_logic_0;
    end
end

/// pp_rot_V_we0 assign process. ///
always @ (ap_CS_fsm or tmp_6_fu_406_p2 or tmp_8_fu_375_p2)
begin
    if (((ap_ST_st16_fsm_15 == ap_CS_fsm) & (ap_const_lv1_0 == tmp_6_fu_406_p2) & ~(ap_const_lv1_0 == tmp_8_fu_375_p2))) begin
        pp_rot_V_we0 = ap_const_logic_1;
    end else begin
        pp_rot_V_we0 = ap_const_logic_0;
    end
end

/// pp_tile_V_address0 assign process. ///
always @ (ap_CS_fsm or tmp_i_i_fu_244_p1 or tmp_7_fu_412_p1)
begin
    if ((ap_ST_st16_fsm_15 == ap_CS_fsm)) begin
        pp_tile_V_address0 = tmp_7_fu_412_p1;
    end else if ((ap_ST_st12_fsm_11 == ap_CS_fsm)) begin
        pp_tile_V_address0 = tmp_i_i_fu_244_p1;
    end else begin
        pp_tile_V_address0 = 'bx;
    end
end

/// pp_tile_V_ce0 assign process. ///
always @ (ap_CS_fsm)
begin
    if (((ap_ST_st12_fsm_11 == ap_CS_fsm) | (ap_ST_st16_fsm_15 == ap_CS_fsm))) begin
        pp_tile_V_ce0 = ap_const_logic_1;
    end else begin
        pp_tile_V_ce0 = ap_const_logic_0;
    end
end

/// pp_tile_V_ce1 assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st12_fsm_11 == ap_CS_fsm)) begin
        pp_tile_V_ce1 = ap_const_logic_1;
    end else begin
        pp_tile_V_ce1 = ap_const_logic_0;
    end
end

/// pp_tile_V_we0 assign process. ///
always @ (ap_CS_fsm or tmp_6_fu_406_p2 or tmp_8_fu_375_p2)
begin
    if (((ap_ST_st16_fsm_15 == ap_CS_fsm) & (ap_const_lv1_0 == tmp_6_fu_406_p2) & ~(ap_const_lv1_0 == tmp_8_fu_375_p2))) begin
        pp_tile_V_we0 = ap_const_logic_1;
    end else begin
        pp_tile_V_we0 = ap_const_logic_0;
    end
end

/// tiles_V_ce0 assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st13_fsm_12 == ap_CS_fsm)) begin
        tiles_V_ce0 = ap_const_logic_1;
    end else begin
        tiles_V_ce0 = ap_const_logic_0;
    end
end

/// tiles_V_ce1 assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st13_fsm_12 == ap_CS_fsm)) begin
        tiles_V_ce1 = ap_const_logic_1;
    end else begin
        tiles_V_ce1 = ap_const_logic_0;
    end
end

/// toplevel_sdiv_9s_9ns_9_12_U1_ap_start assign process. ///
always @ (ap_start or ap_CS_fsm)
begin
    if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0))) begin
        toplevel_sdiv_9s_9ns_9_12_U1_ap_start = ap_const_logic_1;
    end else begin
        toplevel_sdiv_9s_9ns_9_12_U1_ap_start = ap_const_logic_0;
    end
end

/// toplevel_udiv_8ns_8ns_8_11_U2_ap_start assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st2_fsm_1 == ap_CS_fsm)) begin
        toplevel_udiv_8ns_8ns_8_11_U2_ap_start = ap_const_logic_1;
    end else begin
        toplevel_udiv_8ns_8ns_8_11_U2_ap_start = ap_const_logic_0;
    end
end
always @ (ap_start or ap_CS_fsm or tmp_6_fu_406_p2 or tmp_8_fu_375_p2)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        ap_ST_st2_fsm_1 : 
            ap_NS_fsm = ap_ST_st3_fsm_2;
        ap_ST_st3_fsm_2 : 
            ap_NS_fsm = ap_ST_st4_fsm_3;
        ap_ST_st4_fsm_3 : 
            ap_NS_fsm = ap_ST_st5_fsm_4;
        ap_ST_st5_fsm_4 : 
            ap_NS_fsm = ap_ST_st6_fsm_5;
        ap_ST_st6_fsm_5 : 
            ap_NS_fsm = ap_ST_st7_fsm_6;
        ap_ST_st7_fsm_6 : 
            ap_NS_fsm = ap_ST_st8_fsm_7;
        ap_ST_st8_fsm_7 : 
            ap_NS_fsm = ap_ST_st9_fsm_8;
        ap_ST_st9_fsm_8 : 
            ap_NS_fsm = ap_ST_st10_fsm_9;
        ap_ST_st10_fsm_9 : 
            ap_NS_fsm = ap_ST_st11_fsm_10;
        ap_ST_st11_fsm_10 : 
            ap_NS_fsm = ap_ST_st12_fsm_11;
        ap_ST_st12_fsm_11 : 
            ap_NS_fsm = ap_ST_st13_fsm_12;
        ap_ST_st13_fsm_12 : 
            ap_NS_fsm = ap_ST_st14_fsm_13;
        ap_ST_st14_fsm_13 : 
            ap_NS_fsm = ap_ST_st15_fsm_14;
        ap_ST_st15_fsm_14 : 
            ap_NS_fsm = ap_ST_st16_fsm_15;
        ap_ST_st16_fsm_15 : 
            if (((ap_const_lv1_0 == tmp_6_fu_406_p2) | (ap_const_lv1_0 == tmp_8_fu_375_p2))) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st16_fsm_15;
            end
        default : 
            ap_NS_fsm = 'bx;
    endcase
end
assign colours_V_address0 = tmp_3_fu_332_p1;
assign colours_V_address1 = tmp_5_fu_337_p1;
assign cp_V_assign_fu_191_p2 = (t_V_reg_439 + ap_const_lv8_1);
assign grp_fu_185_ce = ap_const_logic_1;
assign grp_fu_185_p0 = $signed(cp_V_i);
assign grp_fu_185_p1 = $unsigned(side_V);
assign grp_fu_202_ce = ap_const_logic_1;
assign grp_fu_202_p0 = (t_V_reg_439 + ap_const_lv8_1);
assign grp_fu_202_p1 = side_V;
assign lhs_V_fu_360_p1 = $unsigned(side_V);
assign p_2_fu_422_p2 = (r_V_12_fu_390_p2 ^ ap_const_lv36_FFFFFFFFF);
assign p_5_i_fu_321_p3 = ((tmp_32_reg_485)? ap_const_lv5_1F: tmp_65_i_cast_fu_317_p1);
assign p_i_fu_306_p3 = ((tmp_31_reg_469)? ap_const_lv5_1F: tmp_63_i_cast_fu_302_p1);
assign possible_V_1_fu_346_p3 = ((tmp_31_reg_469)? ap_const_lv36_FFFFFFFFF: colours_V_q0);
assign possible_V_2_fu_353_p3 = ((tmp_32_reg_485)? ap_const_lv36_FFFFFFFFF: colours_V_q1);
assign pp_rot_V_address1 = tmp_i23_i_fu_258_p1;
assign pp_rot_V_d0 = ap_const_lv2_0;
assign pp_tile_V_address1 = tmp_i23_i_fu_258_p1;
assign pp_tile_V_d0 = op2_assign_reg_157[7:0];
assign r_V_11_fu_211_p1 = grp_fu_185_p2[7:0];
assign r_V_12_fu_390_p2 = ap_const_lv36_1 << tmp_s_fu_386_p1;
assign r_V_1_fu_283_p2 = (pp_rot_V_q1 ^ ap_const_lv2_2);
assign r_V_4_fu_401_p2 = (tmp3_fu_396_p2 & tmp_reg_536);
assign r_V_fu_363_p0 = lhs_V_fu_360_p1;
assign r_V_fu_363_p1 = lhs_V_fu_360_p1;
assign r_V_fu_363_p2 = ($signed({{1'b0}, {r_V_fu_363_p0}}) * $signed({{1'b0}, {r_V_fu_363_p1}}));
assign r_V_s_fu_264_p2 = (pp_rot_V_q0 + ap_const_lv2_1);
assign t_fu_380_p2 = (op2_assign_reg_157 + ap_const_lv16_1);
assign this_assign_i_fu_229_p3 = ((tmp_61_i_fu_223_p2)? t_V_reg_439: ap_const_lv8_FF);
assign tiles_V_address0 = tmp_20_fu_278_p1;
assign tiles_V_address1 = tmp_22_fu_297_p1;
assign tmp3_fu_396_p2 = (possible_V_2_reg_526 & r_V_12_fu_390_p2);
assign tmp_19_fu_270_p3 = {{pp_tile_V_q0}, {r_V_s_fu_264_p2}};
assign tmp_1_fu_428_p2 = (possible_V_reg_521 & p_2_fu_422_p2);
assign tmp_20_fu_278_p1 = $unsigned(tmp_19_fu_270_p3);
assign tmp_21_fu_289_p3 = {{pp_tile_V_q1}, {r_V_1_fu_283_p2}};
assign tmp_22_fu_297_p1 = $unsigned(tmp_21_fu_289_p3);
assign tmp_3_fu_332_p0 = $signed(p_i_fu_306_p3);
assign tmp_3_fu_332_p1 = $unsigned(tmp_3_fu_332_p0);
assign tmp_5_fu_337_p0 = $signed(p_5_i_fu_321_p3);
assign tmp_5_fu_337_p1 = $unsigned(tmp_5_fu_337_p0);
assign tmp_60_i_cast_fu_219_p1 = $unsigned(grp_fu_202_p2);
assign tmp_61_i_fu_223_p0 = $signed(r_V_11_fu_211_p1);
assign tmp_61_i_fu_223_p2 = (tmp_61_i_fu_223_p0 == tmp_60_i_cast_fu_219_p1? 1'b1: 1'b0);
assign tmp_63_i_cast_fu_302_p1 = $unsigned(tiles_V_q0);
assign tmp_65_i_cast_fu_317_p1 = $unsigned(tiles_V_q1);
assign tmp_6_fu_406_p2 = (r_V_4_fu_401_p2 == ap_const_lv36_0? 1'b1: 1'b0);
assign tmp_7_fu_412_p1 = $unsigned(cp_V_assign_reg_462);
assign tmp_8_fu_375_p2 = (op2_assign_reg_157 < r_V_reg_531? 1'b1: 1'b0);
assign tmp_fu_369_p2 = (avail_V_i & possible_V_1_fu_346_p3);
assign tmp_i23_i_fu_258_p1 = $unsigned(up_V_fu_207_p2);
assign tmp_i_i_fu_244_p1 = $unsigned(this_assign_i_fu_229_p3);
assign tmp_s_fu_386_p1 = $unsigned(op2_assign_reg_157);
assign up_V_fu_207_p2 = (cp_V_assign_reg_462 - side_V);


endmodule //down

