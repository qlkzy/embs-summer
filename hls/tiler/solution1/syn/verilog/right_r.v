// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.4
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module right_r (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        cp_V,
        pp_rot_V_address0,
        pp_rot_V_ce0,
        pp_rot_V_we0,
        pp_rot_V_d0,
        pp_rot_V_q0,
        pp_tile_V_address0,
        pp_tile_V_ce0,
        pp_tile_V_we0,
        pp_tile_V_d0,
        pp_tile_V_q0,
        avail_V_i,
        avail_V_o,
        avail_V_o_ap_vld,
        side_V,
        tiles_V_address0,
        tiles_V_ce0,
        tiles_V_q0,
        colours_V_address0,
        colours_V_ce0,
        colours_V_q0,
        ntiles_V,
        ap_return
);

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] cp_V;
output  [5:0] pp_rot_V_address0;
output   pp_rot_V_ce0;
output   pp_rot_V_we0;
output  [1:0] pp_rot_V_d0;
input  [1:0] pp_rot_V_q0;
output  [5:0] pp_tile_V_address0;
output   pp_tile_V_ce0;
output   pp_tile_V_we0;
output  [7:0] pp_tile_V_d0;
input  [7:0] pp_tile_V_q0;
input  [35:0] avail_V_i;
output  [35:0] avail_V_o;
output   avail_V_o_ap_vld;
input  [7:0] side_V;
output  [7:0] tiles_V_address0;
output   tiles_V_ce0;
input  [3:0] tiles_V_q0;
output  [3:0] colours_V_address0;
output   colours_V_ce0;
input  [35:0] colours_V_q0;
input  [7:0] ntiles_V;
output  [0:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[5:0] pp_rot_V_address0;
reg pp_rot_V_ce0;
reg pp_rot_V_we0;
reg[1:0] pp_rot_V_d0;
reg[5:0] pp_tile_V_address0;
reg pp_tile_V_ce0;
reg pp_tile_V_we0;
reg[35:0] avail_V_o;
reg avail_V_o_ap_vld;
reg[7:0] tiles_V_address0;
reg tiles_V_ce0;
reg[3:0] colours_V_address0;
reg colours_V_ce0;
reg[0:0] ap_return;
reg   [4:0] ap_CS_fsm = 5'b00000;
wire   [63:0] tmp_fu_199_p1;
reg   [63:0] tmp_reg_428;
reg   [5:0] pp_rot_V_addr_reg_433;
wire   [0:0] tmp_s_fu_204_p2;
reg   [0:0] tmp_s_reg_438;
reg   [5:0] pp_tile_V_addr_reg_442;
reg   [7:0] pp_tile_V_load_reg_447;
wire   [35:0] possible_V_fu_224_p2;
reg   [35:0] possible_V_reg_452;
wire   [7:0] left_V_fu_236_p2;
reg   [7:0] left_V_reg_458;
wire   [0:0] tmp_i_fu_241_p2;
reg   [0:0] tmp_i_reg_463;
wire   [8:0] tmp_40_tr_i_fu_250_p1;
wire   [0:0] tmp_i_24_fu_277_p2;
reg   [0:0] tmp_i_24_reg_483;
reg   [0:0] tmp_26_reg_512;
wire   [35:0] agg_result_V_i1_fu_349_p3;
reg   [35:0] agg_result_V_i1_reg_537;
wire   [35:0] tmp1_fu_360_p2;
reg   [35:0] tmp1_reg_547;
wire   [7:0] t_V_fu_365_p2;
reg   [35:0] agg_result_V_i_reg_145;
reg   [7:0] p_058_0_in_reg_159;
wire   [0:0] tmp_5_fu_397_p2;
wire   [0:0] tmp_3_fu_372_p2;
reg   [0:0] p_0_phi_fu_172_p6;
reg   [0:0] p_0_reg_168;
wire   [63:0] tmp_i_i_fu_283_p1;
wire   [63:0] tmp_20_fu_296_p1;
wire   [63:0] tmp_30_i_fu_301_p1;
wire   [63:0] tmp_i_i2_fu_319_p1;
wire   [63:0] tmp_22_fu_339_p1;
wire   [63:0] tmp_i5_fu_344_p1;
wire   [35:0] tmp_6_fu_409_p2;
wire   [1:0] grp_fu_184_p2;
wire   [35:0] tmp_1_fu_210_p1;
wire   [35:0] r_V_fu_214_p2;
wire   [8:0] grp_fu_254_p0;
wire   [8:0] grp_fu_254_p1;
wire   [8:0] grp_fu_263_p0;
wire   [8:0] grp_fu_263_p1;
wire   [8:0] grp_fu_254_p2;
wire   [8:0] grp_fu_263_p2;
wire   [7:0] r_V_5_fu_269_p1;
wire   [7:0] r_V_8_fu_273_p1;
wire   [9:0] tmp_19_fu_288_p3;
wire   [7:0] up_V_fu_306_p2;
wire   [1:0] r_V_7_fu_325_p2;
wire   [9:0] tmp_21_fu_331_p3;
wire   [35:0] tmp_4_fu_377_p1;
wire   [35:0] r_V_10_fu_381_p2;
wire   [35:0] tmp2_fu_387_p2;
wire   [35:0] r_V_2_fu_392_p2;
wire   [35:0] p_s_fu_403_p2;
reg    toplevel_sdiv_9s_9ns_9_12_U11_ap_start;
wire    grp_fu_254_ce;
reg    toplevel_sdiv_9s_9ns_9_12_U12_ap_start;
wire    grp_fu_263_ce;
reg   [0:0] ap_return_preg = 1'b0;
reg   [4:0] ap_NS_fsm;
reg    ap_sig_bdd_390;
reg    ap_sig_bdd_157;
parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 5'b00000;
parameter    ap_ST_st2_fsm_1 = 5'b1;
parameter    ap_ST_st3_fsm_2 = 5'b10;
parameter    ap_ST_st4_fsm_3 = 5'b11;
parameter    ap_ST_st5_fsm_4 = 5'b100;
parameter    ap_ST_st6_fsm_5 = 5'b101;
parameter    ap_ST_st7_fsm_6 = 5'b110;
parameter    ap_ST_st8_fsm_7 = 5'b111;
parameter    ap_ST_st9_fsm_8 = 5'b1000;
parameter    ap_ST_st10_fsm_9 = 5'b1001;
parameter    ap_ST_st11_fsm_10 = 5'b1010;
parameter    ap_ST_st12_fsm_11 = 5'b1011;
parameter    ap_ST_st13_fsm_12 = 5'b1100;
parameter    ap_ST_st14_fsm_13 = 5'b1101;
parameter    ap_ST_st15_fsm_14 = 5'b1110;
parameter    ap_ST_st16_fsm_15 = 5'b1111;
parameter    ap_ST_st17_fsm_16 = 5'b10000;
parameter    ap_ST_st18_fsm_17 = 5'b10001;
parameter    ap_ST_st19_fsm_18 = 5'b10010;
parameter    ap_ST_st20_fsm_19 = 5'b10011;
parameter    ap_ST_st21_fsm_20 = 5'b10100;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv36_FFFFFFFFF = 36'b111111111111111111111111111111111111;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv2_1 = 2'b1;
parameter    ap_const_lv2_3 = 2'b11;
parameter    ap_const_lv36_1 = 36'b1;
parameter    ap_const_lv8_FF = 8'b11111111;
parameter    ap_const_lv8_0 = 8'b00000000;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv2_2 = 2'b10;
parameter    ap_const_lv8_1 = 8'b1;
parameter    ap_const_lv36_0 = 36'b000000000000000000000000000000000000;
parameter    ap_true = 1'b1;


toplevel_sdiv_9s_9ns_9_12 #(
    .ID( 11 ),
    .NUM_STAGE( 12 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 9 ))
toplevel_sdiv_9s_9ns_9_12_U11(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .start( toplevel_sdiv_9s_9ns_9_12_U11_ap_start ),
    .din0( grp_fu_254_p0 ),
    .din1( grp_fu_254_p1 ),
    .ce( grp_fu_254_ce ),
    .dout( grp_fu_254_p2 )
);

toplevel_sdiv_9s_9ns_9_12 #(
    .ID( 12 ),
    .NUM_STAGE( 12 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 9 ))
toplevel_sdiv_9s_9ns_9_12_U12(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .start( toplevel_sdiv_9s_9ns_9_12_U12_ap_start ),
    .din0( grp_fu_263_p0 ),
    .din1( grp_fu_263_p1 ),
    .ce( grp_fu_263_ce ),
    .dout( grp_fu_263_p2 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_return_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_return_preg
    if (ap_rst == 1'b1) begin
        ap_return_preg <= ap_const_lv1_0;
    end else begin
        if (((ap_ST_st21_fsm_20 == ap_CS_fsm) & ((tmp_s_reg_438 == ap_const_lv1_0) | (ap_const_lv1_0 == tmp_5_fu_397_p2) | (ap_const_lv1_0 == tmp_3_fu_372_p2)))) begin
            ap_return_preg <= p_0_phi_fu_172_p6;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((((ap_ST_st3_fsm_2 == ap_CS_fsm) & ~(ap_const_lv1_0 == tmp_i_fu_241_p2)) | ((ap_ST_st14_fsm_13 == ap_CS_fsm) & (ap_const_lv1_0 == tmp_i_24_fu_277_p2)))) begin
        agg_result_V_i_reg_145 <= ap_const_lv36_FFFFFFFFF;
    end else if (((ap_ST_st17_fsm_16 == ap_CS_fsm) & (ap_const_lv1_0 == tmp_i_reg_463) & ~(ap_const_lv1_0 == tmp_i_24_reg_483))) begin
        agg_result_V_i_reg_145 <= colours_V_q0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st21_fsm_20 == ap_CS_fsm) & ~(tmp_s_reg_438 == ap_const_lv1_0) & ~(ap_const_lv1_0 == tmp_5_fu_397_p2) & ~(ap_const_lv1_0 == tmp_3_fu_372_p2))) begin
        p_058_0_in_reg_159 <= t_V_fu_365_p2;
    end else if ((ap_ST_st20_fsm_19 == ap_CS_fsm)) begin
        p_058_0_in_reg_159 <= pp_tile_V_load_reg_447;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st21_fsm_20 == ap_CS_fsm) & ~(tmp_s_reg_438 == ap_const_lv1_0) & (ap_const_lv1_0 == tmp_3_fu_372_p2))) begin
        p_0_reg_168 <= ap_const_lv1_0;
    end else if ((((ap_ST_st2_fsm_1 == ap_CS_fsm) & (tmp_s_fu_204_p2 == ap_const_lv1_0)) | ((ap_ST_st21_fsm_20 == ap_CS_fsm) & ~(tmp_s_reg_438 == ap_const_lv1_0) & (ap_const_lv1_0 == tmp_5_fu_397_p2) & ~(ap_const_lv1_0 == tmp_3_fu_372_p2)))) begin
        p_0_reg_168 <= ap_const_lv1_1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st20_fsm_19 == ap_CS_fsm)) begin
        agg_result_V_i1_reg_537 <= agg_result_V_i1_fu_349_p3;
        tmp1_reg_547 <= tmp1_fu_360_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st3_fsm_2 == ap_CS_fsm)) begin
        left_V_reg_458 <= left_V_fu_236_p2;
        possible_V_reg_452 <= possible_V_fu_224_p2;
        pp_tile_V_load_reg_447 <= pp_tile_V_q0;
        tmp_i_reg_463 <= tmp_i_fu_241_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0))) begin
        pp_rot_V_addr_reg_433 <= tmp_fu_199_p1;
        tmp_reg_428 <= tmp_fu_199_p1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~(tmp_s_fu_204_p2 == ap_const_lv1_0))) begin
        pp_tile_V_addr_reg_442 <= tmp_reg_428;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st17_fsm_16 == ap_CS_fsm)) begin
        tmp_26_reg_512 <= up_V_fu_306_p2[ap_const_lv32_7];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st14_fsm_13 == ap_CS_fsm)) begin
        tmp_i_24_reg_483 <= tmp_i_24_fu_277_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st2_fsm_1 == ap_CS_fsm)) begin
        tmp_s_reg_438 <= tmp_s_fu_204_p2;
    end
end

/// ap_done assign process. ///
always @ (ap_start or ap_CS_fsm or tmp_s_reg_438 or tmp_5_fu_397_p2 or tmp_3_fu_372_p2)
begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm)) | ((ap_ST_st21_fsm_20 == ap_CS_fsm) & ((tmp_s_reg_438 == ap_const_lv1_0) | (ap_const_lv1_0 == tmp_5_fu_397_p2) | (ap_const_lv1_0 == tmp_3_fu_372_p2))))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_CS_fsm)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_CS_fsm or tmp_s_reg_438 or tmp_5_fu_397_p2 or tmp_3_fu_372_p2)
begin
    if (((ap_ST_st21_fsm_20 == ap_CS_fsm) & ((tmp_s_reg_438 == ap_const_lv1_0) | (ap_const_lv1_0 == tmp_5_fu_397_p2) | (ap_const_lv1_0 == tmp_3_fu_372_p2)))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_return assign process. ///
always @ (ap_CS_fsm or tmp_s_reg_438 or tmp_5_fu_397_p2 or tmp_3_fu_372_p2 or p_0_phi_fu_172_p6 or ap_return_preg)
begin
    if (((ap_ST_st21_fsm_20 == ap_CS_fsm) & ((tmp_s_reg_438 == ap_const_lv1_0) | (ap_const_lv1_0 == tmp_5_fu_397_p2) | (ap_const_lv1_0 == tmp_3_fu_372_p2)))) begin
        ap_return = p_0_phi_fu_172_p6;
    end else begin
        ap_return = ap_return_preg;
    end
end

/// avail_V_o assign process. ///
always @ (ap_CS_fsm or avail_V_i or tmp_s_reg_438 or possible_V_fu_224_p2 or tmp_5_fu_397_p2 or tmp_3_fu_372_p2 or tmp_6_fu_409_p2)
begin
    if (((ap_ST_st21_fsm_20 == ap_CS_fsm) & ~(tmp_s_reg_438 == ap_const_lv1_0) & (ap_const_lv1_0 == tmp_5_fu_397_p2) & ~(ap_const_lv1_0 == tmp_3_fu_372_p2))) begin
        avail_V_o = tmp_6_fu_409_p2;
    end else if ((ap_ST_st3_fsm_2 == ap_CS_fsm)) begin
        avail_V_o = possible_V_fu_224_p2;
    end else begin
        avail_V_o = avail_V_i;
    end
end

/// avail_V_o_ap_vld assign process. ///
always @ (ap_CS_fsm or tmp_s_reg_438 or tmp_5_fu_397_p2 or tmp_3_fu_372_p2)
begin
    if (((ap_ST_st3_fsm_2 == ap_CS_fsm) | ((ap_ST_st21_fsm_20 == ap_CS_fsm) & ~(tmp_s_reg_438 == ap_const_lv1_0) & (ap_const_lv1_0 == tmp_5_fu_397_p2) & ~(ap_const_lv1_0 == tmp_3_fu_372_p2)))) begin
        avail_V_o_ap_vld = ap_const_logic_1;
    end else begin
        avail_V_o_ap_vld = ap_const_logic_0;
    end
end

/// colours_V_address0 assign process. ///
always @ (ap_CS_fsm or tmp_30_i_fu_301_p1 or tmp_i5_fu_344_p1)
begin
    if ((ap_ST_st19_fsm_18 == ap_CS_fsm)) begin
        colours_V_address0 = tmp_i5_fu_344_p1;
    end else if ((ap_ST_st16_fsm_15 == ap_CS_fsm)) begin
        colours_V_address0 = tmp_30_i_fu_301_p1;
    end else begin
        colours_V_address0 = 'bx;
    end
end

/// colours_V_ce0 assign process. ///
always @ (ap_CS_fsm)
begin
    if (((ap_ST_st16_fsm_15 == ap_CS_fsm) | (ap_ST_st19_fsm_18 == ap_CS_fsm))) begin
        colours_V_ce0 = ap_const_logic_1;
    end else begin
        colours_V_ce0 = ap_const_logic_0;
    end
end

/// p_0_phi_fu_172_p6 assign process. ///
always @ (tmp_3_fu_372_p2 or p_0_reg_168 or ap_sig_bdd_390 or ap_sig_bdd_157)
begin
    if (ap_sig_bdd_157) begin
        if ((ap_const_lv1_0 == tmp_3_fu_372_p2)) begin
            p_0_phi_fu_172_p6 = ap_const_lv1_0;
        end else if (ap_sig_bdd_390) begin
            p_0_phi_fu_172_p6 = ap_const_lv1_1;
        end else begin
            p_0_phi_fu_172_p6 = p_0_reg_168;
        end
    end else begin
        p_0_phi_fu_172_p6 = p_0_reg_168;
    end
end

/// pp_rot_V_address0 assign process. ///
always @ (ap_CS_fsm or tmp_fu_199_p1 or pp_rot_V_addr_reg_433 or tmp_i_i_fu_283_p1 or tmp_i_i2_fu_319_p1)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) | (ap_ST_st21_fsm_20 == ap_CS_fsm))) begin
        pp_rot_V_address0 = pp_rot_V_addr_reg_433;
    end else if ((ap_ST_st17_fsm_16 == ap_CS_fsm)) begin
        pp_rot_V_address0 = tmp_i_i2_fu_319_p1;
    end else if ((ap_ST_st14_fsm_13 == ap_CS_fsm)) begin
        pp_rot_V_address0 = tmp_i_i_fu_283_p1;
    end else if ((ap_ST_st1_fsm_0 == ap_CS_fsm)) begin
        pp_rot_V_address0 = tmp_fu_199_p1;
    end else begin
        pp_rot_V_address0 = 'bx;
    end
end

/// pp_rot_V_ce0 assign process. ///
always @ (ap_start or ap_CS_fsm)
begin
    if ((((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0)) | (ap_ST_st2_fsm_1 == ap_CS_fsm) | (ap_ST_st14_fsm_13 == ap_CS_fsm) | (ap_ST_st17_fsm_16 == ap_CS_fsm) | (ap_ST_st21_fsm_20 == ap_CS_fsm))) begin
        pp_rot_V_ce0 = ap_const_logic_1;
    end else begin
        pp_rot_V_ce0 = ap_const_logic_0;
    end
end

/// pp_rot_V_d0 assign process. ///
always @ (ap_CS_fsm or grp_fu_184_p2)
begin
    if ((ap_ST_st21_fsm_20 == ap_CS_fsm)) begin
        pp_rot_V_d0 = ap_const_lv2_0;
    end else if ((ap_ST_st2_fsm_1 == ap_CS_fsm)) begin
        pp_rot_V_d0 = grp_fu_184_p2;
    end else begin
        pp_rot_V_d0 = 'bx;
    end
end

/// pp_rot_V_we0 assign process. ///
always @ (ap_CS_fsm or tmp_s_fu_204_p2 or tmp_s_reg_438 or tmp_5_fu_397_p2 or tmp_3_fu_372_p2)
begin
    if ((((ap_ST_st2_fsm_1 == ap_CS_fsm) & (tmp_s_fu_204_p2 == ap_const_lv1_0)) | ((ap_ST_st21_fsm_20 == ap_CS_fsm) & ~(tmp_s_reg_438 == ap_const_lv1_0) & (ap_const_lv1_0 == tmp_5_fu_397_p2) & ~(ap_const_lv1_0 == tmp_3_fu_372_p2)))) begin
        pp_rot_V_we0 = ap_const_logic_1;
    end else begin
        pp_rot_V_we0 = ap_const_logic_0;
    end
end

/// pp_tile_V_address0 assign process. ///
always @ (ap_CS_fsm or tmp_reg_428 or pp_tile_V_addr_reg_442 or tmp_i_i_fu_283_p1 or tmp_i_i2_fu_319_p1)
begin
    if ((ap_ST_st21_fsm_20 == ap_CS_fsm)) begin
        pp_tile_V_address0 = pp_tile_V_addr_reg_442;
    end else if ((ap_ST_st17_fsm_16 == ap_CS_fsm)) begin
        pp_tile_V_address0 = tmp_i_i2_fu_319_p1;
    end else if ((ap_ST_st14_fsm_13 == ap_CS_fsm)) begin
        pp_tile_V_address0 = tmp_i_i_fu_283_p1;
    end else if ((ap_ST_st2_fsm_1 == ap_CS_fsm)) begin
        pp_tile_V_address0 = tmp_reg_428;
    end else begin
        pp_tile_V_address0 = 'bx;
    end
end

/// pp_tile_V_ce0 assign process. ///
always @ (ap_CS_fsm)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) | (ap_ST_st14_fsm_13 == ap_CS_fsm) | (ap_ST_st17_fsm_16 == ap_CS_fsm) | (ap_ST_st21_fsm_20 == ap_CS_fsm))) begin
        pp_tile_V_ce0 = ap_const_logic_1;
    end else begin
        pp_tile_V_ce0 = ap_const_logic_0;
    end
end

/// pp_tile_V_we0 assign process. ///
always @ (ap_CS_fsm or tmp_s_reg_438 or tmp_5_fu_397_p2 or tmp_3_fu_372_p2)
begin
    if (((ap_ST_st21_fsm_20 == ap_CS_fsm) & ~(tmp_s_reg_438 == ap_const_lv1_0) & (ap_const_lv1_0 == tmp_5_fu_397_p2) & ~(ap_const_lv1_0 == tmp_3_fu_372_p2))) begin
        pp_tile_V_we0 = ap_const_logic_1;
    end else begin
        pp_tile_V_we0 = ap_const_logic_0;
    end
end

/// tiles_V_address0 assign process. ///
always @ (ap_CS_fsm or tmp_20_fu_296_p1 or tmp_22_fu_339_p1)
begin
    if ((ap_ST_st18_fsm_17 == ap_CS_fsm)) begin
        tiles_V_address0 = tmp_22_fu_339_p1;
    end else if ((ap_ST_st15_fsm_14 == ap_CS_fsm)) begin
        tiles_V_address0 = tmp_20_fu_296_p1;
    end else begin
        tiles_V_address0 = 'bx;
    end
end

/// tiles_V_ce0 assign process. ///
always @ (ap_CS_fsm)
begin
    if (((ap_ST_st15_fsm_14 == ap_CS_fsm) | (ap_ST_st18_fsm_17 == ap_CS_fsm))) begin
        tiles_V_ce0 = ap_const_logic_1;
    end else begin
        tiles_V_ce0 = ap_const_logic_0;
    end
end

/// toplevel_sdiv_9s_9ns_9_12_U11_ap_start assign process. ///
always @ (ap_CS_fsm or tmp_i_fu_241_p2)
begin
    if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & (ap_const_lv1_0 == tmp_i_fu_241_p2))) begin
        toplevel_sdiv_9s_9ns_9_12_U11_ap_start = ap_const_logic_1;
    end else begin
        toplevel_sdiv_9s_9ns_9_12_U11_ap_start = ap_const_logic_0;
    end
end

/// toplevel_sdiv_9s_9ns_9_12_U12_ap_start assign process. ///
always @ (ap_CS_fsm or tmp_i_fu_241_p2)
begin
    if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & (ap_const_lv1_0 == tmp_i_fu_241_p2))) begin
        toplevel_sdiv_9s_9ns_9_12_U12_ap_start = ap_const_logic_1;
    end else begin
        toplevel_sdiv_9s_9ns_9_12_U12_ap_start = ap_const_logic_0;
    end
end
always @ (ap_start or ap_CS_fsm or tmp_s_fu_204_p2 or tmp_s_reg_438 or tmp_i_fu_241_p2 or tmp_i_24_fu_277_p2 or tmp_5_fu_397_p2 or tmp_3_fu_372_p2)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        ap_ST_st2_fsm_1 : 
            if ((tmp_s_fu_204_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st21_fsm_20;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        ap_ST_st3_fsm_2 : 
            if (~(ap_const_lv1_0 == tmp_i_fu_241_p2)) begin
                ap_NS_fsm = ap_ST_st17_fsm_16;
            end else begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end
        ap_ST_st4_fsm_3 : 
            ap_NS_fsm = ap_ST_st5_fsm_4;
        ap_ST_st5_fsm_4 : 
            ap_NS_fsm = ap_ST_st6_fsm_5;
        ap_ST_st6_fsm_5 : 
            ap_NS_fsm = ap_ST_st7_fsm_6;
        ap_ST_st7_fsm_6 : 
            ap_NS_fsm = ap_ST_st8_fsm_7;
        ap_ST_st8_fsm_7 : 
            ap_NS_fsm = ap_ST_st9_fsm_8;
        ap_ST_st9_fsm_8 : 
            ap_NS_fsm = ap_ST_st10_fsm_9;
        ap_ST_st10_fsm_9 : 
            ap_NS_fsm = ap_ST_st11_fsm_10;
        ap_ST_st11_fsm_10 : 
            ap_NS_fsm = ap_ST_st12_fsm_11;
        ap_ST_st12_fsm_11 : 
            ap_NS_fsm = ap_ST_st13_fsm_12;
        ap_ST_st13_fsm_12 : 
            ap_NS_fsm = ap_ST_st14_fsm_13;
        ap_ST_st14_fsm_13 : 
            if ((ap_const_lv1_0 == tmp_i_24_fu_277_p2)) begin
                ap_NS_fsm = ap_ST_st17_fsm_16;
            end else begin
                ap_NS_fsm = ap_ST_st15_fsm_14;
            end
        ap_ST_st15_fsm_14 : 
            ap_NS_fsm = ap_ST_st16_fsm_15;
        ap_ST_st16_fsm_15 : 
            ap_NS_fsm = ap_ST_st17_fsm_16;
        ap_ST_st17_fsm_16 : 
            ap_NS_fsm = ap_ST_st18_fsm_17;
        ap_ST_st18_fsm_17 : 
            ap_NS_fsm = ap_ST_st19_fsm_18;
        ap_ST_st19_fsm_18 : 
            ap_NS_fsm = ap_ST_st20_fsm_19;
        ap_ST_st20_fsm_19 : 
            ap_NS_fsm = ap_ST_st21_fsm_20;
        ap_ST_st21_fsm_20 : 
            if (((tmp_s_reg_438 == ap_const_lv1_0) | (ap_const_lv1_0 == tmp_5_fu_397_p2) | (ap_const_lv1_0 == tmp_3_fu_372_p2))) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st21_fsm_20;
            end
        default : 
            ap_NS_fsm = 'bx;
    endcase
end
assign agg_result_V_i1_fu_349_p3 = ((tmp_26_reg_512)? ap_const_lv36_FFFFFFFFF: colours_V_q0);

/// ap_sig_bdd_157 assign process. ///
always @ (ap_CS_fsm or tmp_s_reg_438)
begin
    ap_sig_bdd_157 = ((ap_ST_st21_fsm_20 == ap_CS_fsm) & ~(tmp_s_reg_438 == ap_const_lv1_0));
end

/// ap_sig_bdd_390 assign process. ///
always @ (tmp_5_fu_397_p2 or tmp_3_fu_372_p2)
begin
    ap_sig_bdd_390 = ((ap_const_lv1_0 == tmp_5_fu_397_p2) & ~(ap_const_lv1_0 == tmp_3_fu_372_p2));
end
assign grp_fu_184_p2 = (pp_rot_V_q0 + ap_const_lv2_1);
assign grp_fu_254_ce = ap_const_logic_1;
assign grp_fu_254_p0 = $signed(left_V_fu_236_p2);
assign grp_fu_254_p1 = tmp_40_tr_i_fu_250_p1;
assign grp_fu_263_ce = ap_const_logic_1;
assign grp_fu_263_p0 = $signed(cp_V);
assign grp_fu_263_p1 = tmp_40_tr_i_fu_250_p1;
assign left_V_fu_236_p2 = (cp_V + ap_const_lv8_FF);
assign p_s_fu_403_p2 = (r_V_10_fu_381_p2 ^ ap_const_lv36_FFFFFFFFF);
assign possible_V_fu_224_p2 = (avail_V_i | r_V_fu_214_p2);
assign pp_tile_V_d0 = t_V_fu_365_p2;
assign r_V_10_fu_381_p2 = ap_const_lv36_1 << tmp_4_fu_377_p1;
assign r_V_2_fu_392_p2 = (tmp2_fu_387_p2 & tmp1_reg_547);
assign r_V_5_fu_269_p1 = grp_fu_254_p2[7:0];
assign r_V_7_fu_325_p2 = (pp_rot_V_q0 ^ ap_const_lv2_2);
assign r_V_8_fu_273_p1 = grp_fu_263_p2[7:0];
assign r_V_fu_214_p2 = ap_const_lv36_1 << tmp_1_fu_210_p1;
assign t_V_fu_365_p2 = (p_058_0_in_reg_159 + ap_const_lv8_1);
assign tmp1_fu_360_p2 = (agg_result_V_i_reg_145 & possible_V_reg_452);
assign tmp2_fu_387_p2 = (agg_result_V_i1_reg_537 & r_V_10_fu_381_p2);
assign tmp_19_fu_288_p3 = {{pp_tile_V_q0}, {grp_fu_184_p2}};
assign tmp_1_fu_210_p1 = $unsigned(pp_tile_V_q0);
assign tmp_20_fu_296_p1 = $unsigned(tmp_19_fu_288_p3);
assign tmp_21_fu_331_p3 = {{pp_tile_V_q0}, {r_V_7_fu_325_p2}};
assign tmp_22_fu_339_p1 = $unsigned(tmp_21_fu_331_p3);
assign tmp_30_i_fu_301_p1 = $unsigned(tiles_V_q0);
assign tmp_3_fu_372_p2 = (t_V_fu_365_p2 < ntiles_V? 1'b1: 1'b0);
assign tmp_40_tr_i_fu_250_p1 = $unsigned(side_V);
assign tmp_4_fu_377_p1 = $unsigned(t_V_fu_365_p2);
assign tmp_5_fu_397_p2 = (r_V_2_fu_392_p2 == ap_const_lv36_0? 1'b1: 1'b0);
assign tmp_6_fu_409_p2 = (possible_V_reg_452 & p_s_fu_403_p2);
assign tmp_fu_199_p1 = $signed(cp_V);
assign tmp_i5_fu_344_p1 = $unsigned(tiles_V_q0);
assign tmp_i_24_fu_277_p2 = (r_V_5_fu_269_p1 == r_V_8_fu_273_p1? 1'b1: 1'b0);
assign tmp_i_fu_241_p2 = (cp_V == ap_const_lv8_0? 1'b1: 1'b0);
assign tmp_i_i2_fu_319_p1 = $unsigned(up_V_fu_306_p2);
assign tmp_i_i_fu_283_p1 = $unsigned(left_V_reg_458);
assign tmp_s_fu_204_p2 = (pp_rot_V_q0 == ap_const_lv2_3? 1'b1: 1'b0);
assign up_V_fu_306_p2 = (cp_V - side_V);


endmodule //right_r

