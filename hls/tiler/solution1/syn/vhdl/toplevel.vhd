-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2013.4
-- Copyright (C) 2013 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity toplevel is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    input_V_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    input_V_V_empty_n : IN STD_LOGIC;
    input_V_V_read : OUT STD_LOGIC;
    output_V_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_V_V_full_n : IN STD_LOGIC;
    output_V_V_write : OUT STD_LOGIC );
end;


architecture behav of toplevel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "toplevel,hls_ip_2013_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc3s500efg320-4,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=14.731313,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=0}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (4 downto 0) := "01011";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (4 downto 0) := "01100";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (4 downto 0) := "01101";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (4 downto 0) := "01110";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (4 downto 0) := "10011";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (4 downto 0) := "10101";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (4 downto 0) := "10110";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (4 downto 0) := "10111";
    constant ap_ST_st25_fsm_24 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_ST_st26_fsm_25 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_ST_st27_fsm_26 : STD_LOGIC_VECTOR (4 downto 0) := "11010";
    constant ap_ST_st28_fsm_27 : STD_LOGIC_VECTOR (4 downto 0) := "11011";
    constant ap_ST_st29_fsm_28 : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_ST_st30_fsm_29 : STD_LOGIC_VECTOR (4 downto 0) := "11101";
    constant ap_ST_st31_fsm_30 : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_ST_st32_fsm_31 : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv36_0 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv6_24 : STD_LOGIC_VECTOR (5 downto 0) := "100100";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv36_1 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";

    signal cp_V : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal terminate : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal avail_V : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000000";
    signal colours_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal colours_V_ce0 : STD_LOGIC;
    signal colours_V_we0 : STD_LOGIC;
    signal colours_V_d0 : STD_LOGIC_VECTOR (35 downto 0);
    signal colours_V_q0 : STD_LOGIC_VECTOR (35 downto 0);
    signal pp_tile_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal pp_tile_V_ce0 : STD_LOGIC;
    signal pp_tile_V_we0 : STD_LOGIC;
    signal pp_tile_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal pp_tile_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal pp_tile_V_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal pp_tile_V_ce1 : STD_LOGIC;
    signal pp_tile_V_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal pp_rot_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal pp_rot_V_ce0 : STD_LOGIC;
    signal pp_rot_V_we0 : STD_LOGIC;
    signal pp_rot_V_d0 : STD_LOGIC_VECTOR (1 downto 0);
    signal pp_rot_V_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal pp_rot_V_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal pp_rot_V_ce1 : STD_LOGIC;
    signal pp_rot_V_q1 : STD_LOGIC_VECTOR (1 downto 0);
    signal side_V : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ntiles_V : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal tiles_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tiles_V_ce0 : STD_LOGIC;
    signal tiles_V_we0 : STD_LOGIC;
    signal tiles_V_d0 : STD_LOGIC_VECTOR (3 downto 0);
    signal tiles_V_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal tiles_V_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tiles_V_ce1 : STD_LOGIC;
    signal tiles_V_q1 : STD_LOGIC_VECTOR (3 downto 0);
    signal seq : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal t_V_6_fu_464_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal c_V_fu_498_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_V_1_fu_515_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond_i_fu_509_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_120 : BOOLEAN;
    signal t_V_1_fu_555_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_V_1_reg_939 : STD_LOGIC_VECTOR (7 downto 0);
    signal e_V_fu_567_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond1_fu_561_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_132 : BOOLEAN;
    signal t_fu_615_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_reg_955 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_1_fu_655_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal r_V_1_reg_960 : STD_LOGIC_VECTOR (35 downto 0);
    signal tmp_2_i_fu_609_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal e_fu_693_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal e_reg_974 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond_i4_fu_687_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal colours_V_addr_1_reg_984 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_fu_433_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal terminate_load_reg_989 : STD_LOGIC_VECTOR (0 downto 0);
    signal seq_load_reg_993 : STD_LOGIC_VECTOR (0 downto 0);
    signal terminate_load_1_reg_1011 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_i_fu_757_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_183 : BOOLEAN;
    signal tmp_4_fu_787_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_1021 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_781_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_V_fu_799_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_V_reg_1028 : STD_LOGIC_VECTOR (7 downto 0);
    signal pp_tile_V_addr_1_reg_1033 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_6_fu_793_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pp_rot_V_addr_1_reg_1038 : STD_LOGIC_VECTOR (5 downto 0);
    signal seq_load_2_reg_1043 : STD_LOGIC_VECTOR (0 downto 0);
    signal e_V_1_fu_817_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal e_V_1_reg_1050 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_15_fu_823_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_15_reg_1055 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond_fu_811_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal terminate_load_3_reg_1065 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_right_r_fu_366_ap_done : STD_LOGIC;
    signal t_V_8_reg_1073 : STD_LOGIC_VECTOR (7 downto 0);
    signal pp_tile_V_addr_2_reg_1080 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_14_reg_1085 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_backtrack_fu_344_ap_start : STD_LOGIC;
    signal grp_backtrack_fu_344_ap_done : STD_LOGIC;
    signal grp_backtrack_fu_344_ap_idle : STD_LOGIC;
    signal grp_backtrack_fu_344_ap_ready : STD_LOGIC;
    signal grp_backtrack_fu_344_cp_V_i : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_backtrack_fu_344_cp_V_o : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_backtrack_fu_344_cp_V_o_ap_vld : STD_LOGIC;
    signal grp_backtrack_fu_344_pp_rot_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_backtrack_fu_344_pp_rot_V_ce0 : STD_LOGIC;
    signal grp_backtrack_fu_344_pp_rot_V_we0 : STD_LOGIC;
    signal grp_backtrack_fu_344_pp_rot_V_d0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_backtrack_fu_344_pp_rot_V_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_backtrack_fu_344_pp_rot_V_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_backtrack_fu_344_pp_rot_V_ce1 : STD_LOGIC;
    signal grp_backtrack_fu_344_pp_rot_V_q1 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_backtrack_fu_344_pp_tile_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_backtrack_fu_344_pp_tile_V_ce0 : STD_LOGIC;
    signal grp_backtrack_fu_344_pp_tile_V_we0 : STD_LOGIC;
    signal grp_backtrack_fu_344_pp_tile_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_backtrack_fu_344_pp_tile_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_backtrack_fu_344_pp_tile_V_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_backtrack_fu_344_pp_tile_V_ce1 : STD_LOGIC;
    signal grp_backtrack_fu_344_pp_tile_V_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_backtrack_fu_344_avail_V_i : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_backtrack_fu_344_avail_V_o : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_backtrack_fu_344_avail_V_o_ap_vld : STD_LOGIC;
    signal grp_backtrack_fu_344_side_V : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_backtrack_fu_344_tiles_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_backtrack_fu_344_tiles_V_ce0 : STD_LOGIC;
    signal grp_backtrack_fu_344_tiles_V_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_backtrack_fu_344_tiles_V_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_backtrack_fu_344_tiles_V_ce1 : STD_LOGIC;
    signal grp_backtrack_fu_344_tiles_V_q1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_backtrack_fu_344_colours_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_backtrack_fu_344_colours_V_ce0 : STD_LOGIC;
    signal grp_backtrack_fu_344_colours_V_q0 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_backtrack_fu_344_ntiles_V : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_backtrack_fu_344_terminate_i : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_backtrack_fu_344_terminate_o : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_backtrack_fu_344_terminate_o_ap_vld : STD_LOGIC;
    signal grp_right_r_fu_366_ap_start : STD_LOGIC;
    signal grp_right_r_fu_366_ap_idle : STD_LOGIC;
    signal grp_right_r_fu_366_ap_ready : STD_LOGIC;
    signal grp_right_r_fu_366_cp_V : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_right_r_fu_366_pp_rot_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_right_r_fu_366_pp_rot_V_ce0 : STD_LOGIC;
    signal grp_right_r_fu_366_pp_rot_V_we0 : STD_LOGIC;
    signal grp_right_r_fu_366_pp_rot_V_d0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_right_r_fu_366_pp_rot_V_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_right_r_fu_366_pp_tile_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_right_r_fu_366_pp_tile_V_ce0 : STD_LOGIC;
    signal grp_right_r_fu_366_pp_tile_V_we0 : STD_LOGIC;
    signal grp_right_r_fu_366_pp_tile_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_right_r_fu_366_pp_tile_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_right_r_fu_366_avail_V_i : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_right_r_fu_366_avail_V_o : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_right_r_fu_366_avail_V_o_ap_vld : STD_LOGIC;
    signal grp_right_r_fu_366_side_V : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_right_r_fu_366_tiles_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_right_r_fu_366_tiles_V_ce0 : STD_LOGIC;
    signal grp_right_r_fu_366_tiles_V_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_right_r_fu_366_colours_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_right_r_fu_366_colours_V_ce0 : STD_LOGIC;
    signal grp_right_r_fu_366_colours_V_q0 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_right_r_fu_366_ntiles_V : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_right_r_fu_366_ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_down_fu_386_ap_start : STD_LOGIC;
    signal grp_down_fu_386_ap_done : STD_LOGIC;
    signal grp_down_fu_386_ap_idle : STD_LOGIC;
    signal grp_down_fu_386_ap_ready : STD_LOGIC;
    signal grp_down_fu_386_ntiles_V : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_down_fu_386_cp_V_i : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_down_fu_386_cp_V_o : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_down_fu_386_cp_V_o_ap_vld : STD_LOGIC;
    signal grp_down_fu_386_avail_V_i : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_down_fu_386_avail_V_o : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_down_fu_386_avail_V_o_ap_vld : STD_LOGIC;
    signal grp_down_fu_386_side_V : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_down_fu_386_pp_tile_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_down_fu_386_pp_tile_V_ce0 : STD_LOGIC;
    signal grp_down_fu_386_pp_tile_V_we0 : STD_LOGIC;
    signal grp_down_fu_386_pp_tile_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_down_fu_386_pp_tile_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_down_fu_386_pp_rot_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_down_fu_386_pp_rot_V_ce0 : STD_LOGIC;
    signal grp_down_fu_386_pp_rot_V_we0 : STD_LOGIC;
    signal grp_down_fu_386_pp_rot_V_d0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_down_fu_386_pp_rot_V_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_down_fu_386_tiles_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_down_fu_386_tiles_V_ce0 : STD_LOGIC;
    signal grp_down_fu_386_tiles_V_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_down_fu_386_colours_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_down_fu_386_colours_V_ce0 : STD_LOGIC;
    signal grp_down_fu_386_colours_V_q0 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_down_fu_386_ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_check_fu_406_ap_start : STD_LOGIC;
    signal grp_check_fu_406_ap_done : STD_LOGIC;
    signal grp_check_fu_406_ap_idle : STD_LOGIC;
    signal grp_check_fu_406_ap_ready : STD_LOGIC;
    signal grp_check_fu_406_p_V : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_check_fu_406_side_V : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_check_fu_406_pp_tile_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_check_fu_406_pp_tile_V_ce0 : STD_LOGIC;
    signal grp_check_fu_406_pp_tile_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_check_fu_406_pp_tile_V_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_check_fu_406_pp_tile_V_ce1 : STD_LOGIC;
    signal grp_check_fu_406_pp_tile_V_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_check_fu_406_pp_rot_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_check_fu_406_pp_rot_V_ce0 : STD_LOGIC;
    signal grp_check_fu_406_pp_rot_V_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_check_fu_406_pp_rot_V_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_check_fu_406_pp_rot_V_ce1 : STD_LOGIC;
    signal grp_check_fu_406_pp_rot_V_q1 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_check_fu_406_tiles_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_check_fu_406_tiles_V_ce0 : STD_LOGIC;
    signal grp_check_fu_406_tiles_V_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_check_fu_406_tiles_V_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_check_fu_406_tiles_V_ce1 : STD_LOGIC;
    signal grp_check_fu_406_tiles_V_q1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_check_fu_406_ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal t_V_5_reg_242 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond2_i_fu_458_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_i_reg_253 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond3_i_fu_492_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal t_V_7_reg_264 : STD_LOGIC_VECTOR (5 downto 0);
    signal t_V_reg_275 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_V_2_reg_287 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_fu_549_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal op2_assign_reg_298 : STD_LOGIC_VECTOR (31 downto 0);
    signal e_i_reg_310 : STD_LOGIC_VECTOR (2 downto 0);
    signal t_V_3_reg_321 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_V_4_reg_332 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_backtrack_fu_344_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal grp_right_r_fu_366_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal grp_down_fu_386_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal grp_check_fu_406_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal tmp_9_i_fu_504_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_i_fu_521_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_600_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_715_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tiles_V_addr4_fu_709_p2_temp: signed (32-1 downto 0);
    signal tmp_10_i_fu_720_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i3_fu_805_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_fu_840_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_i1_fu_856_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal t_V_8_reg_1073_temp: signed (8-1 downto 0);
    signal ap_sig_bdd_503 : BOOLEAN;
    signal tmp_V_5_fu_845_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_i_i_fu_860_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_13_fu_480_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal tmp_3_fu_673_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal tmp_22_i_i_fu_889_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal tmp_7_fu_527_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ntiles_V_assign_fu_537_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_cond5_demorgan_i_fu_907_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_4_fu_126 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_i_fu_725_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal tmp_i_fu_470_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal r_V_fu_474_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal ntiles_V_assign_fu_537_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ntiles_V_assign_fu_537_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_582_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tiles_V_addr5_cast_fu_590_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_5_trn_cast_fu_578_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tiles_V_addr6_fu_594_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i3_cast_fu_605_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_i_fu_629_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal tmp_6_i_fu_639_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_i_fu_645_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_621_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_i_cast_fu_651_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal tmp_5_i_fu_633_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal tmp_5_fu_663_p4 : STD_LOGIC_VECTOR (34 downto 0);
    signal tmp_13_fu_703_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_i6_trn_fu_699_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tiles_V_addr4_fu_709_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i1_cast_fu_731_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_12_i_fu_745_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal cp_V_temp: signed (8-1 downto 0);
    signal op2_assign_2_fu_735_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_12_i_fu_745_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_i_fu_751_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_2_fu_827_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_10_fu_832_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_i_i1_21_fu_879_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal r_V_3_fu_883_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal or_cond_demorgan_i_fu_850_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);

    component backtrack IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        cp_V_i : IN STD_LOGIC_VECTOR (7 downto 0);
        cp_V_o : OUT STD_LOGIC_VECTOR (7 downto 0);
        cp_V_o_ap_vld : OUT STD_LOGIC;
        pp_rot_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        pp_rot_V_ce0 : OUT STD_LOGIC;
        pp_rot_V_we0 : OUT STD_LOGIC;
        pp_rot_V_d0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        pp_rot_V_q0 : IN STD_LOGIC_VECTOR (1 downto 0);
        pp_rot_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        pp_rot_V_ce1 : OUT STD_LOGIC;
        pp_rot_V_q1 : IN STD_LOGIC_VECTOR (1 downto 0);
        pp_tile_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        pp_tile_V_ce0 : OUT STD_LOGIC;
        pp_tile_V_we0 : OUT STD_LOGIC;
        pp_tile_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        pp_tile_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        pp_tile_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        pp_tile_V_ce1 : OUT STD_LOGIC;
        pp_tile_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        avail_V_i : IN STD_LOGIC_VECTOR (35 downto 0);
        avail_V_o : OUT STD_LOGIC_VECTOR (35 downto 0);
        avail_V_o_ap_vld : OUT STD_LOGIC;
        side_V : IN STD_LOGIC_VECTOR (7 downto 0);
        tiles_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        tiles_V_ce0 : OUT STD_LOGIC;
        tiles_V_q0 : IN STD_LOGIC_VECTOR (3 downto 0);
        tiles_V_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        tiles_V_ce1 : OUT STD_LOGIC;
        tiles_V_q1 : IN STD_LOGIC_VECTOR (3 downto 0);
        colours_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        colours_V_ce0 : OUT STD_LOGIC;
        colours_V_q0 : IN STD_LOGIC_VECTOR (35 downto 0);
        ntiles_V : IN STD_LOGIC_VECTOR (7 downto 0);
        terminate_i : IN STD_LOGIC_VECTOR (0 downto 0);
        terminate_o : OUT STD_LOGIC_VECTOR (0 downto 0);
        terminate_o_ap_vld : OUT STD_LOGIC );
    end component;


    component right_r IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        cp_V : IN STD_LOGIC_VECTOR (7 downto 0);
        pp_rot_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        pp_rot_V_ce0 : OUT STD_LOGIC;
        pp_rot_V_we0 : OUT STD_LOGIC;
        pp_rot_V_d0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        pp_rot_V_q0 : IN STD_LOGIC_VECTOR (1 downto 0);
        pp_tile_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        pp_tile_V_ce0 : OUT STD_LOGIC;
        pp_tile_V_we0 : OUT STD_LOGIC;
        pp_tile_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        pp_tile_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        avail_V_i : IN STD_LOGIC_VECTOR (35 downto 0);
        avail_V_o : OUT STD_LOGIC_VECTOR (35 downto 0);
        avail_V_o_ap_vld : OUT STD_LOGIC;
        side_V : IN STD_LOGIC_VECTOR (7 downto 0);
        tiles_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        tiles_V_ce0 : OUT STD_LOGIC;
        tiles_V_q0 : IN STD_LOGIC_VECTOR (3 downto 0);
        colours_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        colours_V_ce0 : OUT STD_LOGIC;
        colours_V_q0 : IN STD_LOGIC_VECTOR (35 downto 0);
        ntiles_V : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component down IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ntiles_V : IN STD_LOGIC_VECTOR (7 downto 0);
        cp_V_i : IN STD_LOGIC_VECTOR (7 downto 0);
        cp_V_o : OUT STD_LOGIC_VECTOR (7 downto 0);
        cp_V_o_ap_vld : OUT STD_LOGIC;
        avail_V_i : IN STD_LOGIC_VECTOR (35 downto 0);
        avail_V_o : OUT STD_LOGIC_VECTOR (35 downto 0);
        avail_V_o_ap_vld : OUT STD_LOGIC;
        side_V : IN STD_LOGIC_VECTOR (7 downto 0);
        pp_tile_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        pp_tile_V_ce0 : OUT STD_LOGIC;
        pp_tile_V_we0 : OUT STD_LOGIC;
        pp_tile_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        pp_tile_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        pp_rot_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        pp_rot_V_ce0 : OUT STD_LOGIC;
        pp_rot_V_we0 : OUT STD_LOGIC;
        pp_rot_V_d0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        pp_rot_V_q0 : IN STD_LOGIC_VECTOR (1 downto 0);
        tiles_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        tiles_V_ce0 : OUT STD_LOGIC;
        tiles_V_q0 : IN STD_LOGIC_VECTOR (3 downto 0);
        colours_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        colours_V_ce0 : OUT STD_LOGIC;
        colours_V_q0 : IN STD_LOGIC_VECTOR (35 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component check IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_V : IN STD_LOGIC_VECTOR (7 downto 0);
        side_V : IN STD_LOGIC_VECTOR (7 downto 0);
        pp_tile_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        pp_tile_V_ce0 : OUT STD_LOGIC;
        pp_tile_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        pp_tile_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        pp_tile_V_ce1 : OUT STD_LOGIC;
        pp_tile_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        pp_rot_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        pp_rot_V_ce0 : OUT STD_LOGIC;
        pp_rot_V_q0 : IN STD_LOGIC_VECTOR (1 downto 0);
        pp_rot_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        pp_rot_V_ce1 : OUT STD_LOGIC;
        pp_rot_V_q1 : IN STD_LOGIC_VECTOR (1 downto 0);
        tiles_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        tiles_V_ce0 : OUT STD_LOGIC;
        tiles_V_q0 : IN STD_LOGIC_VECTOR (3 downto 0);
        tiles_V_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        tiles_V_ce1 : OUT STD_LOGIC;
        tiles_V_q1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component toplevel_colours_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (35 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (35 downto 0) );
    end component;


    component toplevel_pp_tile_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component toplevel_pp_rot_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (1 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component toplevel_tiles_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (3 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;



begin
    colours_V_U : component toplevel_colours_V
    generic map (
        DataWidth => 36,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => colours_V_address0,
        ce0 => colours_V_ce0,
        we0 => colours_V_we0,
        d0 => colours_V_d0,
        q0 => colours_V_q0);

    pp_tile_V_U : component toplevel_pp_tile_V
    generic map (
        DataWidth => 8,
        AddressRange => 36,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => pp_tile_V_address0,
        ce0 => pp_tile_V_ce0,
        we0 => pp_tile_V_we0,
        d0 => pp_tile_V_d0,
        q0 => pp_tile_V_q0,
        address1 => pp_tile_V_address1,
        ce1 => pp_tile_V_ce1,
        q1 => pp_tile_V_q1);

    pp_rot_V_U : component toplevel_pp_rot_V
    generic map (
        DataWidth => 2,
        AddressRange => 36,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => pp_rot_V_address0,
        ce0 => pp_rot_V_ce0,
        we0 => pp_rot_V_we0,
        d0 => pp_rot_V_d0,
        q0 => pp_rot_V_q0,
        address1 => pp_rot_V_address1,
        ce1 => pp_rot_V_ce1,
        q1 => pp_rot_V_q1);

    tiles_V_U : component toplevel_tiles_V
    generic map (
        DataWidth => 4,
        AddressRange => 144,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => tiles_V_address0,
        ce0 => tiles_V_ce0,
        we0 => tiles_V_we0,
        d0 => tiles_V_d0,
        q0 => tiles_V_q0,
        address1 => tiles_V_address1,
        ce1 => tiles_V_ce1,
        q1 => tiles_V_q1);

    grp_backtrack_fu_344 : component backtrack
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_backtrack_fu_344_ap_start,
        ap_done => grp_backtrack_fu_344_ap_done,
        ap_idle => grp_backtrack_fu_344_ap_idle,
        ap_ready => grp_backtrack_fu_344_ap_ready,
        cp_V_i => grp_backtrack_fu_344_cp_V_i,
        cp_V_o => grp_backtrack_fu_344_cp_V_o,
        cp_V_o_ap_vld => grp_backtrack_fu_344_cp_V_o_ap_vld,
        pp_rot_V_address0 => grp_backtrack_fu_344_pp_rot_V_address0,
        pp_rot_V_ce0 => grp_backtrack_fu_344_pp_rot_V_ce0,
        pp_rot_V_we0 => grp_backtrack_fu_344_pp_rot_V_we0,
        pp_rot_V_d0 => grp_backtrack_fu_344_pp_rot_V_d0,
        pp_rot_V_q0 => grp_backtrack_fu_344_pp_rot_V_q0,
        pp_rot_V_address1 => grp_backtrack_fu_344_pp_rot_V_address1,
        pp_rot_V_ce1 => grp_backtrack_fu_344_pp_rot_V_ce1,
        pp_rot_V_q1 => grp_backtrack_fu_344_pp_rot_V_q1,
        pp_tile_V_address0 => grp_backtrack_fu_344_pp_tile_V_address0,
        pp_tile_V_ce0 => grp_backtrack_fu_344_pp_tile_V_ce0,
        pp_tile_V_we0 => grp_backtrack_fu_344_pp_tile_V_we0,
        pp_tile_V_d0 => grp_backtrack_fu_344_pp_tile_V_d0,
        pp_tile_V_q0 => grp_backtrack_fu_344_pp_tile_V_q0,
        pp_tile_V_address1 => grp_backtrack_fu_344_pp_tile_V_address1,
        pp_tile_V_ce1 => grp_backtrack_fu_344_pp_tile_V_ce1,
        pp_tile_V_q1 => grp_backtrack_fu_344_pp_tile_V_q1,
        avail_V_i => grp_backtrack_fu_344_avail_V_i,
        avail_V_o => grp_backtrack_fu_344_avail_V_o,
        avail_V_o_ap_vld => grp_backtrack_fu_344_avail_V_o_ap_vld,
        side_V => grp_backtrack_fu_344_side_V,
        tiles_V_address0 => grp_backtrack_fu_344_tiles_V_address0,
        tiles_V_ce0 => grp_backtrack_fu_344_tiles_V_ce0,
        tiles_V_q0 => grp_backtrack_fu_344_tiles_V_q0,
        tiles_V_address1 => grp_backtrack_fu_344_tiles_V_address1,
        tiles_V_ce1 => grp_backtrack_fu_344_tiles_V_ce1,
        tiles_V_q1 => grp_backtrack_fu_344_tiles_V_q1,
        colours_V_address0 => grp_backtrack_fu_344_colours_V_address0,
        colours_V_ce0 => grp_backtrack_fu_344_colours_V_ce0,
        colours_V_q0 => grp_backtrack_fu_344_colours_V_q0,
        ntiles_V => grp_backtrack_fu_344_ntiles_V,
        terminate_i => grp_backtrack_fu_344_terminate_i,
        terminate_o => grp_backtrack_fu_344_terminate_o,
        terminate_o_ap_vld => grp_backtrack_fu_344_terminate_o_ap_vld);

    grp_right_r_fu_366 : component right_r
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_right_r_fu_366_ap_start,
        ap_done => grp_right_r_fu_366_ap_done,
        ap_idle => grp_right_r_fu_366_ap_idle,
        ap_ready => grp_right_r_fu_366_ap_ready,
        cp_V => grp_right_r_fu_366_cp_V,
        pp_rot_V_address0 => grp_right_r_fu_366_pp_rot_V_address0,
        pp_rot_V_ce0 => grp_right_r_fu_366_pp_rot_V_ce0,
        pp_rot_V_we0 => grp_right_r_fu_366_pp_rot_V_we0,
        pp_rot_V_d0 => grp_right_r_fu_366_pp_rot_V_d0,
        pp_rot_V_q0 => grp_right_r_fu_366_pp_rot_V_q0,
        pp_tile_V_address0 => grp_right_r_fu_366_pp_tile_V_address0,
        pp_tile_V_ce0 => grp_right_r_fu_366_pp_tile_V_ce0,
        pp_tile_V_we0 => grp_right_r_fu_366_pp_tile_V_we0,
        pp_tile_V_d0 => grp_right_r_fu_366_pp_tile_V_d0,
        pp_tile_V_q0 => grp_right_r_fu_366_pp_tile_V_q0,
        avail_V_i => grp_right_r_fu_366_avail_V_i,
        avail_V_o => grp_right_r_fu_366_avail_V_o,
        avail_V_o_ap_vld => grp_right_r_fu_366_avail_V_o_ap_vld,
        side_V => grp_right_r_fu_366_side_V,
        tiles_V_address0 => grp_right_r_fu_366_tiles_V_address0,
        tiles_V_ce0 => grp_right_r_fu_366_tiles_V_ce0,
        tiles_V_q0 => grp_right_r_fu_366_tiles_V_q0,
        colours_V_address0 => grp_right_r_fu_366_colours_V_address0,
        colours_V_ce0 => grp_right_r_fu_366_colours_V_ce0,
        colours_V_q0 => grp_right_r_fu_366_colours_V_q0,
        ntiles_V => grp_right_r_fu_366_ntiles_V,
        ap_return => grp_right_r_fu_366_ap_return);

    grp_down_fu_386 : component down
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_down_fu_386_ap_start,
        ap_done => grp_down_fu_386_ap_done,
        ap_idle => grp_down_fu_386_ap_idle,
        ap_ready => grp_down_fu_386_ap_ready,
        ntiles_V => grp_down_fu_386_ntiles_V,
        cp_V_i => grp_down_fu_386_cp_V_i,
        cp_V_o => grp_down_fu_386_cp_V_o,
        cp_V_o_ap_vld => grp_down_fu_386_cp_V_o_ap_vld,
        avail_V_i => grp_down_fu_386_avail_V_i,
        avail_V_o => grp_down_fu_386_avail_V_o,
        avail_V_o_ap_vld => grp_down_fu_386_avail_V_o_ap_vld,
        side_V => grp_down_fu_386_side_V,
        pp_tile_V_address0 => grp_down_fu_386_pp_tile_V_address0,
        pp_tile_V_ce0 => grp_down_fu_386_pp_tile_V_ce0,
        pp_tile_V_we0 => grp_down_fu_386_pp_tile_V_we0,
        pp_tile_V_d0 => grp_down_fu_386_pp_tile_V_d0,
        pp_tile_V_q0 => grp_down_fu_386_pp_tile_V_q0,
        pp_rot_V_address0 => grp_down_fu_386_pp_rot_V_address0,
        pp_rot_V_ce0 => grp_down_fu_386_pp_rot_V_ce0,
        pp_rot_V_we0 => grp_down_fu_386_pp_rot_V_we0,
        pp_rot_V_d0 => grp_down_fu_386_pp_rot_V_d0,
        pp_rot_V_q0 => grp_down_fu_386_pp_rot_V_q0,
        tiles_V_address0 => grp_down_fu_386_tiles_V_address0,
        tiles_V_ce0 => grp_down_fu_386_tiles_V_ce0,
        tiles_V_q0 => grp_down_fu_386_tiles_V_q0,
        colours_V_address0 => grp_down_fu_386_colours_V_address0,
        colours_V_ce0 => grp_down_fu_386_colours_V_ce0,
        colours_V_q0 => grp_down_fu_386_colours_V_q0,
        ap_return => grp_down_fu_386_ap_return);

    grp_check_fu_406 : component check
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_check_fu_406_ap_start,
        ap_done => grp_check_fu_406_ap_done,
        ap_idle => grp_check_fu_406_ap_idle,
        ap_ready => grp_check_fu_406_ap_ready,
        p_V => grp_check_fu_406_p_V,
        side_V => grp_check_fu_406_side_V,
        pp_tile_V_address0 => grp_check_fu_406_pp_tile_V_address0,
        pp_tile_V_ce0 => grp_check_fu_406_pp_tile_V_ce0,
        pp_tile_V_q0 => grp_check_fu_406_pp_tile_V_q0,
        pp_tile_V_address1 => grp_check_fu_406_pp_tile_V_address1,
        pp_tile_V_ce1 => grp_check_fu_406_pp_tile_V_ce1,
        pp_tile_V_q1 => grp_check_fu_406_pp_tile_V_q1,
        pp_rot_V_address0 => grp_check_fu_406_pp_rot_V_address0,
        pp_rot_V_ce0 => grp_check_fu_406_pp_rot_V_ce0,
        pp_rot_V_q0 => grp_check_fu_406_pp_rot_V_q0,
        pp_rot_V_address1 => grp_check_fu_406_pp_rot_V_address1,
        pp_rot_V_ce1 => grp_check_fu_406_pp_rot_V_ce1,
        pp_rot_V_q1 => grp_check_fu_406_pp_rot_V_q1,
        tiles_V_address0 => grp_check_fu_406_tiles_V_address0,
        tiles_V_ce0 => grp_check_fu_406_tiles_V_ce0,
        tiles_V_q0 => grp_check_fu_406_tiles_V_q0,
        tiles_V_address1 => grp_check_fu_406_tiles_V_address1,
        tiles_V_ce1 => grp_check_fu_406_tiles_V_ce1,
        tiles_V_q1 => grp_check_fu_406_tiles_V_q1,
        ap_return => grp_check_fu_406_ap_return);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- grp_backtrack_fu_344_ap_start_ap_start_reg assign process. --
    grp_backtrack_fu_344_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_backtrack_fu_344_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_ST_st14_fsm_13 = ap_CS_fsm) or (ap_ST_st18_fsm_17 = ap_CS_fsm))) then 
                    grp_backtrack_fu_344_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_backtrack_fu_344_ap_ready)) then 
                    grp_backtrack_fu_344_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- grp_check_fu_406_ap_start_ap_start_reg assign process. --
    grp_check_fu_406_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_check_fu_406_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_ST_st16_fsm_15 = ap_CS_fsm) or (ap_ST_st31_fsm_30 = ap_CS_fsm))) then 
                    grp_check_fu_406_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_check_fu_406_ap_ready)) then 
                    grp_check_fu_406_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- grp_down_fu_386_ap_start_ap_start_reg assign process. --
    grp_down_fu_386_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_down_fu_386_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_ST_st12_fsm_11 = ap_CS_fsm)) then 
                    grp_down_fu_386_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_down_fu_386_ap_ready)) then 
                    grp_down_fu_386_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- grp_right_r_fu_366_ap_start_ap_start_reg assign process. --
    grp_right_r_fu_366_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_right_r_fu_366_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_ST_st27_fsm_26 = ap_CS_fsm)) then 
                    grp_right_r_fu_366_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_right_r_fu_366_ap_ready)) then 
                    grp_right_r_fu_366_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- avail_V assign process. --
    avail_V_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st30_fsm_29 = ap_CS_fsm)) then 
                avail_V <= tmp_22_i_i_fu_889_p2;
            elsif (((ap_ST_st7_fsm_6 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_2_i_fu_609_p2))) then 
                avail_V <= tmp_3_fu_673_p3;
            elsif (((ap_ST_st2_fsm_1 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond2_i_fu_458_p2))) then 
                avail_V <= tmp_i_13_fu_480_p2;
            elsif ((((ap_ST_st12_fsm_11 = ap_CS_fsm) and (ap_const_logic_1 = grp_down_fu_386_avail_V_o_ap_vld)) or ((ap_ST_st13_fsm_12 = ap_CS_fsm) and (ap_const_logic_1 = grp_down_fu_386_avail_V_o_ap_vld)))) then 
                avail_V <= grp_down_fu_386_avail_V_o;
            elsif ((((ap_ST_st27_fsm_26 = ap_CS_fsm) and (ap_const_logic_1 = grp_right_r_fu_366_avail_V_o_ap_vld)) or ((ap_ST_st28_fsm_27 = ap_CS_fsm) and (ap_const_logic_1 = grp_right_r_fu_366_avail_V_o_ap_vld)))) then 
                avail_V <= grp_right_r_fu_366_avail_V_o;
            elsif ((((ap_ST_st14_fsm_13 = ap_CS_fsm) and (ap_const_logic_1 = grp_backtrack_fu_344_avail_V_o_ap_vld)) or ((ap_ST_st15_fsm_14 = ap_CS_fsm) and (ap_const_logic_1 = grp_backtrack_fu_344_avail_V_o_ap_vld)) or ((ap_ST_st18_fsm_17 = ap_CS_fsm) and (ap_const_logic_1 = grp_backtrack_fu_344_avail_V_o_ap_vld)) or ((ap_ST_st19_fsm_18 = ap_CS_fsm) and (ap_const_logic_1 = grp_backtrack_fu_344_avail_V_o_ap_vld)))) then 
                avail_V <= grp_backtrack_fu_344_avail_V_o;
            end if; 
        end if;
    end process;

    -- cp_V assign process. --
    cp_V_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st29_fsm_28 = ap_CS_fsm)) then 
                cp_V <= tmp_23_i_i_fu_860_p2;
            elsif ((ap_ST_st1_fsm_0 = ap_CS_fsm)) then 
                cp_V <= ap_const_lv8_0;
            elsif ((((ap_ST_st12_fsm_11 = ap_CS_fsm) and (ap_const_logic_1 = grp_down_fu_386_cp_V_o_ap_vld)) or ((ap_ST_st13_fsm_12 = ap_CS_fsm) and (ap_const_logic_1 = grp_down_fu_386_cp_V_o_ap_vld)))) then 
                cp_V <= grp_down_fu_386_cp_V_o;
            elsif ((((ap_ST_st14_fsm_13 = ap_CS_fsm) and (ap_const_logic_1 = grp_backtrack_fu_344_cp_V_o_ap_vld)) or ((ap_const_logic_1 = grp_backtrack_fu_344_cp_V_o_ap_vld) and (ap_ST_st15_fsm_14 = ap_CS_fsm)) or ((ap_ST_st18_fsm_17 = ap_CS_fsm) and (ap_const_logic_1 = grp_backtrack_fu_344_cp_V_o_ap_vld)) or ((ap_const_logic_1 = grp_backtrack_fu_344_cp_V_o_ap_vld) and (ap_ST_st19_fsm_18 = ap_CS_fsm)))) then 
                cp_V <= grp_backtrack_fu_344_cp_V_o;
            end if; 
        end if;
    end process;

    -- e_i_reg_310 assign process. --
    e_i_reg_310_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st7_fsm_6 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_2_i_fu_609_p2)))) then 
                e_i_reg_310 <= ap_const_lv3_0;
            elsif ((ap_ST_st10_fsm_9 = ap_CS_fsm)) then 
                e_i_reg_310 <= e_reg_974;
            end if; 
        end if;
    end process;

    -- op2_assign_reg_298 assign process. --
    op2_assign_reg_298_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st8_fsm_7 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond_i4_fu_687_p2)))) then 
                op2_assign_reg_298 <= t_reg_955;
            elsif (((ap_ST_st5_fsm_4 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_1_fu_549_p2))) then 
                op2_assign_reg_298 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- p_i_reg_253 assign process. --
    p_i_reg_253_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond2_i_fu_458_p2)))) then 
                p_i_reg_253 <= ap_const_lv4_0;
            elsif (((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond3_i_fu_492_p2))) then 
                p_i_reg_253 <= c_V_fu_498_p2;
            end if; 
        end if;
    end process;

    -- seq assign process. --
    seq_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st20_fsm_19 = ap_CS_fsm) and (((ap_const_lv1_0 = seq_load_reg_993) and (ap_const_lv1_0 = terminate)) or ((ap_const_lv1_0 = terminate) and (ap_const_lv1_0 = or_cond_i_fu_757_p2))) and not(ap_sig_bdd_183))) then 
                seq <= ap_const_lv1_0;
            elsif ((((ap_ST_st7_fsm_6 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_2_i_fu_609_p2)) or ((ap_ST_st22_fsm_21 = ap_CS_fsm) and (ap_const_lv1_0 = terminate_load_reg_989) and (ap_const_lv1_0 = terminate_load_1_reg_1011)) or ((ap_ST_st32_fsm_31 = ap_CS_fsm) and not(((ap_const_lv1_0 = seq_load_2_reg_1043) and (ap_const_logic_0 = grp_check_fu_406_ap_done))) and (not((ap_const_lv1_0 = seq_load_2_reg_1043)) or not((ap_const_lv1_0 = or_cond5_demorgan_i_fu_907_p2)))))) then 
                seq <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    -- t_V_2_reg_287 assign process. --
    t_V_2_reg_287_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st5_fsm_4 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_1_fu_549_p2)))) then 
                t_V_2_reg_287 <= ap_const_lv3_0;
            elsif (((ap_ST_st6_fsm_5 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond1_fu_561_p2) and not(ap_sig_bdd_132))) then 
                t_V_2_reg_287 <= e_V_fu_567_p2;
            end if; 
        end if;
    end process;

    -- t_V_3_reg_321 assign process. --
    t_V_3_reg_321_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st24_fsm_23 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond_fu_811_p2)))) then 
                t_V_3_reg_321 <= p_V_reg_1028;
            elsif (((ap_ST_st22_fsm_21 = ap_CS_fsm) and (ap_const_lv1_0 = terminate_load_reg_989) and (ap_const_lv1_0 = terminate_load_1_reg_1011) and (ap_const_lv1_0 = tmp_s_fu_781_p2) and not((ap_const_lv1_0 = tmp_4_fu_787_p2)))) then 
                t_V_3_reg_321 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    -- t_V_4_reg_332 assign process. --
    t_V_4_reg_332_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st23_fsm_22 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_4_reg_1021)) and not((ap_const_lv1_0 = tmp_6_fu_793_p2)))) then 
                t_V_4_reg_332 <= ap_const_lv3_0;
            elsif (((ap_ST_st26_fsm_25 = ap_CS_fsm) and not((output_V_V_full_n = ap_const_logic_0)))) then 
                t_V_4_reg_332 <= e_V_1_reg_1050;
            end if; 
        end if;
    end process;

    -- t_V_5_reg_242 assign process. --
    t_V_5_reg_242_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond2_i_fu_458_p2))) then 
                t_V_5_reg_242 <= t_V_6_fu_464_p2;
            elsif ((ap_ST_st1_fsm_0 = ap_CS_fsm)) then 
                t_V_5_reg_242 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    -- t_V_7_reg_264 assign process. --
    t_V_7_reg_264_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond3_i_fu_492_p2)))) then 
                t_V_7_reg_264 <= ap_const_lv6_0;
            elsif (((ap_ST_st4_fsm_3 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond_i_fu_509_p2) and not(ap_sig_bdd_120))) then 
                t_V_7_reg_264 <= p_V_1_fu_515_p2;
            end if; 
        end if;
    end process;

    -- t_V_reg_275 assign process. --
    t_V_reg_275_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st6_fsm_5 = ap_CS_fsm) and not(ap_sig_bdd_132) and not((ap_const_lv1_0 = exitcond1_fu_561_p2)))) then 
                t_V_reg_275 <= t_V_1_reg_939;
            elsif (((ap_ST_st4_fsm_3 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond_i_fu_509_p2)) and not(ap_sig_bdd_120))) then 
                t_V_reg_275 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    -- terminate assign process. --
    terminate_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st30_fsm_29 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_14_reg_1085)))) then 
                terminate <= ap_const_lv1_1;
            elsif ((ap_ST_st1_fsm_0 = ap_CS_fsm)) then 
                terminate <= ap_const_lv1_0;
            elsif ((((ap_ST_st14_fsm_13 = ap_CS_fsm) and (ap_const_logic_1 = grp_backtrack_fu_344_terminate_o_ap_vld)) or ((ap_ST_st15_fsm_14 = ap_CS_fsm) and (ap_const_logic_1 = grp_backtrack_fu_344_terminate_o_ap_vld)) or ((ap_ST_st18_fsm_17 = ap_CS_fsm) and (ap_const_logic_1 = grp_backtrack_fu_344_terminate_o_ap_vld)) or ((ap_ST_st19_fsm_18 = ap_CS_fsm) and (ap_const_logic_1 = grp_backtrack_fu_344_terminate_o_ap_vld)))) then 
                terminate <= grp_backtrack_fu_344_terminate_o;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st9_fsm_8 = ap_CS_fsm)) then
                colours_V_addr_1_reg_984 <= tmp_10_i_fu_720_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st24_fsm_23 = ap_CS_fsm)) then
                e_V_1_reg_1050 <= e_V_1_fu_817_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st8_fsm_7 = ap_CS_fsm)) then
                e_reg_974 <= e_fu_693_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st4_fsm_3 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond_i_fu_509_p2)) and not(ap_sig_bdd_120))) then
                ntiles_V <= ntiles_V_assign_fu_537_p2;
                side_V <= tmp_7_fu_527_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st23_fsm_22 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_4_reg_1021)))) then
                p_V_reg_1028 <= p_V_fu_799_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st23_fsm_22 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_4_reg_1021)) and not((ap_const_lv1_0 = tmp_6_fu_793_p2)))) then
                pp_rot_V_addr_1_reg_1038 <= tmp_i3_fu_805_p1(6 - 1 downto 0);
                pp_tile_V_addr_1_reg_1033 <= tmp_i3_fu_805_p1(6 - 1 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st29_fsm_28 = ap_CS_fsm)) then
                pp_tile_V_addr_2_reg_1080 <= tmp_i_i1_fu_856_p1(6 - 1 downto 0);
                tmp_14_reg_1085 <= tmp_23_i_i_fu_860_p2(7 downto 7);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st7_fsm_6 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_2_i_fu_609_p2)))) then
                r_V_1_reg_960 <= r_V_1_fu_655_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st23_fsm_22 = ap_CS_fsm) and ((ap_const_lv1_0 = tmp_4_reg_1021) or (ap_const_lv1_0 = tmp_6_fu_793_p2)))) then
                seq_load_2_reg_1043 <= seq;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st11_fsm_10 = ap_CS_fsm) and (ap_const_lv1_0 = grp_load_fu_433_p1))) then
                seq_load_reg_993 <= seq;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st5_fsm_4 = ap_CS_fsm)) then
                t_V_1_reg_939 <= t_V_1_fu_555_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st28_fsm_27 = ap_CS_fsm) and not((ap_const_logic_0 = grp_right_r_fu_366_ap_done)))) then
                t_V_8_reg_1073 <= cp_V;
                terminate_load_3_reg_1065 <= terminate;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st7_fsm_6 = ap_CS_fsm)) then
                t_reg_955 <= t_fu_615_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st20_fsm_19 = ap_CS_fsm) and not(ap_sig_bdd_183) and ((ap_const_lv1_0 = seq_load_reg_993) or (ap_const_lv1_0 = or_cond_i_fu_757_p2)))) then
                terminate_load_1_reg_1011 <= terminate;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st11_fsm_10 = ap_CS_fsm)) then
                terminate_load_reg_989 <= terminate;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st24_fsm_23 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond_fu_811_p2))) then
                tmp_15_reg_1055 <= tmp_15_fu_823_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st22_fsm_21 = ap_CS_fsm) and (ap_const_lv1_0 = terminate_load_reg_989) and (ap_const_lv1_0 = terminate_load_1_reg_1011) and (ap_const_lv1_0 = tmp_s_fu_781_p2))) then
                tmp_4_reg_1021 <= tmp_4_fu_787_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st21_fsm_20 = ap_CS_fsm) and (ap_const_lv1_0 = seq) and not(ap_sig_bdd_503))) then
                tmp_V_4_fu_126 <= input_V_V_dout;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (output_V_V_full_n , terminate , seq , ap_CS_fsm , exitcond_i_fu_509_p2 , ap_sig_bdd_120 , exitcond1_fu_561_p2 , ap_sig_bdd_132 , tmp_2_i_fu_609_p2 , exitcond_i4_fu_687_p2 , grp_load_fu_433_p1 , terminate_load_reg_989 , seq_load_reg_993 , terminate_load_1_reg_1011 , or_cond_i_fu_757_p2 , ap_sig_bdd_183 , tmp_4_reg_1021 , tmp_s_fu_781_p2 , tmp_6_fu_793_p2 , seq_load_2_reg_1043 , exitcond_fu_811_p2 , grp_right_r_fu_366_ap_done , grp_backtrack_fu_344_ap_done , grp_down_fu_386_ap_done , grp_down_fu_386_ap_return , grp_check_fu_406_ap_done , grp_check_fu_406_ap_return , exitcond2_i_fu_458_p2 , exitcond3_i_fu_492_p2 , tmp_1_fu_549_p2 , ap_sig_bdd_503 , or_cond5_demorgan_i_fu_907_p2 , or_cond_demorgan_i_fu_850_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when ap_ST_st2_fsm_1 => 
                if ((ap_const_lv1_0 = exitcond2_i_fu_458_p2)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if ((ap_const_lv1_0 = exitcond3_i_fu_492_p2)) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st4_fsm_3 => 
                if ((not((ap_const_lv1_0 = exitcond_i_fu_509_p2)) and not(ap_sig_bdd_120))) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                elsif (((ap_const_lv1_0 = exitcond_i_fu_509_p2) and not(ap_sig_bdd_120))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st5_fsm_4 => 
                if ((ap_const_lv1_0 = tmp_1_fu_549_p2)) then
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                end if;
            when ap_ST_st6_fsm_5 => 
                if (((ap_const_lv1_0 = exitcond1_fu_561_p2) and not(ap_sig_bdd_132))) then
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                elsif ((not(ap_sig_bdd_132) and not((ap_const_lv1_0 = exitcond1_fu_561_p2)))) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                end if;
            when ap_ST_st7_fsm_6 => 
                if ((ap_const_lv1_0 = tmp_2_i_fu_609_p2)) then
                    ap_NS_fsm <= ap_ST_st11_fsm_10;
                else
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                end if;
            when ap_ST_st8_fsm_7 => 
                if ((ap_const_lv1_0 = exitcond_i4_fu_687_p2)) then
                    ap_NS_fsm <= ap_ST_st9_fsm_8;
                else
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                end if;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st11_fsm_10 => 
                if (((ap_const_lv1_0 = grp_load_fu_433_p1) and (ap_const_lv1_0 = seq))) then
                    ap_NS_fsm <= ap_ST_st20_fsm_19;
                elsif (((ap_const_lv1_0 = grp_load_fu_433_p1) and not((ap_const_lv1_0 = seq)))) then
                    ap_NS_fsm <= ap_ST_st12_fsm_11;
                else
                    ap_NS_fsm <= ap_ST_st22_fsm_21;
                end if;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                if ((not((ap_const_logic_0 = grp_down_fu_386_ap_done)) and not((ap_const_lv1_0 = grp_down_fu_386_ap_return)))) then
                    ap_NS_fsm <= ap_ST_st16_fsm_15;
                elsif ((not((ap_const_logic_0 = grp_down_fu_386_ap_done)) and (ap_const_lv1_0 = grp_down_fu_386_ap_return))) then
                    ap_NS_fsm <= ap_ST_st14_fsm_13;
                else
                    ap_NS_fsm <= ap_ST_st13_fsm_12;
                end if;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                if (not((ap_const_logic_0 = grp_backtrack_fu_344_ap_done))) then
                    ap_NS_fsm <= ap_ST_st16_fsm_15;
                else
                    ap_NS_fsm <= ap_ST_st15_fsm_14;
                end if;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                if ((not((ap_const_logic_0 = grp_check_fu_406_ap_done)) and not((ap_const_lv1_0 = grp_check_fu_406_ap_return)))) then
                    ap_NS_fsm <= ap_ST_st20_fsm_19;
                elsif ((not((ap_const_logic_0 = grp_check_fu_406_ap_done)) and (ap_const_lv1_0 = grp_check_fu_406_ap_return))) then
                    ap_NS_fsm <= ap_ST_st18_fsm_17;
                else
                    ap_NS_fsm <= ap_ST_st17_fsm_16;
                end if;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                if (not((ap_const_logic_0 = grp_backtrack_fu_344_ap_done))) then
                    ap_NS_fsm <= ap_ST_st20_fsm_19;
                else
                    ap_NS_fsm <= ap_ST_st19_fsm_18;
                end if;
            when ap_ST_st20_fsm_19 => 
                if (((((ap_const_lv1_0 = seq_load_reg_993) and not((ap_const_lv1_0 = terminate))) or ((ap_const_lv1_0 = or_cond_i_fu_757_p2) and not((ap_const_lv1_0 = terminate)))) and not(ap_sig_bdd_183))) then
                    ap_NS_fsm <= ap_ST_st22_fsm_21;
                elsif (((((ap_const_lv1_0 = seq_load_reg_993) and (ap_const_lv1_0 = terminate)) or ((ap_const_lv1_0 = terminate) and (ap_const_lv1_0 = or_cond_i_fu_757_p2))) and not(ap_sig_bdd_183))) then
                    ap_NS_fsm <= ap_ST_st21_fsm_20;
                elsif ((not(ap_sig_bdd_183) and not((ap_const_lv1_0 = seq_load_reg_993)) and not((ap_const_lv1_0 = or_cond_i_fu_757_p2)))) then
                    ap_NS_fsm <= ap_ST_st12_fsm_11;
                else
                    ap_NS_fsm <= ap_ST_st20_fsm_19;
                end if;
            when ap_ST_st21_fsm_20 => 
                if (not(ap_sig_bdd_503)) then
                    ap_NS_fsm <= ap_ST_st22_fsm_21;
                else
                    ap_NS_fsm <= ap_ST_st21_fsm_20;
                end if;
            when ap_ST_st22_fsm_21 => 
                if ((not((ap_const_lv1_0 = terminate_load_reg_989)) or not((ap_const_lv1_0 = terminate_load_1_reg_1011)) or not((ap_const_lv1_0 = tmp_s_fu_781_p2)))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st23_fsm_22;
                end if;
            when ap_ST_st23_fsm_22 => 
                if ((((ap_const_lv1_0 = tmp_4_reg_1021) and not((ap_const_lv1_0 = seq))) or ((ap_const_lv1_0 = tmp_6_fu_793_p2) and not((ap_const_lv1_0 = seq))))) then
                    ap_NS_fsm <= ap_ST_st32_fsm_31;
                elsif ((((ap_const_lv1_0 = tmp_4_reg_1021) and (ap_const_lv1_0 = seq)) or ((ap_const_lv1_0 = tmp_6_fu_793_p2) and (ap_const_lv1_0 = seq)))) then
                    ap_NS_fsm <= ap_ST_st27_fsm_26;
                else
                    ap_NS_fsm <= ap_ST_st24_fsm_23;
                end if;
            when ap_ST_st24_fsm_23 => 
                if ((ap_const_lv1_0 = exitcond_fu_811_p2)) then
                    ap_NS_fsm <= ap_ST_st25_fsm_24;
                else
                    ap_NS_fsm <= ap_ST_st23_fsm_22;
                end if;
            when ap_ST_st25_fsm_24 => 
                ap_NS_fsm <= ap_ST_st26_fsm_25;
            when ap_ST_st26_fsm_25 => 
                if (not((output_V_V_full_n = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st24_fsm_23;
                else
                    ap_NS_fsm <= ap_ST_st26_fsm_25;
                end if;
            when ap_ST_st27_fsm_26 => 
                ap_NS_fsm <= ap_ST_st28_fsm_27;
            when ap_ST_st28_fsm_27 => 
                if ((not((ap_const_logic_0 = grp_right_r_fu_366_ap_done)) and not((ap_const_lv1_0 = or_cond_demorgan_i_fu_850_p2)))) then
                    ap_NS_fsm <= ap_ST_st31_fsm_30;
                elsif ((not((ap_const_logic_0 = grp_right_r_fu_366_ap_done)) and (ap_const_lv1_0 = or_cond_demorgan_i_fu_850_p2))) then
                    ap_NS_fsm <= ap_ST_st29_fsm_28;
                else
                    ap_NS_fsm <= ap_ST_st28_fsm_27;
                end if;
            when ap_ST_st29_fsm_28 => 
                ap_NS_fsm <= ap_ST_st30_fsm_29;
            when ap_ST_st30_fsm_29 => 
                ap_NS_fsm <= ap_ST_st27_fsm_26;
            when ap_ST_st31_fsm_30 => 
                ap_NS_fsm <= ap_ST_st32_fsm_31;
            when ap_ST_st32_fsm_31 => 
                if ((not(((ap_const_lv1_0 = seq_load_2_reg_1043) and (ap_const_logic_0 = grp_check_fu_406_ap_done))) and (not((ap_const_lv1_0 = seq_load_2_reg_1043)) or not((ap_const_lv1_0 = or_cond5_demorgan_i_fu_907_p2))))) then
                    ap_NS_fsm <= ap_ST_st11_fsm_10;
                elsif (((ap_const_lv1_0 = seq_load_2_reg_1043) and not(((ap_const_lv1_0 = seq_load_2_reg_1043) and (ap_const_logic_0 = grp_check_fu_406_ap_done))) and (ap_const_lv1_0 = or_cond5_demorgan_i_fu_907_p2))) then
                    ap_NS_fsm <= ap_ST_st27_fsm_26;
                else
                    ap_NS_fsm <= ap_ST_st32_fsm_31;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;

    -- ap_sig_bdd_120 assign process. --
    ap_sig_bdd_120_assign_proc : process(input_V_V_empty_n, exitcond_i_fu_509_p2)
    begin
                ap_sig_bdd_120 <= ((input_V_V_empty_n = ap_const_logic_0) and not((ap_const_lv1_0 = exitcond_i_fu_509_p2)));
    end process;


    -- ap_sig_bdd_132 assign process. --
    ap_sig_bdd_132_assign_proc : process(input_V_V_empty_n, exitcond1_fu_561_p2)
    begin
                ap_sig_bdd_132 <= ((input_V_V_empty_n = ap_const_logic_0) and (ap_const_lv1_0 = exitcond1_fu_561_p2));
    end process;


    -- ap_sig_bdd_183 assign process. --
    ap_sig_bdd_183_assign_proc : process(output_V_V_full_n, terminate, seq_load_reg_993, or_cond_i_fu_757_p2)
    begin
                ap_sig_bdd_183 <= (((output_V_V_full_n = ap_const_logic_0) and (((ap_const_lv1_0 = seq_load_reg_993) and (ap_const_lv1_0 = terminate)) or ((ap_const_lv1_0 = terminate) and (ap_const_lv1_0 = or_cond_i_fu_757_p2)))) or ((output_V_V_full_n = ap_const_logic_0) and (((ap_const_lv1_0 = seq_load_reg_993) and not((ap_const_lv1_0 = terminate))) or ((ap_const_lv1_0 = or_cond_i_fu_757_p2) and not((ap_const_lv1_0 = terminate))))));
    end process;


    -- ap_sig_bdd_503 assign process. --
    ap_sig_bdd_503_assign_proc : process(input_V_V_empty_n, seq)
    begin
                ap_sig_bdd_503 <= ((input_V_V_empty_n = ap_const_logic_0) and (ap_const_lv1_0 = seq));
    end process;

    c_V_fu_498_p2 <= std_logic_vector(unsigned(p_i_reg_253) + unsigned(ap_const_lv4_1));

    -- colours_V_address0 assign process. --
    colours_V_address0_assign_proc : process(ap_CS_fsm, colours_V_addr_1_reg_984, grp_backtrack_fu_344_colours_V_address0, grp_right_r_fu_366_colours_V_address0, grp_down_fu_386_colours_V_address0, tmp_9_i_fu_504_p1, tmp_10_i_fu_720_p1)
    begin
        if ((ap_ST_st10_fsm_9 = ap_CS_fsm)) then 
            colours_V_address0 <= colours_V_addr_1_reg_984;
        elsif ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            colours_V_address0 <= tmp_9_i_fu_504_p1(4 - 1 downto 0);
        elsif ((ap_ST_st9_fsm_8 = ap_CS_fsm)) then 
            colours_V_address0 <= tmp_10_i_fu_720_p1(4 - 1 downto 0);
        elsif ((ap_ST_st13_fsm_12 = ap_CS_fsm)) then 
            colours_V_address0 <= grp_down_fu_386_colours_V_address0;
        elsif ((ap_ST_st28_fsm_27 = ap_CS_fsm)) then 
            colours_V_address0 <= grp_right_r_fu_366_colours_V_address0;
        elsif (((ap_ST_st15_fsm_14 = ap_CS_fsm) or (ap_ST_st19_fsm_18 = ap_CS_fsm))) then 
            colours_V_address0 <= grp_backtrack_fu_344_colours_V_address0;
        else 
            colours_V_address0 <= "XXXX";
        end if; 
    end process;


    -- colours_V_ce0 assign process. --
    colours_V_ce0_assign_proc : process(ap_CS_fsm, grp_backtrack_fu_344_colours_V_ce0, grp_right_r_fu_366_colours_V_ce0, grp_down_fu_386_colours_V_ce0)
    begin
        if (((ap_ST_st3_fsm_2 = ap_CS_fsm) or (ap_ST_st9_fsm_8 = ap_CS_fsm) or (ap_ST_st10_fsm_9 = ap_CS_fsm))) then 
            colours_V_ce0 <= ap_const_logic_1;
        elsif ((ap_ST_st13_fsm_12 = ap_CS_fsm)) then 
            colours_V_ce0 <= grp_down_fu_386_colours_V_ce0;
        elsif ((ap_ST_st28_fsm_27 = ap_CS_fsm)) then 
            colours_V_ce0 <= grp_right_r_fu_366_colours_V_ce0;
        elsif (((ap_ST_st15_fsm_14 = ap_CS_fsm) or (ap_ST_st19_fsm_18 = ap_CS_fsm))) then 
            colours_V_ce0 <= grp_backtrack_fu_344_colours_V_ce0;
        else 
            colours_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- colours_V_d0 assign process. --
    colours_V_d0_assign_proc : process(ap_CS_fsm, tmp_11_i_fu_725_p2)
    begin
        if ((ap_ST_st10_fsm_9 = ap_CS_fsm)) then 
            colours_V_d0 <= tmp_11_i_fu_725_p2;
        elsif ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            colours_V_d0 <= ap_const_lv36_0;
        else 
            colours_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- colours_V_we0 assign process. --
    colours_V_we0_assign_proc : process(ap_CS_fsm, exitcond3_i_fu_492_p2)
    begin
        if ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond3_i_fu_492_p2)) or (ap_ST_st10_fsm_9 = ap_CS_fsm))) then 
            colours_V_we0 <= ap_const_logic_1;
        else 
            colours_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    e_V_1_fu_817_p2 <= std_logic_vector(unsigned(t_V_4_reg_332) + unsigned(ap_const_lv3_1));
    e_V_fu_567_p2 <= std_logic_vector(unsigned(t_V_2_reg_287) + unsigned(ap_const_lv3_1));
    e_fu_693_p2 <= std_logic_vector(unsigned(e_i_reg_310) + unsigned(ap_const_lv3_1));
    exitcond1_fu_561_p2 <= "1" when (t_V_2_reg_287 = ap_const_lv3_4) else "0";
    exitcond2_i_fu_458_p2 <= "1" when (t_V_5_reg_242 = ap_const_lv6_24) else "0";
    exitcond3_i_fu_492_p2 <= "1" when (p_i_reg_253 = ap_const_lv4_A) else "0";
    exitcond_fu_811_p2 <= "1" when (t_V_4_reg_332 = ap_const_lv3_4) else "0";
    exitcond_i4_fu_687_p2 <= "1" when (e_i_reg_310 = ap_const_lv3_4) else "0";
    exitcond_i_fu_509_p2 <= "1" when (t_V_7_reg_264 = ap_const_lv6_24) else "0";
    grp_backtrack_fu_344_ap_start <= grp_backtrack_fu_344_ap_start_ap_start_reg;
    grp_backtrack_fu_344_avail_V_i <= avail_V;
    grp_backtrack_fu_344_colours_V_q0 <= colours_V_q0;
    grp_backtrack_fu_344_cp_V_i <= cp_V;
    grp_backtrack_fu_344_ntiles_V <= ntiles_V;
    grp_backtrack_fu_344_pp_rot_V_q0 <= pp_rot_V_q0;
    grp_backtrack_fu_344_pp_rot_V_q1 <= pp_rot_V_q1;
    grp_backtrack_fu_344_pp_tile_V_q0 <= pp_tile_V_q0;
    grp_backtrack_fu_344_pp_tile_V_q1 <= pp_tile_V_q1;
    grp_backtrack_fu_344_side_V <= side_V;
    grp_backtrack_fu_344_terminate_i <= terminate;
    grp_backtrack_fu_344_tiles_V_q0 <= tiles_V_q0;
    grp_backtrack_fu_344_tiles_V_q1 <= tiles_V_q1;
    grp_check_fu_406_ap_start <= grp_check_fu_406_ap_start_ap_start_reg;

    -- grp_check_fu_406_p_V assign process. --
    grp_check_fu_406_p_V_assign_proc : process(cp_V, ap_CS_fsm, seq_load_2_reg_1043, t_V_8_reg_1073)
    begin
        if (((ap_ST_st32_fsm_31 = ap_CS_fsm) and (ap_const_lv1_0 = seq_load_2_reg_1043))) then 
            grp_check_fu_406_p_V <= t_V_8_reg_1073;
        elsif ((ap_ST_st17_fsm_16 = ap_CS_fsm)) then 
            grp_check_fu_406_p_V <= cp_V;
        else 
            grp_check_fu_406_p_V <= "XXXXXXXX";
        end if; 
    end process;

    grp_check_fu_406_pp_rot_V_q0 <= pp_rot_V_q0;
    grp_check_fu_406_pp_rot_V_q1 <= pp_rot_V_q1;
    grp_check_fu_406_pp_tile_V_q0 <= pp_tile_V_q0;
    grp_check_fu_406_pp_tile_V_q1 <= pp_tile_V_q1;
    grp_check_fu_406_side_V <= side_V;
    grp_check_fu_406_tiles_V_q0 <= tiles_V_q0;
    grp_check_fu_406_tiles_V_q1 <= tiles_V_q1;
    grp_down_fu_386_ap_start <= grp_down_fu_386_ap_start_ap_start_reg;
    grp_down_fu_386_avail_V_i <= avail_V;
    grp_down_fu_386_colours_V_q0 <= colours_V_q0;
    grp_down_fu_386_cp_V_i <= cp_V;
    grp_down_fu_386_ntiles_V <= ntiles_V;
    grp_down_fu_386_pp_rot_V_q0 <= pp_rot_V_q0;
    grp_down_fu_386_pp_tile_V_q0 <= pp_tile_V_q0;
    grp_down_fu_386_side_V <= side_V;
    grp_down_fu_386_tiles_V_q0 <= tiles_V_q0;
    grp_load_fu_433_p1 <= terminate;
    grp_right_r_fu_366_ap_start <= grp_right_r_fu_366_ap_start_ap_start_reg;
    grp_right_r_fu_366_avail_V_i <= avail_V;
    grp_right_r_fu_366_colours_V_q0 <= colours_V_q0;
    grp_right_r_fu_366_cp_V <= cp_V;
    grp_right_r_fu_366_ntiles_V <= ntiles_V;
    grp_right_r_fu_366_pp_rot_V_q0 <= pp_rot_V_q0;
    grp_right_r_fu_366_pp_tile_V_q0 <= pp_tile_V_q0;
    grp_right_r_fu_366_side_V <= side_V;
    grp_right_r_fu_366_tiles_V_q0 <= tiles_V_q0;

    -- input_V_V_read assign process. --
    input_V_V_read_assign_proc : process(seq, ap_CS_fsm, exitcond_i_fu_509_p2, ap_sig_bdd_120, exitcond1_fu_561_p2, ap_sig_bdd_132, ap_sig_bdd_503)
    begin
        if ((((ap_ST_st4_fsm_3 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond_i_fu_509_p2)) and not(ap_sig_bdd_120)) or ((ap_ST_st6_fsm_5 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond1_fu_561_p2) and not(ap_sig_bdd_132)) or ((ap_ST_st21_fsm_20 = ap_CS_fsm) and (ap_const_lv1_0 = seq) and not(ap_sig_bdd_503)))) then 
            input_V_V_read <= ap_const_logic_1;
        else 
            input_V_V_read <= ap_const_logic_0;
        end if; 
    end process;

    ntiles_V_assign_fu_537_p0 <= tmp_7_fu_527_p1;
    ntiles_V_assign_fu_537_p1 <= tmp_7_fu_527_p1;
    ntiles_V_assign_fu_537_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(ntiles_V_assign_fu_537_p0) * signed(ntiles_V_assign_fu_537_p1))), 8));
    op2_assign_2_fu_735_p2 <= std_logic_vector(unsigned(tmp_i1_cast_fu_731_p1) + unsigned(ap_const_lv9_1FF));
    or_cond5_demorgan_i_fu_907_p2 <= (grp_check_fu_406_ap_return or terminate_load_3_reg_1065);
    or_cond_demorgan_i_fu_850_p2 <= (grp_right_r_fu_366_ap_return or terminate);
    or_cond_i_fu_757_p2 <= (tmp_12_i_fu_745_p2 and tmp_13_i_fu_751_p2);

    -- output_V_V_din assign process. --
    output_V_V_din_assign_proc : process(output_V_V_full_n, terminate, ap_CS_fsm, seq_load_reg_993, or_cond_i_fu_757_p2, ap_sig_bdd_183, tmp_V_5_fu_845_p1)
    begin
        if (((ap_ST_st26_fsm_25 = ap_CS_fsm) and not((output_V_V_full_n = ap_const_logic_0)))) then 
            output_V_V_din <= tmp_V_5_fu_845_p1;
        elsif (((ap_ST_st20_fsm_19 = ap_CS_fsm) and (((ap_const_lv1_0 = seq_load_reg_993) and not((ap_const_lv1_0 = terminate))) or ((ap_const_lv1_0 = or_cond_i_fu_757_p2) and not((ap_const_lv1_0 = terminate)))) and not(ap_sig_bdd_183))) then 
            output_V_V_din <= ap_const_lv32_0;
        elsif (((ap_ST_st20_fsm_19 = ap_CS_fsm) and (((ap_const_lv1_0 = seq_load_reg_993) and (ap_const_lv1_0 = terminate)) or ((ap_const_lv1_0 = terminate) and (ap_const_lv1_0 = or_cond_i_fu_757_p2))) and not(ap_sig_bdd_183))) then 
            output_V_V_din <= ap_const_lv32_1;
        else 
            output_V_V_din <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- output_V_V_write assign process. --
    output_V_V_write_assign_proc : process(output_V_V_full_n, terminate, ap_CS_fsm, seq_load_reg_993, or_cond_i_fu_757_p2, ap_sig_bdd_183)
    begin
        if ((((ap_ST_st26_fsm_25 = ap_CS_fsm) and not((output_V_V_full_n = ap_const_logic_0))) or ((ap_ST_st20_fsm_19 = ap_CS_fsm) and (((ap_const_lv1_0 = seq_load_reg_993) and (ap_const_lv1_0 = terminate)) or ((ap_const_lv1_0 = terminate) and (ap_const_lv1_0 = or_cond_i_fu_757_p2))) and not(ap_sig_bdd_183)) or ((ap_ST_st20_fsm_19 = ap_CS_fsm) and (((ap_const_lv1_0 = seq_load_reg_993) and not((ap_const_lv1_0 = terminate))) or ((ap_const_lv1_0 = or_cond_i_fu_757_p2) and not((ap_const_lv1_0 = terminate)))) and not(ap_sig_bdd_183)))) then 
            output_V_V_write <= ap_const_logic_1;
        else 
            output_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

    p_V_1_fu_515_p2 <= std_logic_vector(unsigned(t_V_7_reg_264) + unsigned(ap_const_lv6_1));
    p_V_fu_799_p2 <= std_logic_vector(unsigned(t_V_3_reg_321) + unsigned(ap_const_lv8_1));

    -- pp_rot_V_address0 assign process. --
    pp_rot_V_address0_assign_proc : process(ap_CS_fsm, pp_rot_V_addr_1_reg_1038, seq_load_2_reg_1043, grp_backtrack_fu_344_pp_rot_V_address0, grp_right_r_fu_366_pp_rot_V_address0, grp_down_fu_386_pp_rot_V_address0, grp_check_fu_406_pp_rot_V_address0, tmp_1_i_fu_521_p1)
    begin
        if ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
            pp_rot_V_address0 <= tmp_1_i_fu_521_p1(6 - 1 downto 0);
        elsif ((ap_ST_st24_fsm_23 = ap_CS_fsm)) then 
            pp_rot_V_address0 <= pp_rot_V_addr_1_reg_1038;
        elsif (((ap_ST_st17_fsm_16 = ap_CS_fsm) or ((ap_ST_st32_fsm_31 = ap_CS_fsm) and (ap_const_lv1_0 = seq_load_2_reg_1043)))) then 
            pp_rot_V_address0 <= grp_check_fu_406_pp_rot_V_address0;
        elsif ((ap_ST_st13_fsm_12 = ap_CS_fsm)) then 
            pp_rot_V_address0 <= grp_down_fu_386_pp_rot_V_address0;
        elsif ((ap_ST_st28_fsm_27 = ap_CS_fsm)) then 
            pp_rot_V_address0 <= grp_right_r_fu_366_pp_rot_V_address0;
        elsif (((ap_ST_st15_fsm_14 = ap_CS_fsm) or (ap_ST_st19_fsm_18 = ap_CS_fsm))) then 
            pp_rot_V_address0 <= grp_backtrack_fu_344_pp_rot_V_address0;
        else 
            pp_rot_V_address0 <= "XXXXXX";
        end if; 
    end process;


    -- pp_rot_V_address1 assign process. --
    pp_rot_V_address1_assign_proc : process(ap_CS_fsm, seq_load_2_reg_1043, grp_backtrack_fu_344_pp_rot_V_address1, grp_check_fu_406_pp_rot_V_address1)
    begin
        if (((ap_ST_st17_fsm_16 = ap_CS_fsm) or ((ap_ST_st32_fsm_31 = ap_CS_fsm) and (ap_const_lv1_0 = seq_load_2_reg_1043)))) then 
            pp_rot_V_address1 <= grp_check_fu_406_pp_rot_V_address1;
        elsif (((ap_ST_st15_fsm_14 = ap_CS_fsm) or (ap_ST_st19_fsm_18 = ap_CS_fsm))) then 
            pp_rot_V_address1 <= grp_backtrack_fu_344_pp_rot_V_address1;
        else 
            pp_rot_V_address1 <= "XXXXXX";
        end if; 
    end process;


    -- pp_rot_V_ce0 assign process. --
    pp_rot_V_ce0_assign_proc : process(ap_CS_fsm, ap_sig_bdd_120, seq_load_2_reg_1043, grp_backtrack_fu_344_pp_rot_V_ce0, grp_right_r_fu_366_pp_rot_V_ce0, grp_down_fu_386_pp_rot_V_ce0, grp_check_fu_406_pp_rot_V_ce0)
    begin
        if ((((ap_ST_st4_fsm_3 = ap_CS_fsm) and not(ap_sig_bdd_120)) or (ap_ST_st24_fsm_23 = ap_CS_fsm))) then 
            pp_rot_V_ce0 <= ap_const_logic_1;
        elsif (((ap_ST_st17_fsm_16 = ap_CS_fsm) or ((ap_ST_st32_fsm_31 = ap_CS_fsm) and (ap_const_lv1_0 = seq_load_2_reg_1043)))) then 
            pp_rot_V_ce0 <= grp_check_fu_406_pp_rot_V_ce0;
        elsif ((ap_ST_st13_fsm_12 = ap_CS_fsm)) then 
            pp_rot_V_ce0 <= grp_down_fu_386_pp_rot_V_ce0;
        elsif ((ap_ST_st28_fsm_27 = ap_CS_fsm)) then 
            pp_rot_V_ce0 <= grp_right_r_fu_366_pp_rot_V_ce0;
        elsif (((ap_ST_st15_fsm_14 = ap_CS_fsm) or (ap_ST_st19_fsm_18 = ap_CS_fsm))) then 
            pp_rot_V_ce0 <= grp_backtrack_fu_344_pp_rot_V_ce0;
        else 
            pp_rot_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- pp_rot_V_ce1 assign process. --
    pp_rot_V_ce1_assign_proc : process(ap_CS_fsm, seq_load_2_reg_1043, grp_backtrack_fu_344_pp_rot_V_ce1, grp_check_fu_406_pp_rot_V_ce1)
    begin
        if (((ap_ST_st17_fsm_16 = ap_CS_fsm) or ((ap_ST_st32_fsm_31 = ap_CS_fsm) and (ap_const_lv1_0 = seq_load_2_reg_1043)))) then 
            pp_rot_V_ce1 <= grp_check_fu_406_pp_rot_V_ce1;
        elsif (((ap_ST_st15_fsm_14 = ap_CS_fsm) or (ap_ST_st19_fsm_18 = ap_CS_fsm))) then 
            pp_rot_V_ce1 <= grp_backtrack_fu_344_pp_rot_V_ce1;
        else 
            pp_rot_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- pp_rot_V_d0 assign process. --
    pp_rot_V_d0_assign_proc : process(ap_CS_fsm, grp_backtrack_fu_344_pp_rot_V_d0, grp_right_r_fu_366_pp_rot_V_d0, grp_down_fu_386_pp_rot_V_d0)
    begin
        if ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
            pp_rot_V_d0 <= ap_const_lv2_0;
        elsif ((ap_ST_st13_fsm_12 = ap_CS_fsm)) then 
            pp_rot_V_d0 <= grp_down_fu_386_pp_rot_V_d0;
        elsif ((ap_ST_st28_fsm_27 = ap_CS_fsm)) then 
            pp_rot_V_d0 <= grp_right_r_fu_366_pp_rot_V_d0;
        elsif (((ap_ST_st15_fsm_14 = ap_CS_fsm) or (ap_ST_st19_fsm_18 = ap_CS_fsm))) then 
            pp_rot_V_d0 <= grp_backtrack_fu_344_pp_rot_V_d0;
        else 
            pp_rot_V_d0 <= "XX";
        end if; 
    end process;


    -- pp_rot_V_we0 assign process. --
    pp_rot_V_we0_assign_proc : process(ap_CS_fsm, exitcond_i_fu_509_p2, ap_sig_bdd_120, grp_backtrack_fu_344_pp_rot_V_we0, grp_right_r_fu_366_pp_rot_V_we0, grp_down_fu_386_pp_rot_V_we0)
    begin
        if ((((ap_ST_st4_fsm_3 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond_i_fu_509_p2) and not(ap_sig_bdd_120)))) then 
            pp_rot_V_we0 <= ap_const_logic_1;
        elsif ((ap_ST_st13_fsm_12 = ap_CS_fsm)) then 
            pp_rot_V_we0 <= grp_down_fu_386_pp_rot_V_we0;
        elsif ((ap_ST_st28_fsm_27 = ap_CS_fsm)) then 
            pp_rot_V_we0 <= grp_right_r_fu_366_pp_rot_V_we0;
        elsif (((ap_ST_st15_fsm_14 = ap_CS_fsm) or (ap_ST_st19_fsm_18 = ap_CS_fsm))) then 
            pp_rot_V_we0 <= grp_backtrack_fu_344_pp_rot_V_we0;
        else 
            pp_rot_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- pp_tile_V_address0 assign process. --
    pp_tile_V_address0_assign_proc : process(ap_CS_fsm, pp_tile_V_addr_1_reg_1033, seq_load_2_reg_1043, pp_tile_V_addr_2_reg_1080, grp_backtrack_fu_344_pp_tile_V_address0, grp_right_r_fu_366_pp_tile_V_address0, grp_down_fu_386_pp_tile_V_address0, grp_check_fu_406_pp_tile_V_address0, tmp_1_i_fu_521_p1, tmp_i_i1_fu_856_p1)
    begin
        if ((ap_ST_st30_fsm_29 = ap_CS_fsm)) then 
            pp_tile_V_address0 <= pp_tile_V_addr_2_reg_1080;
        elsif ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
            pp_tile_V_address0 <= tmp_1_i_fu_521_p1(6 - 1 downto 0);
        elsif ((ap_ST_st29_fsm_28 = ap_CS_fsm)) then 
            pp_tile_V_address0 <= tmp_i_i1_fu_856_p1(6 - 1 downto 0);
        elsif ((ap_ST_st24_fsm_23 = ap_CS_fsm)) then 
            pp_tile_V_address0 <= pp_tile_V_addr_1_reg_1033;
        elsif (((ap_ST_st17_fsm_16 = ap_CS_fsm) or ((ap_ST_st32_fsm_31 = ap_CS_fsm) and (ap_const_lv1_0 = seq_load_2_reg_1043)))) then 
            pp_tile_V_address0 <= grp_check_fu_406_pp_tile_V_address0;
        elsif ((ap_ST_st13_fsm_12 = ap_CS_fsm)) then 
            pp_tile_V_address0 <= grp_down_fu_386_pp_tile_V_address0;
        elsif ((ap_ST_st28_fsm_27 = ap_CS_fsm)) then 
            pp_tile_V_address0 <= grp_right_r_fu_366_pp_tile_V_address0;
        elsif (((ap_ST_st15_fsm_14 = ap_CS_fsm) or (ap_ST_st19_fsm_18 = ap_CS_fsm))) then 
            pp_tile_V_address0 <= grp_backtrack_fu_344_pp_tile_V_address0;
        else 
            pp_tile_V_address0 <= "XXXXXX";
        end if; 
    end process;


    -- pp_tile_V_address1 assign process. --
    pp_tile_V_address1_assign_proc : process(ap_CS_fsm, seq_load_2_reg_1043, grp_backtrack_fu_344_pp_tile_V_address1, grp_check_fu_406_pp_tile_V_address1)
    begin
        if (((ap_ST_st17_fsm_16 = ap_CS_fsm) or ((ap_ST_st32_fsm_31 = ap_CS_fsm) and (ap_const_lv1_0 = seq_load_2_reg_1043)))) then 
            pp_tile_V_address1 <= grp_check_fu_406_pp_tile_V_address1;
        elsif (((ap_ST_st15_fsm_14 = ap_CS_fsm) or (ap_ST_st19_fsm_18 = ap_CS_fsm))) then 
            pp_tile_V_address1 <= grp_backtrack_fu_344_pp_tile_V_address1;
        else 
            pp_tile_V_address1 <= "XXXXXX";
        end if; 
    end process;


    -- pp_tile_V_ce0 assign process. --
    pp_tile_V_ce0_assign_proc : process(ap_CS_fsm, ap_sig_bdd_120, seq_load_2_reg_1043, grp_backtrack_fu_344_pp_tile_V_ce0, grp_right_r_fu_366_pp_tile_V_ce0, grp_down_fu_386_pp_tile_V_ce0, grp_check_fu_406_pp_tile_V_ce0)
    begin
        if ((((ap_ST_st4_fsm_3 = ap_CS_fsm) and not(ap_sig_bdd_120)) or (ap_ST_st24_fsm_23 = ap_CS_fsm) or (ap_ST_st29_fsm_28 = ap_CS_fsm) or (ap_ST_st30_fsm_29 = ap_CS_fsm))) then 
            pp_tile_V_ce0 <= ap_const_logic_1;
        elsif (((ap_ST_st17_fsm_16 = ap_CS_fsm) or ((ap_ST_st32_fsm_31 = ap_CS_fsm) and (ap_const_lv1_0 = seq_load_2_reg_1043)))) then 
            pp_tile_V_ce0 <= grp_check_fu_406_pp_tile_V_ce0;
        elsif ((ap_ST_st13_fsm_12 = ap_CS_fsm)) then 
            pp_tile_V_ce0 <= grp_down_fu_386_pp_tile_V_ce0;
        elsif ((ap_ST_st28_fsm_27 = ap_CS_fsm)) then 
            pp_tile_V_ce0 <= grp_right_r_fu_366_pp_tile_V_ce0;
        elsif (((ap_ST_st15_fsm_14 = ap_CS_fsm) or (ap_ST_st19_fsm_18 = ap_CS_fsm))) then 
            pp_tile_V_ce0 <= grp_backtrack_fu_344_pp_tile_V_ce0;
        else 
            pp_tile_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- pp_tile_V_ce1 assign process. --
    pp_tile_V_ce1_assign_proc : process(ap_CS_fsm, seq_load_2_reg_1043, grp_backtrack_fu_344_pp_tile_V_ce1, grp_check_fu_406_pp_tile_V_ce1)
    begin
        if (((ap_ST_st17_fsm_16 = ap_CS_fsm) or ((ap_ST_st32_fsm_31 = ap_CS_fsm) and (ap_const_lv1_0 = seq_load_2_reg_1043)))) then 
            pp_tile_V_ce1 <= grp_check_fu_406_pp_tile_V_ce1;
        elsif (((ap_ST_st15_fsm_14 = ap_CS_fsm) or (ap_ST_st19_fsm_18 = ap_CS_fsm))) then 
            pp_tile_V_ce1 <= grp_backtrack_fu_344_pp_tile_V_ce1;
        else 
            pp_tile_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- pp_tile_V_d0 assign process. --
    pp_tile_V_d0_assign_proc : process(ap_CS_fsm, grp_backtrack_fu_344_pp_tile_V_d0, grp_right_r_fu_366_pp_tile_V_d0, grp_down_fu_386_pp_tile_V_d0)
    begin
        if (((ap_ST_st4_fsm_3 = ap_CS_fsm) or (ap_ST_st30_fsm_29 = ap_CS_fsm))) then 
            pp_tile_V_d0 <= ap_const_lv8_0;
        elsif ((ap_ST_st13_fsm_12 = ap_CS_fsm)) then 
            pp_tile_V_d0 <= grp_down_fu_386_pp_tile_V_d0;
        elsif ((ap_ST_st28_fsm_27 = ap_CS_fsm)) then 
            pp_tile_V_d0 <= grp_right_r_fu_366_pp_tile_V_d0;
        elsif (((ap_ST_st15_fsm_14 = ap_CS_fsm) or (ap_ST_st19_fsm_18 = ap_CS_fsm))) then 
            pp_tile_V_d0 <= grp_backtrack_fu_344_pp_tile_V_d0;
        else 
            pp_tile_V_d0 <= "XXXXXXXX";
        end if; 
    end process;


    -- pp_tile_V_we0 assign process. --
    pp_tile_V_we0_assign_proc : process(ap_CS_fsm, exitcond_i_fu_509_p2, ap_sig_bdd_120, grp_backtrack_fu_344_pp_tile_V_we0, grp_right_r_fu_366_pp_tile_V_we0, grp_down_fu_386_pp_tile_V_we0)
    begin
        if ((((ap_ST_st4_fsm_3 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond_i_fu_509_p2) and not(ap_sig_bdd_120)) or (ap_ST_st30_fsm_29 = ap_CS_fsm))) then 
            pp_tile_V_we0 <= ap_const_logic_1;
        elsif ((ap_ST_st13_fsm_12 = ap_CS_fsm)) then 
            pp_tile_V_we0 <= grp_down_fu_386_pp_tile_V_we0;
        elsif ((ap_ST_st28_fsm_27 = ap_CS_fsm)) then 
            pp_tile_V_we0 <= grp_right_r_fu_366_pp_tile_V_we0;
        elsif (((ap_ST_st15_fsm_14 = ap_CS_fsm) or (ap_ST_st19_fsm_18 = ap_CS_fsm))) then 
            pp_tile_V_we0 <= grp_backtrack_fu_344_pp_tile_V_we0;
        else 
            pp_tile_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    r_V_1_fu_655_p3 <= 
        tmp_8_i_cast_fu_651_p1 when (tmp_12_fu_621_p3(0) = '1') else 
        tmp_5_i_fu_633_p2;
    r_V_2_fu_827_p2 <= std_logic_vector(unsigned(tmp_15_reg_1055) + unsigned(pp_rot_V_q0));
    r_V_3_fu_883_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv36_1),to_integer(unsigned('0' & tmp_i_i1_21_fu_879_p1(31-1 downto 0)))));
    r_V_fu_474_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv36_1),to_integer(unsigned('0' & tmp_i_fu_470_p1(31-1 downto 0)))));
    t_V_1_fu_555_p2 <= std_logic_vector(unsigned(t_V_reg_275) + unsigned(ap_const_lv8_1));
    t_V_6_fu_464_p2 <= std_logic_vector(unsigned(t_V_5_reg_242) + unsigned(ap_const_lv6_1));
    t_fu_615_p2 <= std_logic_vector(unsigned(op2_assign_reg_298) + unsigned(ap_const_lv32_1));
    tiles_V_addr4_fu_709_p2 <= std_logic_vector(unsigned(tmp_13_fu_703_p2) + unsigned(tmp_9_i6_trn_fu_699_p1));
    tiles_V_addr5_cast_fu_590_p1 <= std_logic_vector(resize(unsigned(tmp_fu_582_p3),11));
    tiles_V_addr6_fu_594_p2 <= std_logic_vector(unsigned(tiles_V_addr5_cast_fu_590_p1) + unsigned(tmp_5_trn_cast_fu_578_p1));

    -- tiles_V_address0 assign process. --
    tiles_V_address0_assign_proc : process(ap_CS_fsm, seq_load_2_reg_1043, grp_backtrack_fu_344_tiles_V_address0, grp_right_r_fu_366_tiles_V_address0, grp_down_fu_386_tiles_V_address0, grp_check_fu_406_tiles_V_address0, tmp_2_fu_600_p1, tmp_9_fu_715_p1, tmp_11_fu_840_p1)
    begin
        if ((ap_ST_st6_fsm_5 = ap_CS_fsm)) then 
            tiles_V_address0 <= tmp_2_fu_600_p1(8 - 1 downto 0);
        elsif ((ap_ST_st25_fsm_24 = ap_CS_fsm)) then 
            tiles_V_address0 <= tmp_11_fu_840_p1(8 - 1 downto 0);
        elsif ((ap_ST_st8_fsm_7 = ap_CS_fsm)) then 
            tiles_V_address0 <= tmp_9_fu_715_p1(8 - 1 downto 0);
        elsif (((ap_ST_st17_fsm_16 = ap_CS_fsm) or ((ap_ST_st32_fsm_31 = ap_CS_fsm) and (ap_const_lv1_0 = seq_load_2_reg_1043)))) then 
            tiles_V_address0 <= grp_check_fu_406_tiles_V_address0;
        elsif ((ap_ST_st13_fsm_12 = ap_CS_fsm)) then 
            tiles_V_address0 <= grp_down_fu_386_tiles_V_address0;
        elsif ((ap_ST_st28_fsm_27 = ap_CS_fsm)) then 
            tiles_V_address0 <= grp_right_r_fu_366_tiles_V_address0;
        elsif (((ap_ST_st15_fsm_14 = ap_CS_fsm) or (ap_ST_st19_fsm_18 = ap_CS_fsm))) then 
            tiles_V_address0 <= grp_backtrack_fu_344_tiles_V_address0;
        else 
            tiles_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    -- tiles_V_address1 assign process. --
    tiles_V_address1_assign_proc : process(ap_CS_fsm, seq_load_2_reg_1043, grp_backtrack_fu_344_tiles_V_address1, grp_check_fu_406_tiles_V_address1)
    begin
        if (((ap_ST_st17_fsm_16 = ap_CS_fsm) or ((ap_ST_st32_fsm_31 = ap_CS_fsm) and (ap_const_lv1_0 = seq_load_2_reg_1043)))) then 
            tiles_V_address1 <= grp_check_fu_406_tiles_V_address1;
        elsif (((ap_ST_st15_fsm_14 = ap_CS_fsm) or (ap_ST_st19_fsm_18 = ap_CS_fsm))) then 
            tiles_V_address1 <= grp_backtrack_fu_344_tiles_V_address1;
        else 
            tiles_V_address1 <= "XXXXXXXX";
        end if; 
    end process;


    -- tiles_V_ce0 assign process. --
    tiles_V_ce0_assign_proc : process(ap_CS_fsm, ap_sig_bdd_132, seq_load_2_reg_1043, grp_backtrack_fu_344_tiles_V_ce0, grp_right_r_fu_366_tiles_V_ce0, grp_down_fu_386_tiles_V_ce0, grp_check_fu_406_tiles_V_ce0)
    begin
        if ((((ap_ST_st6_fsm_5 = ap_CS_fsm) and not(ap_sig_bdd_132)) or (ap_ST_st8_fsm_7 = ap_CS_fsm) or (ap_ST_st25_fsm_24 = ap_CS_fsm))) then 
            tiles_V_ce0 <= ap_const_logic_1;
        elsif (((ap_ST_st17_fsm_16 = ap_CS_fsm) or ((ap_ST_st32_fsm_31 = ap_CS_fsm) and (ap_const_lv1_0 = seq_load_2_reg_1043)))) then 
            tiles_V_ce0 <= grp_check_fu_406_tiles_V_ce0;
        elsif ((ap_ST_st13_fsm_12 = ap_CS_fsm)) then 
            tiles_V_ce0 <= grp_down_fu_386_tiles_V_ce0;
        elsif ((ap_ST_st28_fsm_27 = ap_CS_fsm)) then 
            tiles_V_ce0 <= grp_right_r_fu_366_tiles_V_ce0;
        elsif (((ap_ST_st15_fsm_14 = ap_CS_fsm) or (ap_ST_st19_fsm_18 = ap_CS_fsm))) then 
            tiles_V_ce0 <= grp_backtrack_fu_344_tiles_V_ce0;
        else 
            tiles_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- tiles_V_ce1 assign process. --
    tiles_V_ce1_assign_proc : process(ap_CS_fsm, seq_load_2_reg_1043, grp_backtrack_fu_344_tiles_V_ce1, grp_check_fu_406_tiles_V_ce1)
    begin
        if (((ap_ST_st17_fsm_16 = ap_CS_fsm) or ((ap_ST_st32_fsm_31 = ap_CS_fsm) and (ap_const_lv1_0 = seq_load_2_reg_1043)))) then 
            tiles_V_ce1 <= grp_check_fu_406_tiles_V_ce1;
        elsif (((ap_ST_st15_fsm_14 = ap_CS_fsm) or (ap_ST_st19_fsm_18 = ap_CS_fsm))) then 
            tiles_V_ce1 <= grp_backtrack_fu_344_tiles_V_ce1;
        else 
            tiles_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    tiles_V_d0 <= input_V_V_dout(4 - 1 downto 0);

    -- tiles_V_we0 assign process. --
    tiles_V_we0_assign_proc : process(ap_CS_fsm, exitcond1_fu_561_p2, ap_sig_bdd_132)
    begin
        if ((((ap_ST_st6_fsm_5 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond1_fu_561_p2) and not(ap_sig_bdd_132)))) then 
            tiles_V_we0 <= ap_const_logic_1;
        else 
            tiles_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_832_p3 <= (pp_tile_V_q0 & r_V_2_fu_827_p2);
    tmp_10_i_fu_720_p1 <= std_logic_vector(resize(unsigned(tiles_V_q0),64));
    tmp_11_fu_840_p1 <= std_logic_vector(resize(unsigned(tmp_10_fu_832_p3),64));
    tmp_11_i_fu_725_p2 <= (colours_V_q0 or r_V_1_reg_960);
    tmp_12_fu_621_p3 <= op2_assign_reg_298(31 downto 31);
    
    cp_V_temp <= signed(cp_V);
    tmp_12_i_fu_745_p0 <= std_logic_vector(resize(cp_V_temp,9));

    tmp_12_i_fu_745_p2 <= "1" when (unsigned(tmp_12_i_fu_745_p0) < unsigned(op2_assign_2_fu_735_p2)) else "0";
    tmp_13_fu_703_p2 <= std_logic_vector(shift_left(unsigned(op2_assign_reg_298),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    tmp_13_i_fu_751_p2 <= (terminate xor ap_const_lv1_1);
    tmp_15_fu_823_p1 <= t_V_4_reg_332(2 - 1 downto 0);
    tmp_1_fu_549_p2 <= "1" when (unsigned(t_V_reg_275) < unsigned(ntiles_V)) else "0";
    tmp_1_i_fu_521_p1 <= std_logic_vector(resize(unsigned(t_V_7_reg_264),64));
    tmp_22_i_i_fu_889_p2 <= (avail_V or r_V_3_fu_883_p2);
    tmp_23_i_i_fu_860_p2 <= std_logic_vector(unsigned(t_V_8_reg_1073) + unsigned(ap_const_lv8_FF));
    tmp_2_fu_600_p1 <= std_logic_vector(resize(unsigned(tiles_V_addr6_fu_594_p2),64));
    tmp_2_i_fu_609_p2 <= "1" when (unsigned(op2_assign_reg_298) < unsigned(tmp_i3_cast_fu_605_p1)) else "0";
    tmp_3_fu_673_p3 <= (tmp_5_fu_663_p4 & ap_const_lv1_0);
    tmp_4_fu_787_p2 <= "1" when (tmp_V_4_fu_126 = ap_const_lv32_1) else "0";
    tmp_4_i_fu_629_p1 <= std_logic_vector(resize(unsigned(op2_assign_reg_298),36));
    tmp_5_fu_663_p4 <= avail_V(35 downto 1);
    tmp_5_i_fu_633_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv36_1),to_integer(unsigned('0' & tmp_4_i_fu_629_p1(31-1 downto 0)))));
    tmp_5_trn_cast_fu_578_p1 <= std_logic_vector(resize(unsigned(t_V_2_reg_287),11));
    tmp_6_fu_793_p2 <= "1" when (unsigned(t_V_3_reg_321) < unsigned(ntiles_V)) else "0";
    tmp_6_i_fu_639_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(op2_assign_reg_298));
    tmp_7_fu_527_p1 <= input_V_V_dout(8 - 1 downto 0);
    tmp_8_i_cast_fu_651_p1 <= std_logic_vector(resize(unsigned(tmp_8_i_fu_645_p2),36));
    tmp_8_i_fu_645_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_1),to_integer(unsigned('0' & tmp_6_i_fu_639_p2(31-1 downto 0)))));
    
    tiles_V_addr4_fu_709_p2_temp <= signed(tiles_V_addr4_fu_709_p2);
    tmp_9_fu_715_p1 <= std_logic_vector(resize(tiles_V_addr4_fu_709_p2_temp,64));

    tmp_9_i6_trn_fu_699_p1 <= std_logic_vector(resize(unsigned(e_i_reg_310),32));
    tmp_9_i_fu_504_p1 <= std_logic_vector(resize(unsigned(p_i_reg_253),64));
    tmp_V_5_fu_845_p1 <= std_logic_vector(resize(unsigned(tiles_V_q0),32));
    tmp_fu_582_p3 <= (t_V_reg_275 & ap_const_lv2_0);
    tmp_i1_cast_fu_731_p1 <= std_logic_vector(resize(unsigned(ntiles_V),9));
    tmp_i3_cast_fu_605_p1 <= std_logic_vector(resize(unsigned(ntiles_V),32));
    tmp_i3_fu_805_p1 <= std_logic_vector(resize(unsigned(t_V_3_reg_321),64));
    tmp_i_13_fu_480_p2 <= (avail_V or r_V_fu_474_p2);
    tmp_i_fu_470_p1 <= std_logic_vector(resize(unsigned(t_V_5_reg_242),36));
    tmp_i_i1_21_fu_879_p1 <= std_logic_vector(resize(unsigned(pp_tile_V_q0),36));
    
    t_V_8_reg_1073_temp <= signed(t_V_8_reg_1073);
    tmp_i_i1_fu_856_p1 <= std_logic_vector(resize(t_V_8_reg_1073_temp,64));

    tmp_s_fu_781_p2 <= "1" when (tmp_V_4_fu_126 = ap_const_lv32_0) else "0";
end behav;
