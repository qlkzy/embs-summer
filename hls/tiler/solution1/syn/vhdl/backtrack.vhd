-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2013.4
-- Copyright (C) 2013 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity backtrack is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    cp_V_i : IN STD_LOGIC_VECTOR (7 downto 0);
    cp_V_o : OUT STD_LOGIC_VECTOR (7 downto 0);
    cp_V_o_ap_vld : OUT STD_LOGIC;
    pp_rot_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    pp_rot_V_ce0 : OUT STD_LOGIC;
    pp_rot_V_we0 : OUT STD_LOGIC;
    pp_rot_V_d0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    pp_rot_V_q0 : IN STD_LOGIC_VECTOR (1 downto 0);
    pp_rot_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    pp_rot_V_ce1 : OUT STD_LOGIC;
    pp_rot_V_q1 : IN STD_LOGIC_VECTOR (1 downto 0);
    pp_tile_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    pp_tile_V_ce0 : OUT STD_LOGIC;
    pp_tile_V_we0 : OUT STD_LOGIC;
    pp_tile_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    pp_tile_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    pp_tile_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    pp_tile_V_ce1 : OUT STD_LOGIC;
    pp_tile_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    avail_V_i : IN STD_LOGIC_VECTOR (35 downto 0);
    avail_V_o : OUT STD_LOGIC_VECTOR (35 downto 0);
    avail_V_o_ap_vld : OUT STD_LOGIC;
    side_V : IN STD_LOGIC_VECTOR (7 downto 0);
    tiles_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    tiles_V_ce0 : OUT STD_LOGIC;
    tiles_V_q0 : IN STD_LOGIC_VECTOR (3 downto 0);
    tiles_V_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    tiles_V_ce1 : OUT STD_LOGIC;
    tiles_V_q1 : IN STD_LOGIC_VECTOR (3 downto 0);
    colours_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    colours_V_ce0 : OUT STD_LOGIC;
    colours_V_q0 : IN STD_LOGIC_VECTOR (35 downto 0);
    ntiles_V : IN STD_LOGIC_VECTOR (7 downto 0);
    terminate_i : IN STD_LOGIC_VECTOR (0 downto 0);
    terminate_o : OUT STD_LOGIC_VECTOR (0 downto 0);
    terminate_o_ap_vld : OUT STD_LOGIC );
end;


architecture behav of backtrack is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (4 downto 0) := "01011";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (4 downto 0) := "01100";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (4 downto 0) := "01101";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (4 downto 0) := "01110";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (4 downto 0) := "10011";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv36_1 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal terminate_load_reg_426 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_right_r_fu_186_ap_done : STD_LOGIC;
    signal t_V_reg_434 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_i_fu_236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i_reg_443 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_demorgan_fu_226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pp_tile_V_addr_reg_457 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_28_i_i_fu_310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_i_i_reg_465 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_29_i_i_reg_499 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_fu_370_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_reg_503 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_right_r_fu_186_ap_start : STD_LOGIC;
    signal grp_right_r_fu_186_ap_idle : STD_LOGIC;
    signal grp_right_r_fu_186_ap_ready : STD_LOGIC;
    signal grp_right_r_fu_186_cp_V : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_right_r_fu_186_pp_rot_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_right_r_fu_186_pp_rot_V_ce0 : STD_LOGIC;
    signal grp_right_r_fu_186_pp_rot_V_we0 : STD_LOGIC;
    signal grp_right_r_fu_186_pp_rot_V_d0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_right_r_fu_186_pp_rot_V_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_right_r_fu_186_pp_tile_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_right_r_fu_186_pp_tile_V_ce0 : STD_LOGIC;
    signal grp_right_r_fu_186_pp_tile_V_we0 : STD_LOGIC;
    signal grp_right_r_fu_186_pp_tile_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_right_r_fu_186_pp_tile_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_right_r_fu_186_avail_V_i : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_right_r_fu_186_avail_V_o : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_right_r_fu_186_avail_V_o_ap_vld : STD_LOGIC;
    signal grp_right_r_fu_186_side_V : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_right_r_fu_186_tiles_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_right_r_fu_186_tiles_V_ce0 : STD_LOGIC;
    signal grp_right_r_fu_186_tiles_V_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_right_r_fu_186_colours_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_right_r_fu_186_colours_V_ce0 : STD_LOGIC;
    signal grp_right_r_fu_186_colours_V_q0 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_right_r_fu_186_ntiles_V : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_right_r_fu_186_ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i1_phi_fu_175_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i1_reg_170 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_right_r_fu_186_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal tmp_i_fu_256_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal t_V_reg_434_temp: signed (8-1 downto 0);
    signal tmp_i_i_i_fu_316_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i2_i_i_fu_322_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_fu_341_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_fu_360_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_i3_i_fu_378_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i3_i_i_fu_384_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_fu_403_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_fu_416_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_22_i_fu_274_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_210_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_20_fu_292_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_250_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal cp_V_i_temp: signed (8-1 downto 0);
    signal grp_fu_250_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_i_23_fu_260_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal r_V_fu_264_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_250_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_4_fu_306_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_9_i_fu_327_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_s_fu_333_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_10_i_fu_346_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_13_fu_352_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal up_V_fu_365_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_11_i_fu_389_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_15_fu_395_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_17_fu_408_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal toplevel_srem_10s_10ns_10_13_U21_ap_start : STD_LOGIC;
    signal grp_fu_250_ce : STD_LOGIC;
    signal or_cond5_demorgan_fu_421_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);

    component right_r IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        cp_V : IN STD_LOGIC_VECTOR (7 downto 0);
        pp_rot_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        pp_rot_V_ce0 : OUT STD_LOGIC;
        pp_rot_V_we0 : OUT STD_LOGIC;
        pp_rot_V_d0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        pp_rot_V_q0 : IN STD_LOGIC_VECTOR (1 downto 0);
        pp_tile_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        pp_tile_V_ce0 : OUT STD_LOGIC;
        pp_tile_V_we0 : OUT STD_LOGIC;
        pp_tile_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        pp_tile_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        avail_V_i : IN STD_LOGIC_VECTOR (35 downto 0);
        avail_V_o : OUT STD_LOGIC_VECTOR (35 downto 0);
        avail_V_o_ap_vld : OUT STD_LOGIC;
        side_V : IN STD_LOGIC_VECTOR (7 downto 0);
        tiles_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        tiles_V_ce0 : OUT STD_LOGIC;
        tiles_V_q0 : IN STD_LOGIC_VECTOR (3 downto 0);
        colours_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        colours_V_ce0 : OUT STD_LOGIC;
        colours_V_q0 : IN STD_LOGIC_VECTOR (35 downto 0);
        ntiles_V : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component toplevel_srem_10s_10ns_10_13 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;



begin
    grp_right_r_fu_186 : component right_r
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_right_r_fu_186_ap_start,
        ap_done => grp_right_r_fu_186_ap_done,
        ap_idle => grp_right_r_fu_186_ap_idle,
        ap_ready => grp_right_r_fu_186_ap_ready,
        cp_V => grp_right_r_fu_186_cp_V,
        pp_rot_V_address0 => grp_right_r_fu_186_pp_rot_V_address0,
        pp_rot_V_ce0 => grp_right_r_fu_186_pp_rot_V_ce0,
        pp_rot_V_we0 => grp_right_r_fu_186_pp_rot_V_we0,
        pp_rot_V_d0 => grp_right_r_fu_186_pp_rot_V_d0,
        pp_rot_V_q0 => grp_right_r_fu_186_pp_rot_V_q0,
        pp_tile_V_address0 => grp_right_r_fu_186_pp_tile_V_address0,
        pp_tile_V_ce0 => grp_right_r_fu_186_pp_tile_V_ce0,
        pp_tile_V_we0 => grp_right_r_fu_186_pp_tile_V_we0,
        pp_tile_V_d0 => grp_right_r_fu_186_pp_tile_V_d0,
        pp_tile_V_q0 => grp_right_r_fu_186_pp_tile_V_q0,
        avail_V_i => grp_right_r_fu_186_avail_V_i,
        avail_V_o => grp_right_r_fu_186_avail_V_o,
        avail_V_o_ap_vld => grp_right_r_fu_186_avail_V_o_ap_vld,
        side_V => grp_right_r_fu_186_side_V,
        tiles_V_address0 => grp_right_r_fu_186_tiles_V_address0,
        tiles_V_ce0 => grp_right_r_fu_186_tiles_V_ce0,
        tiles_V_q0 => grp_right_r_fu_186_tiles_V_q0,
        colours_V_address0 => grp_right_r_fu_186_colours_V_address0,
        colours_V_ce0 => grp_right_r_fu_186_colours_V_ce0,
        colours_V_q0 => grp_right_r_fu_186_colours_V_q0,
        ntiles_V => grp_right_r_fu_186_ntiles_V,
        ap_return => grp_right_r_fu_186_ap_return);

    toplevel_srem_10s_10ns_10_13_U21 : component toplevel_srem_10s_10ns_10_13
    generic map (
        ID => 21,
        NUM_STAGE => 13,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => toplevel_srem_10s_10ns_10_13_U21_ap_start,
        din0 => grp_fu_250_p0,
        din1 => grp_fu_250_p1,
        ce => grp_fu_250_ce,
        dout => grp_fu_250_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- grp_right_r_fu_186_ap_start_ap_start_reg assign process. --
    grp_right_r_fu_186_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_right_r_fu_186_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
                    grp_right_r_fu_186_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_right_r_fu_186_ap_ready)) then 
                    grp_right_r_fu_186_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- tmp_i1_reg_170 assign process. --
    tmp_i1_reg_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st19_fsm_18 = ap_CS_fsm) and ((not((tmp_i_i_reg_443 = ap_const_lv1_0)) and not((ap_const_lv1_0 = tmp_22_fu_370_p3))) or (not((ap_const_lv1_0 = tmp_28_i_i_reg_465)) and not((ap_const_lv1_0 = tmp_22_fu_370_p3))) or (not((ap_const_lv1_0 = grp_fu_215_p2)) and not((ap_const_lv1_0 = tmp_22_fu_370_p3)))))) then 
                tmp_i1_reg_170 <= ap_const_lv1_1;
            elsif (((ap_ST_st21_fsm_20 = ap_CS_fsm) and ((not((tmp_i_i_reg_443 = ap_const_lv1_0)) and (ap_const_lv1_0 = tmp_22_reg_503)) or (not((ap_const_lv1_0 = tmp_28_i_i_reg_465)) and (ap_const_lv1_0 = tmp_22_reg_503)) or ((ap_const_lv1_0 = tmp_22_reg_503) and not((ap_const_lv1_0 = tmp_29_i_i_reg_499)))))) then 
                tmp_i1_reg_170 <= grp_fu_215_p2;
            elsif (((ap_ST_st19_fsm_18 = ap_CS_fsm) and (tmp_i_i_reg_443 = ap_const_lv1_0) and (ap_const_lv1_0 = tmp_28_i_i_reg_465) and (ap_const_lv1_0 = grp_fu_215_p2))) then 
                tmp_i1_reg_170 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then
                pp_tile_V_addr_reg_457 <= tmp_i_fu_256_p1(6 - 1 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and not((ap_const_logic_0 = grp_right_r_fu_186_ap_done)))) then
                t_V_reg_434 <= cp_V_i;
                terminate_load_reg_426 <= terminate_i;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st19_fsm_18 = ap_CS_fsm) and (not((tmp_i_i_reg_443 = ap_const_lv1_0)) or not((ap_const_lv1_0 = tmp_28_i_i_reg_465)) or not((ap_const_lv1_0 = grp_fu_215_p2))))) then
                tmp_22_reg_503 <= up_V_fu_365_p2(7 downto 7);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st17_fsm_16 = ap_CS_fsm)) then
                tmp_28_i_i_reg_465 <= tmp_28_i_i_fu_310_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st19_fsm_18 = ap_CS_fsm) and (tmp_i_i_reg_443 = ap_const_lv1_0) and (ap_const_lv1_0 = tmp_28_i_i_reg_465))) then
                tmp_29_i_i_reg_499 <= grp_fu_215_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and not((ap_const_logic_0 = grp_right_r_fu_186_ap_done)) and not((or_cond_demorgan_fu_226_p2 = ap_const_lv1_0)))) then
                tmp_i_i_reg_443 <= tmp_i_i_fu_236_p2;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start , ap_CS_fsm , grp_right_r_fu_186_ap_done , tmp_i_i_fu_236_p2 , tmp_i_i_reg_443 , or_cond_demorgan_fu_226_p2 , tmp_28_i_i_fu_310_p2 , tmp_28_i_i_reg_465 , grp_fu_215_p2 , tmp_22_fu_370_p3 , or_cond5_demorgan_fu_421_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                if ((not((ap_const_logic_0 = grp_right_r_fu_186_ap_done)) and not((or_cond_demorgan_fu_226_p2 = ap_const_lv1_0)) and not((tmp_i_i_fu_236_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_st19_fsm_18;
                elsif ((not((ap_const_logic_0 = grp_right_r_fu_186_ap_done)) and not((or_cond_demorgan_fu_226_p2 = ap_const_lv1_0)) and (tmp_i_i_fu_236_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                elsif ((not((ap_const_logic_0 = grp_right_r_fu_186_ap_done)) and (or_cond_demorgan_fu_226_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                if (not((ap_const_lv1_0 = tmp_28_i_i_fu_310_p2))) then
                    ap_NS_fsm <= ap_ST_st19_fsm_18;
                else
                    ap_NS_fsm <= ap_ST_st18_fsm_17;
                end if;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                if (((not((tmp_i_i_reg_443 = ap_const_lv1_0)) and (ap_const_lv1_0 = tmp_22_fu_370_p3)) or (not((ap_const_lv1_0 = tmp_28_i_i_reg_465)) and (ap_const_lv1_0 = tmp_22_fu_370_p3)) or (not((ap_const_lv1_0 = grp_fu_215_p2)) and (ap_const_lv1_0 = tmp_22_fu_370_p3)))) then
                    ap_NS_fsm <= ap_ST_st20_fsm_19;
                else
                    ap_NS_fsm <= ap_ST_st21_fsm_20;
                end if;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st21_fsm_20 => 
                if (not((ap_const_lv1_0 = or_cond5_demorgan_fu_421_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_CS_fsm, or_cond5_demorgan_fu_421_p2)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm)) or ((ap_ST_st21_fsm_20 = ap_CS_fsm) and not((ap_const_lv1_0 = or_cond5_demorgan_fu_421_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm, or_cond5_demorgan_fu_421_p2)
    begin
        if (((ap_ST_st21_fsm_20 = ap_CS_fsm) and not((ap_const_lv1_0 = or_cond5_demorgan_fu_421_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- avail_V_o assign process. --
    avail_V_o_assign_proc : process(ap_CS_fsm, avail_V_i, grp_right_r_fu_186_avail_V_o, grp_right_r_fu_186_avail_V_o_ap_vld, tmp_22_i_fu_274_p2)
    begin
        if ((ap_ST_st5_fsm_4 = ap_CS_fsm)) then 
            avail_V_o <= tmp_22_i_fu_274_p2;
        elsif ((((ap_ST_st2_fsm_1 = ap_CS_fsm) and (ap_const_logic_1 = grp_right_r_fu_186_avail_V_o_ap_vld)) or ((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = grp_right_r_fu_186_avail_V_o_ap_vld)))) then 
            avail_V_o <= grp_right_r_fu_186_avail_V_o;
        else 
            avail_V_o <= avail_V_i;
        end if; 
    end process;


    -- avail_V_o_ap_vld assign process. --
    avail_V_o_ap_vld_assign_proc : process(ap_CS_fsm, grp_right_r_fu_186_avail_V_o_ap_vld)
    begin
        if ((ap_ST_st5_fsm_4 = ap_CS_fsm)) then 
            avail_V_o_ap_vld <= ap_const_logic_1;
        elsif (((ap_ST_st3_fsm_2 = ap_CS_fsm) or (ap_ST_st2_fsm_1 = ap_CS_fsm))) then 
            avail_V_o_ap_vld <= grp_right_r_fu_186_avail_V_o_ap_vld;
        else 
            avail_V_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    colours_V_address0 <= grp_right_r_fu_186_colours_V_address0;

    -- colours_V_ce0 assign process. --
    colours_V_ce0_assign_proc : process(ap_CS_fsm, grp_right_r_fu_186_colours_V_ce0)
    begin
        if ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            colours_V_ce0 <= grp_right_r_fu_186_colours_V_ce0;
        else 
            colours_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- cp_V_o assign process. --
    cp_V_o_assign_proc : process(ap_CS_fsm, cp_V_i, grp_fu_210_p2)
    begin
        if ((ap_ST_st5_fsm_4 = ap_CS_fsm)) then 
            cp_V_o <= grp_fu_210_p2;
        else 
            cp_V_o <= cp_V_i;
        end if; 
    end process;


    -- cp_V_o_ap_vld assign process. --
    cp_V_o_ap_vld_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st5_fsm_4 = ap_CS_fsm)) then 
            cp_V_o_ap_vld <= ap_const_logic_1;
        else 
            cp_V_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_210_p2 <= std_logic_vector(unsigned(t_V_reg_434) + unsigned(ap_const_lv8_FF));
    grp_fu_215_p2 <= "1" when (tiles_V_q0 = tiles_V_q1) else "0";

    -- grp_fu_250_ce assign process. --
    grp_fu_250_ce_assign_proc : process(ap_CS_fsm, grp_right_r_fu_186_ap_done, tmp_i_i_fu_236_p2, or_cond_demorgan_fu_226_p2)
    begin
        if (((ap_ST_st1_fsm_0 = ap_CS_fsm) or (ap_ST_st4_fsm_3 = ap_CS_fsm) or (ap_ST_st18_fsm_17 = ap_CS_fsm) or (ap_ST_st19_fsm_18 = ap_CS_fsm) or (ap_ST_st20_fsm_19 = ap_CS_fsm) or (ap_ST_st21_fsm_20 = ap_CS_fsm) or (ap_ST_st2_fsm_1 = ap_CS_fsm) or (ap_ST_st5_fsm_4 = ap_CS_fsm) or ((ap_ST_st3_fsm_2 = ap_CS_fsm) and ((ap_const_logic_0 = grp_right_r_fu_186_ap_done) or not((not((or_cond_demorgan_fu_226_p2 = ap_const_lv1_0)) and (tmp_i_i_fu_236_p2 = ap_const_lv1_0))))))) then 
            grp_fu_250_ce <= ap_const_logic_0;
        else 
            grp_fu_250_ce <= ap_const_logic_1;
        end if; 
    end process;

    
    cp_V_i_temp <= signed(cp_V_i);
    grp_fu_250_p0 <= std_logic_vector(resize(cp_V_i_temp,10));

    grp_fu_250_p1 <= std_logic_vector(resize(unsigned(side_V),10));
    grp_right_r_fu_186_ap_start <= grp_right_r_fu_186_ap_start_ap_start_reg;
    grp_right_r_fu_186_avail_V_i <= avail_V_i;
    grp_right_r_fu_186_colours_V_q0 <= colours_V_q0;
    grp_right_r_fu_186_cp_V <= cp_V_i;
    grp_right_r_fu_186_ntiles_V <= ntiles_V;
    grp_right_r_fu_186_pp_rot_V_q0 <= pp_rot_V_q0;
    grp_right_r_fu_186_pp_tile_V_q0 <= pp_tile_V_q0;
    grp_right_r_fu_186_side_V <= side_V;
    grp_right_r_fu_186_tiles_V_q0 <= tiles_V_q0;
    or_cond5_demorgan_fu_421_p2 <= (tmp_i1_phi_fu_175_p6 or terminate_load_reg_426);
    or_cond_demorgan_fu_226_p2 <= (grp_right_r_fu_186_ap_return or terminate_i);

    -- pp_rot_V_address0 assign process. --
    pp_rot_V_address0_assign_proc : process(ap_CS_fsm, grp_right_r_fu_186_pp_rot_V_address0, tmp_i_i_i_fu_316_p1, tmp_i_i3_i_fu_378_p1)
    begin
        if ((ap_ST_st19_fsm_18 = ap_CS_fsm)) then 
            pp_rot_V_address0 <= tmp_i_i3_i_fu_378_p1(6 - 1 downto 0);
        elsif ((ap_ST_st17_fsm_16 = ap_CS_fsm)) then 
            pp_rot_V_address0 <= tmp_i_i_i_fu_316_p1(6 - 1 downto 0);
        elsif ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            pp_rot_V_address0 <= grp_right_r_fu_186_pp_rot_V_address0;
        else 
            pp_rot_V_address0 <= "XXXXXX";
        end if; 
    end process;


    -- pp_rot_V_address1 assign process. --
    pp_rot_V_address1_assign_proc : process(ap_CS_fsm, tmp_i2_i_i_fu_322_p1, tmp_i3_i_i_fu_384_p1)
    begin
        if ((ap_ST_st19_fsm_18 = ap_CS_fsm)) then 
            pp_rot_V_address1 <= tmp_i3_i_i_fu_384_p1(6 - 1 downto 0);
        elsif ((ap_ST_st17_fsm_16 = ap_CS_fsm)) then 
            pp_rot_V_address1 <= tmp_i2_i_i_fu_322_p1(6 - 1 downto 0);
        else 
            pp_rot_V_address1 <= "XXXXXX";
        end if; 
    end process;


    -- pp_rot_V_ce0 assign process. --
    pp_rot_V_ce0_assign_proc : process(ap_CS_fsm, grp_right_r_fu_186_pp_rot_V_ce0)
    begin
        if (((ap_ST_st17_fsm_16 = ap_CS_fsm) or (ap_ST_st19_fsm_18 = ap_CS_fsm))) then 
            pp_rot_V_ce0 <= ap_const_logic_1;
        elsif ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            pp_rot_V_ce0 <= grp_right_r_fu_186_pp_rot_V_ce0;
        else 
            pp_rot_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- pp_rot_V_ce1 assign process. --
    pp_rot_V_ce1_assign_proc : process(ap_CS_fsm)
    begin
        if (((ap_ST_st17_fsm_16 = ap_CS_fsm) or (ap_ST_st19_fsm_18 = ap_CS_fsm))) then 
            pp_rot_V_ce1 <= ap_const_logic_1;
        else 
            pp_rot_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    pp_rot_V_d0 <= grp_right_r_fu_186_pp_rot_V_d0;

    -- pp_rot_V_we0 assign process. --
    pp_rot_V_we0_assign_proc : process(ap_CS_fsm, grp_right_r_fu_186_pp_rot_V_we0)
    begin
        if ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            pp_rot_V_we0 <= grp_right_r_fu_186_pp_rot_V_we0;
        else 
            pp_rot_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- pp_tile_V_address0 assign process. --
    pp_tile_V_address0_assign_proc : process(ap_CS_fsm, pp_tile_V_addr_reg_457, grp_right_r_fu_186_pp_tile_V_address0, tmp_i_fu_256_p1, tmp_i_i_i_fu_316_p1, tmp_i3_i_i_fu_384_p1)
    begin
        if ((ap_ST_st5_fsm_4 = ap_CS_fsm)) then 
            pp_tile_V_address0 <= pp_tile_V_addr_reg_457;
        elsif ((ap_ST_st19_fsm_18 = ap_CS_fsm)) then 
            pp_tile_V_address0 <= tmp_i3_i_i_fu_384_p1(6 - 1 downto 0);
        elsif ((ap_ST_st17_fsm_16 = ap_CS_fsm)) then 
            pp_tile_V_address0 <= tmp_i_i_i_fu_316_p1(6 - 1 downto 0);
        elsif ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
            pp_tile_V_address0 <= tmp_i_fu_256_p1(6 - 1 downto 0);
        elsif ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            pp_tile_V_address0 <= grp_right_r_fu_186_pp_tile_V_address0;
        else 
            pp_tile_V_address0 <= "XXXXXX";
        end if; 
    end process;


    -- pp_tile_V_address1 assign process. --
    pp_tile_V_address1_assign_proc : process(ap_CS_fsm, tmp_i2_i_i_fu_322_p1, tmp_i_i3_i_fu_378_p1)
    begin
        if ((ap_ST_st19_fsm_18 = ap_CS_fsm)) then 
            pp_tile_V_address1 <= tmp_i_i3_i_fu_378_p1(6 - 1 downto 0);
        elsif ((ap_ST_st17_fsm_16 = ap_CS_fsm)) then 
            pp_tile_V_address1 <= tmp_i2_i_i_fu_322_p1(6 - 1 downto 0);
        else 
            pp_tile_V_address1 <= "XXXXXX";
        end if; 
    end process;


    -- pp_tile_V_ce0 assign process. --
    pp_tile_V_ce0_assign_proc : process(ap_CS_fsm, grp_right_r_fu_186_pp_tile_V_ce0)
    begin
        if (((ap_ST_st4_fsm_3 = ap_CS_fsm) or (ap_ST_st17_fsm_16 = ap_CS_fsm) or (ap_ST_st19_fsm_18 = ap_CS_fsm) or (ap_ST_st5_fsm_4 = ap_CS_fsm))) then 
            pp_tile_V_ce0 <= ap_const_logic_1;
        elsif ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            pp_tile_V_ce0 <= grp_right_r_fu_186_pp_tile_V_ce0;
        else 
            pp_tile_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- pp_tile_V_ce1 assign process. --
    pp_tile_V_ce1_assign_proc : process(ap_CS_fsm)
    begin
        if (((ap_ST_st17_fsm_16 = ap_CS_fsm) or (ap_ST_st19_fsm_18 = ap_CS_fsm))) then 
            pp_tile_V_ce1 <= ap_const_logic_1;
        else 
            pp_tile_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- pp_tile_V_d0 assign process. --
    pp_tile_V_d0_assign_proc : process(ap_CS_fsm, grp_right_r_fu_186_pp_tile_V_d0)
    begin
        if ((ap_ST_st5_fsm_4 = ap_CS_fsm)) then 
            pp_tile_V_d0 <= ap_const_lv8_0;
        elsif ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            pp_tile_V_d0 <= grp_right_r_fu_186_pp_tile_V_d0;
        else 
            pp_tile_V_d0 <= "XXXXXXXX";
        end if; 
    end process;


    -- pp_tile_V_we0 assign process. --
    pp_tile_V_we0_assign_proc : process(ap_CS_fsm, grp_right_r_fu_186_pp_tile_V_we0)
    begin
        if (((ap_ST_st5_fsm_4 = ap_CS_fsm))) then 
            pp_tile_V_we0 <= ap_const_logic_1;
        elsif ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            pp_tile_V_we0 <= grp_right_r_fu_186_pp_tile_V_we0;
        else 
            pp_tile_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    r_V_10_i_fu_346_p2 <= std_logic_vector(unsigned(pp_rot_V_q1) + unsigned(ap_const_lv2_3));
    r_V_11_i_fu_389_p2 <= (pp_rot_V_q0 xor ap_const_lv2_2);
    r_V_4_fu_306_p1 <= grp_fu_250_p2(8 - 1 downto 0);
    r_V_9_i_fu_327_p2 <= std_logic_vector(unsigned(pp_rot_V_q0) + unsigned(ap_const_lv2_1));
    r_V_fu_264_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv36_1),to_integer(unsigned('0' & tmp_i_23_fu_260_p1(31-1 downto 0)))));

    -- terminate_o assign process. --
    terminate_o_assign_proc : process(ap_CS_fsm, terminate_i, tmp_20_fu_292_p3)
    begin
        if (((ap_ST_st5_fsm_4 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_20_fu_292_p3)))) then 
            terminate_o <= ap_const_lv1_1;
        else 
            terminate_o <= terminate_i;
        end if; 
    end process;


    -- terminate_o_ap_vld assign process. --
    terminate_o_ap_vld_assign_proc : process(ap_CS_fsm, tmp_20_fu_292_p3)
    begin
        if (((ap_ST_st5_fsm_4 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_20_fu_292_p3)))) then 
            terminate_o_ap_vld <= ap_const_logic_1;
        else 
            terminate_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    -- tiles_V_address0 assign process. --
    tiles_V_address0_assign_proc : process(ap_CS_fsm, grp_right_r_fu_186_tiles_V_address0, tmp_12_fu_341_p1, tmp_16_fu_403_p1)
    begin
        if ((ap_ST_st20_fsm_19 = ap_CS_fsm)) then 
            tiles_V_address0 <= tmp_16_fu_403_p1(8 - 1 downto 0);
        elsif ((ap_ST_st18_fsm_17 = ap_CS_fsm)) then 
            tiles_V_address0 <= tmp_12_fu_341_p1(8 - 1 downto 0);
        elsif ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            tiles_V_address0 <= grp_right_r_fu_186_tiles_V_address0;
        else 
            tiles_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    -- tiles_V_address1 assign process. --
    tiles_V_address1_assign_proc : process(ap_CS_fsm, tmp_14_fu_360_p1, tmp_18_fu_416_p1)
    begin
        if ((ap_ST_st20_fsm_19 = ap_CS_fsm)) then 
            tiles_V_address1 <= tmp_18_fu_416_p1(8 - 1 downto 0);
        elsif ((ap_ST_st18_fsm_17 = ap_CS_fsm)) then 
            tiles_V_address1 <= tmp_14_fu_360_p1(8 - 1 downto 0);
        else 
            tiles_V_address1 <= "XXXXXXXX";
        end if; 
    end process;


    -- tiles_V_ce0 assign process. --
    tiles_V_ce0_assign_proc : process(ap_CS_fsm, grp_right_r_fu_186_tiles_V_ce0)
    begin
        if (((ap_ST_st18_fsm_17 = ap_CS_fsm) or (ap_ST_st20_fsm_19 = ap_CS_fsm))) then 
            tiles_V_ce0 <= ap_const_logic_1;
        elsif ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            tiles_V_ce0 <= grp_right_r_fu_186_tiles_V_ce0;
        else 
            tiles_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- tiles_V_ce1 assign process. --
    tiles_V_ce1_assign_proc : process(ap_CS_fsm)
    begin
        if (((ap_ST_st18_fsm_17 = ap_CS_fsm) or (ap_ST_st20_fsm_19 = ap_CS_fsm))) then 
            tiles_V_ce1 <= ap_const_logic_1;
        else 
            tiles_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_12_fu_341_p1 <= std_logic_vector(resize(unsigned(tmp_s_fu_333_p3),64));
    tmp_13_fu_352_p3 <= (pp_tile_V_q1 & r_V_10_i_fu_346_p2);
    tmp_14_fu_360_p1 <= std_logic_vector(resize(unsigned(tmp_13_fu_352_p3),64));
    tmp_15_fu_395_p3 <= (pp_tile_V_q1 & r_V_11_i_fu_389_p2);
    tmp_16_fu_403_p1 <= std_logic_vector(resize(unsigned(tmp_15_fu_395_p3),64));
    tmp_17_fu_408_p3 <= (pp_tile_V_q0 & pp_rot_V_q1);
    tmp_18_fu_416_p1 <= std_logic_vector(resize(unsigned(tmp_17_fu_408_p3),64));
    tmp_20_fu_292_p3 <= grp_fu_210_p2(7 downto 7);
    tmp_22_fu_370_p3 <= up_V_fu_365_p2(7 downto 7);
    tmp_22_i_fu_274_p2 <= (avail_V_i or r_V_fu_264_p2);
    tmp_28_i_i_fu_310_p2 <= "1" when (r_V_4_fu_306_p1 = ap_const_lv8_0) else "0";

    -- tmp_i1_phi_fu_175_p6 assign process. --
    tmp_i1_phi_fu_175_p6_assign_proc : process(ap_CS_fsm, tmp_i_i_reg_443, tmp_28_i_i_reg_465, grp_fu_215_p2, tmp_29_i_i_reg_499, tmp_22_reg_503, tmp_i1_reg_170)
    begin
        if (((ap_ST_st21_fsm_20 = ap_CS_fsm) and ((not((tmp_i_i_reg_443 = ap_const_lv1_0)) and (ap_const_lv1_0 = tmp_22_reg_503)) or (not((ap_const_lv1_0 = tmp_28_i_i_reg_465)) and (ap_const_lv1_0 = tmp_22_reg_503)) or ((ap_const_lv1_0 = tmp_22_reg_503) and not((ap_const_lv1_0 = tmp_29_i_i_reg_499)))))) then 
            tmp_i1_phi_fu_175_p6 <= grp_fu_215_p2;
        else 
            tmp_i1_phi_fu_175_p6 <= tmp_i1_reg_170;
        end if; 
    end process;

    tmp_i2_i_i_fu_322_p1 <= std_logic_vector(resize(unsigned(t_V_reg_434),64));
    tmp_i3_i_i_fu_384_p1 <= std_logic_vector(resize(unsigned(t_V_reg_434),64));
    tmp_i_23_fu_260_p1 <= std_logic_vector(resize(unsigned(pp_tile_V_q0),36));
    
    t_V_reg_434_temp <= signed(t_V_reg_434);
    tmp_i_fu_256_p1 <= std_logic_vector(resize(t_V_reg_434_temp,64));

    tmp_i_i3_i_fu_378_p1 <= std_logic_vector(resize(unsigned(up_V_fu_365_p2),64));
    tmp_i_i_fu_236_p2 <= "1" when (cp_V_i = ap_const_lv8_0) else "0";
    tmp_i_i_i_fu_316_p1 <= std_logic_vector(resize(unsigned(grp_fu_210_p2),64));
    tmp_s_fu_333_p3 <= (pp_tile_V_q0 & r_V_9_i_fu_327_p2);

    -- toplevel_srem_10s_10ns_10_13_U21_ap_start assign process. --
    toplevel_srem_10s_10ns_10_13_U21_ap_start_assign_proc : process(ap_CS_fsm, grp_right_r_fu_186_ap_done, tmp_i_i_fu_236_p2, or_cond_demorgan_fu_226_p2)
    begin
        if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and not((ap_const_logic_0 = grp_right_r_fu_186_ap_done)) and not((or_cond_demorgan_fu_226_p2 = ap_const_lv1_0)) and (tmp_i_i_fu_236_p2 = ap_const_lv1_0))) then 
            toplevel_srem_10s_10ns_10_13_U21_ap_start <= ap_const_logic_1;
        else 
            toplevel_srem_10s_10ns_10_13_U21_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    up_V_fu_365_p2 <= std_logic_vector(unsigned(t_V_reg_434) - unsigned(side_V));
end behav;
