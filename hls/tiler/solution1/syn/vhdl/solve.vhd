-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2013.4
-- Copyright (C) 2013 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity solve is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    avail_V_i : IN STD_LOGIC_VECTOR (35 downto 0);
    avail_V_o : OUT STD_LOGIC_VECTOR (35 downto 0);
    avail_V_o_ap_vld : OUT STD_LOGIC;
    side_V : IN STD_LOGIC_VECTOR (7 downto 0);
    cp_V_i : IN STD_LOGIC_VECTOR (7 downto 0);
    cp_V_o : OUT STD_LOGIC_VECTOR (7 downto 0);
    cp_V_o_ap_vld : OUT STD_LOGIC;
    pp_tile_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    pp_tile_V_ce0 : OUT STD_LOGIC;
    pp_tile_V_we0 : OUT STD_LOGIC;
    pp_tile_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    pp_tile_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    pp_tile_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    pp_tile_V_ce1 : OUT STD_LOGIC;
    pp_tile_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    pp_rot_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    pp_rot_V_ce0 : OUT STD_LOGIC;
    pp_rot_V_we0 : OUT STD_LOGIC;
    pp_rot_V_d0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    pp_rot_V_q0 : IN STD_LOGIC_VECTOR (1 downto 0);
    pp_rot_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    pp_rot_V_ce1 : OUT STD_LOGIC;
    pp_rot_V_q1 : IN STD_LOGIC_VECTOR (1 downto 0);
    tiles_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    tiles_V_ce0 : OUT STD_LOGIC;
    tiles_V_q0 : IN STD_LOGIC_VECTOR (3 downto 0);
    tiles_V_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    tiles_V_ce1 : OUT STD_LOGIC;
    tiles_V_q1 : IN STD_LOGIC_VECTOR (3 downto 0);
    colours_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    colours_V_ce0 : OUT STD_LOGIC;
    colours_V_q0 : IN STD_LOGIC_VECTOR (35 downto 0);
    colours_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    colours_V_ce1 : OUT STD_LOGIC;
    colours_V_q1 : IN STD_LOGIC_VECTOR (35 downto 0) );
end;


architecture behav of solve is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (5 downto 0) := "000011";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (5 downto 0) := "000101";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (5 downto 0) := "000110";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (5 downto 0) := "000111";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (5 downto 0) := "001001";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (5 downto 0) := "001010";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (5 downto 0) := "001011";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (5 downto 0) := "001100";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (5 downto 0) := "001101";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (5 downto 0) := "001110";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (5 downto 0) := "001111";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (5 downto 0) := "010001";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (5 downto 0) := "010010";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (5 downto 0) := "010011";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (5 downto 0) := "010100";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (5 downto 0) := "010101";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (5 downto 0) := "010110";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (5 downto 0) := "010111";
    constant ap_ST_st25_fsm_24 : STD_LOGIC_VECTOR (5 downto 0) := "011000";
    constant ap_ST_st26_fsm_25 : STD_LOGIC_VECTOR (5 downto 0) := "011001";
    constant ap_ST_st27_fsm_26 : STD_LOGIC_VECTOR (5 downto 0) := "011010";
    constant ap_ST_st28_fsm_27 : STD_LOGIC_VECTOR (5 downto 0) := "011011";
    constant ap_ST_st29_fsm_28 : STD_LOGIC_VECTOR (5 downto 0) := "011100";
    constant ap_ST_st30_fsm_29 : STD_LOGIC_VECTOR (5 downto 0) := "011101";
    constant ap_ST_st31_fsm_30 : STD_LOGIC_VECTOR (5 downto 0) := "011110";
    constant ap_ST_st32_fsm_31 : STD_LOGIC_VECTOR (5 downto 0) := "011111";
    constant ap_ST_st33_fsm_32 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_ST_st34_fsm_33 : STD_LOGIC_VECTOR (5 downto 0) := "100001";
    constant ap_ST_st35_fsm_34 : STD_LOGIC_VECTOR (5 downto 0) := "100010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv36_1 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal reg_307 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_right_r_fu_235_ap_done : STD_LOGIC;
    signal grp_right_r_fu_235_ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_311 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_283_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_315 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_15_i_fu_406_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_319 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_26_reg_849 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_29_reg_937 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_506_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_890 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_reg_895 : STD_LOGIC_VECTOR (0 downto 0);
    signal pp_tile_V_addr_reg_932 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_1_fu_736_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_978 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_reg_983 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_right_r_fu_235_ap_start : STD_LOGIC;
    signal grp_right_r_fu_235_ap_idle : STD_LOGIC;
    signal grp_right_r_fu_235_ap_ready : STD_LOGIC;
    signal grp_right_r_fu_235_cp_V : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_right_r_fu_235_pp_rot_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_right_r_fu_235_pp_rot_V_ce0 : STD_LOGIC;
    signal grp_right_r_fu_235_pp_rot_V_we0 : STD_LOGIC;
    signal grp_right_r_fu_235_pp_rot_V_d0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_right_r_fu_235_pp_rot_V_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_right_r_fu_235_pp_tile_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_right_r_fu_235_pp_tile_V_ce0 : STD_LOGIC;
    signal grp_right_r_fu_235_pp_tile_V_we0 : STD_LOGIC;
    signal grp_right_r_fu_235_pp_tile_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_right_r_fu_235_pp_tile_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_right_r_fu_235_avail_V_i : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_right_r_fu_235_avail_V_o : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_right_r_fu_235_avail_V_o_ap_vld : STD_LOGIC;
    signal grp_right_r_fu_235_side_V : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_right_r_fu_235_tiles_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_right_r_fu_235_tiles_V_ce0 : STD_LOGIC;
    signal grp_right_r_fu_235_tiles_V_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_right_r_fu_235_colours_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_right_r_fu_235_colours_V_ce0 : STD_LOGIC;
    signal grp_right_r_fu_235_colours_V_q0 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_right_r_fu_235_colours_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_right_r_fu_235_colours_V_ce1 : STD_LOGIC;
    signal grp_right_r_fu_235_colours_V_q1 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_down_fu_253_ap_start : STD_LOGIC;
    signal grp_down_fu_253_ap_done : STD_LOGIC;
    signal grp_down_fu_253_ap_idle : STD_LOGIC;
    signal grp_down_fu_253_ap_ready : STD_LOGIC;
    signal grp_down_fu_253_avail_V_i : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_down_fu_253_avail_V_o : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_down_fu_253_avail_V_o_ap_vld : STD_LOGIC;
    signal grp_down_fu_253_cp_V_i : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_down_fu_253_cp_V_o : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_down_fu_253_cp_V_o_ap_vld : STD_LOGIC;
    signal grp_down_fu_253_side_V : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_down_fu_253_pp_tile_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_down_fu_253_pp_tile_V_ce0 : STD_LOGIC;
    signal grp_down_fu_253_pp_tile_V_we0 : STD_LOGIC;
    signal grp_down_fu_253_pp_tile_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_down_fu_253_pp_tile_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_down_fu_253_pp_tile_V_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_down_fu_253_pp_tile_V_ce1 : STD_LOGIC;
    signal grp_down_fu_253_pp_tile_V_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_down_fu_253_pp_rot_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_down_fu_253_pp_rot_V_ce0 : STD_LOGIC;
    signal grp_down_fu_253_pp_rot_V_we0 : STD_LOGIC;
    signal grp_down_fu_253_pp_rot_V_d0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_down_fu_253_pp_rot_V_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_down_fu_253_pp_rot_V_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_down_fu_253_pp_rot_V_ce1 : STD_LOGIC;
    signal grp_down_fu_253_pp_rot_V_q1 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_down_fu_253_tiles_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_down_fu_253_tiles_V_ce0 : STD_LOGIC;
    signal grp_down_fu_253_tiles_V_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_down_fu_253_tiles_V_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_down_fu_253_tiles_V_ce1 : STD_LOGIC;
    signal grp_down_fu_253_tiles_V_q1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_down_fu_253_colours_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_down_fu_253_colours_V_ce0 : STD_LOGIC;
    signal grp_down_fu_253_colours_V_q0 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_down_fu_253_colours_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_down_fu_253_colours_V_ce1 : STD_LOGIC;
    signal grp_down_fu_253_colours_V_q1 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_right_r_fu_235_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal grp_down_fu_253_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal tmp_i23_i_i_fu_426_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_440_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i2_i_fu_445_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_459_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_fu_472_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_i_i_fu_545_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_559_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_i_fu_617_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i23_i_i1_fu_656_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_fu_670_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i2_i1_fu_675_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_fu_689_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_fu_702_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_i_i1_fu_775_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_fu_789_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal avail_V_assign_fu_354_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal tmp_58_i_i_fu_632_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal tmp_59_i_i_fu_644_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_330_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_330_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_324_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_344_p4 : STD_LOGIC_VECTOR (34 downto 0);
    signal r_V_fu_372_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_V_fu_368_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_fu_372_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_cast_fu_378_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_fu_372_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_5_fu_392_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_V_3_fu_388_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_5_fu_392_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_5_fu_392_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_i_cast_fu_398_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_i_cast_16_fu_402_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_420_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_283_p2_temp: signed (8-1 downto 0);
    signal grp_fu_420_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_289_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_s_fu_432_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_295_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_4_fu_451_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_6_fu_464_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_65_i_i_cast_fu_477_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_5_i_i_fu_481_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_27_i_cast_fu_496_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_5_i_i_fu_481_p3_temp: signed (5-1 downto 0);
    signal tmp_26_i_cast_fu_492_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_27_i_cast_fu_496_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sel_tmp3_i_not_fu_500_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_420_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_6_fu_511_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_330_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_61_i_i_fu_523_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_6_fu_511_p1_temp: signed (8-1 downto 0);
    signal tmp_60_i_i_cast_fu_519_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_61_i_i_fu_523_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal this_assign_i_i_fu_529_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_301_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_8_fu_551_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_63_i_i_cast_fu_564_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_i_i_fu_568_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_23_i_cast_fu_583_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_i_i_fu_568_p3_temp: signed (5-1 downto 0);
    signal tmp_i3_cast_fu_579_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_23_i_cast_fu_583_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_24_i_fu_587_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_sel_tmp1_i_fu_593_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_611_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_611_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_i_i_18_fu_622_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal r_V_7_fu_626_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal tmp_13_fu_662_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_15_fu_681_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_17_fu_694_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_65_i_i45_cast_fu_707_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_5_i_i1_fu_711_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_27_i66_cast_fu_726_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_5_i_i1_fu_711_p3_temp: signed (5-1 downto 0);
    signal tmp_26_i65_cast_fu_722_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_27_i66_cast_fu_726_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sel_tmp3_i1_not_fu_730_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_611_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_9_fu_741_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_61_i_i1_fu_753_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_9_fu_741_p1_temp: signed (8-1 downto 0);
    signal tmp_60_i_i14_cast_fu_749_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_61_i_i1_fu_753_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal this_assign_i_i1_fu_759_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_fu_781_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_63_i_i30_cast_fu_794_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_i_i1_fu_798_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_23_i60_cast_fu_813_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_i_i1_fu_798_p3_temp: signed (5-1 downto 0);
    signal tmp_i59_cast_fu_809_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_23_i60_cast_fu_813_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_24_i1_fu_817_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_sel_tmp1_i1_fu_823_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal toplevel_udiv_8ns_8ns_8_11_U19_ap_start : STD_LOGIC;
    signal grp_fu_330_ce : STD_LOGIC;
    signal tmp_2_fu_382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal toplevel_sdiv_9s_9ns_9_12_U20_ap_start : STD_LOGIC;
    signal grp_fu_420_ce : STD_LOGIC;
    signal p_i_fu_598_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal toplevel_sdiv_9s_9ns_9_12_U21_ap_start : STD_LOGIC;
    signal grp_fu_611_ce : STD_LOGIC;
    signal p_i1_fu_828_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);

    component right_r IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        cp_V : IN STD_LOGIC_VECTOR (7 downto 0);
        pp_rot_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        pp_rot_V_ce0 : OUT STD_LOGIC;
        pp_rot_V_we0 : OUT STD_LOGIC;
        pp_rot_V_d0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        pp_rot_V_q0 : IN STD_LOGIC_VECTOR (1 downto 0);
        pp_tile_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        pp_tile_V_ce0 : OUT STD_LOGIC;
        pp_tile_V_we0 : OUT STD_LOGIC;
        pp_tile_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        pp_tile_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        avail_V_i : IN STD_LOGIC_VECTOR (35 downto 0);
        avail_V_o : OUT STD_LOGIC_VECTOR (35 downto 0);
        avail_V_o_ap_vld : OUT STD_LOGIC;
        side_V : IN STD_LOGIC_VECTOR (7 downto 0);
        tiles_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        tiles_V_ce0 : OUT STD_LOGIC;
        tiles_V_q0 : IN STD_LOGIC_VECTOR (3 downto 0);
        colours_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        colours_V_ce0 : OUT STD_LOGIC;
        colours_V_q0 : IN STD_LOGIC_VECTOR (35 downto 0);
        colours_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        colours_V_ce1 : OUT STD_LOGIC;
        colours_V_q1 : IN STD_LOGIC_VECTOR (35 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component down IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        avail_V_i : IN STD_LOGIC_VECTOR (35 downto 0);
        avail_V_o : OUT STD_LOGIC_VECTOR (35 downto 0);
        avail_V_o_ap_vld : OUT STD_LOGIC;
        cp_V_i : IN STD_LOGIC_VECTOR (7 downto 0);
        cp_V_o : OUT STD_LOGIC_VECTOR (7 downto 0);
        cp_V_o_ap_vld : OUT STD_LOGIC;
        side_V : IN STD_LOGIC_VECTOR (7 downto 0);
        pp_tile_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        pp_tile_V_ce0 : OUT STD_LOGIC;
        pp_tile_V_we0 : OUT STD_LOGIC;
        pp_tile_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        pp_tile_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        pp_tile_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        pp_tile_V_ce1 : OUT STD_LOGIC;
        pp_tile_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        pp_rot_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        pp_rot_V_ce0 : OUT STD_LOGIC;
        pp_rot_V_we0 : OUT STD_LOGIC;
        pp_rot_V_d0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        pp_rot_V_q0 : IN STD_LOGIC_VECTOR (1 downto 0);
        pp_rot_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        pp_rot_V_ce1 : OUT STD_LOGIC;
        pp_rot_V_q1 : IN STD_LOGIC_VECTOR (1 downto 0);
        tiles_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        tiles_V_ce0 : OUT STD_LOGIC;
        tiles_V_q0 : IN STD_LOGIC_VECTOR (3 downto 0);
        tiles_V_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        tiles_V_ce1 : OUT STD_LOGIC;
        tiles_V_q1 : IN STD_LOGIC_VECTOR (3 downto 0);
        colours_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        colours_V_ce0 : OUT STD_LOGIC;
        colours_V_q0 : IN STD_LOGIC_VECTOR (35 downto 0);
        colours_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        colours_V_ce1 : OUT STD_LOGIC;
        colours_V_q1 : IN STD_LOGIC_VECTOR (35 downto 0) );
    end component;


    component toplevel_udiv_8ns_8ns_8_11 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component toplevel_sdiv_9s_9ns_9_12 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;



begin
    grp_right_r_fu_235 : component right_r
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_right_r_fu_235_ap_start,
        ap_done => grp_right_r_fu_235_ap_done,
        ap_idle => grp_right_r_fu_235_ap_idle,
        ap_ready => grp_right_r_fu_235_ap_ready,
        cp_V => grp_right_r_fu_235_cp_V,
        pp_rot_V_address0 => grp_right_r_fu_235_pp_rot_V_address0,
        pp_rot_V_ce0 => grp_right_r_fu_235_pp_rot_V_ce0,
        pp_rot_V_we0 => grp_right_r_fu_235_pp_rot_V_we0,
        pp_rot_V_d0 => grp_right_r_fu_235_pp_rot_V_d0,
        pp_rot_V_q0 => grp_right_r_fu_235_pp_rot_V_q0,
        pp_tile_V_address0 => grp_right_r_fu_235_pp_tile_V_address0,
        pp_tile_V_ce0 => grp_right_r_fu_235_pp_tile_V_ce0,
        pp_tile_V_we0 => grp_right_r_fu_235_pp_tile_V_we0,
        pp_tile_V_d0 => grp_right_r_fu_235_pp_tile_V_d0,
        pp_tile_V_q0 => grp_right_r_fu_235_pp_tile_V_q0,
        avail_V_i => grp_right_r_fu_235_avail_V_i,
        avail_V_o => grp_right_r_fu_235_avail_V_o,
        avail_V_o_ap_vld => grp_right_r_fu_235_avail_V_o_ap_vld,
        side_V => grp_right_r_fu_235_side_V,
        tiles_V_address0 => grp_right_r_fu_235_tiles_V_address0,
        tiles_V_ce0 => grp_right_r_fu_235_tiles_V_ce0,
        tiles_V_q0 => grp_right_r_fu_235_tiles_V_q0,
        colours_V_address0 => grp_right_r_fu_235_colours_V_address0,
        colours_V_ce0 => grp_right_r_fu_235_colours_V_ce0,
        colours_V_q0 => grp_right_r_fu_235_colours_V_q0,
        colours_V_address1 => grp_right_r_fu_235_colours_V_address1,
        colours_V_ce1 => grp_right_r_fu_235_colours_V_ce1,
        colours_V_q1 => grp_right_r_fu_235_colours_V_q1,
        ap_return => grp_right_r_fu_235_ap_return);

    grp_down_fu_253 : component down
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_down_fu_253_ap_start,
        ap_done => grp_down_fu_253_ap_done,
        ap_idle => grp_down_fu_253_ap_idle,
        ap_ready => grp_down_fu_253_ap_ready,
        avail_V_i => grp_down_fu_253_avail_V_i,
        avail_V_o => grp_down_fu_253_avail_V_o,
        avail_V_o_ap_vld => grp_down_fu_253_avail_V_o_ap_vld,
        cp_V_i => grp_down_fu_253_cp_V_i,
        cp_V_o => grp_down_fu_253_cp_V_o,
        cp_V_o_ap_vld => grp_down_fu_253_cp_V_o_ap_vld,
        side_V => grp_down_fu_253_side_V,
        pp_tile_V_address0 => grp_down_fu_253_pp_tile_V_address0,
        pp_tile_V_ce0 => grp_down_fu_253_pp_tile_V_ce0,
        pp_tile_V_we0 => grp_down_fu_253_pp_tile_V_we0,
        pp_tile_V_d0 => grp_down_fu_253_pp_tile_V_d0,
        pp_tile_V_q0 => grp_down_fu_253_pp_tile_V_q0,
        pp_tile_V_address1 => grp_down_fu_253_pp_tile_V_address1,
        pp_tile_V_ce1 => grp_down_fu_253_pp_tile_V_ce1,
        pp_tile_V_q1 => grp_down_fu_253_pp_tile_V_q1,
        pp_rot_V_address0 => grp_down_fu_253_pp_rot_V_address0,
        pp_rot_V_ce0 => grp_down_fu_253_pp_rot_V_ce0,
        pp_rot_V_we0 => grp_down_fu_253_pp_rot_V_we0,
        pp_rot_V_d0 => grp_down_fu_253_pp_rot_V_d0,
        pp_rot_V_q0 => grp_down_fu_253_pp_rot_V_q0,
        pp_rot_V_address1 => grp_down_fu_253_pp_rot_V_address1,
        pp_rot_V_ce1 => grp_down_fu_253_pp_rot_V_ce1,
        pp_rot_V_q1 => grp_down_fu_253_pp_rot_V_q1,
        tiles_V_address0 => grp_down_fu_253_tiles_V_address0,
        tiles_V_ce0 => grp_down_fu_253_tiles_V_ce0,
        tiles_V_q0 => grp_down_fu_253_tiles_V_q0,
        tiles_V_address1 => grp_down_fu_253_tiles_V_address1,
        tiles_V_ce1 => grp_down_fu_253_tiles_V_ce1,
        tiles_V_q1 => grp_down_fu_253_tiles_V_q1,
        colours_V_address0 => grp_down_fu_253_colours_V_address0,
        colours_V_ce0 => grp_down_fu_253_colours_V_ce0,
        colours_V_q0 => grp_down_fu_253_colours_V_q0,
        colours_V_address1 => grp_down_fu_253_colours_V_address1,
        colours_V_ce1 => grp_down_fu_253_colours_V_ce1,
        colours_V_q1 => grp_down_fu_253_colours_V_q1);

    toplevel_udiv_8ns_8ns_8_11_U19 : component toplevel_udiv_8ns_8ns_8_11
    generic map (
        ID => 19,
        NUM_STAGE => 11,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => toplevel_udiv_8ns_8ns_8_11_U19_ap_start,
        din0 => grp_fu_330_p0,
        din1 => grp_fu_330_p1,
        ce => grp_fu_330_ce,
        dout => grp_fu_330_p2);

    toplevel_sdiv_9s_9ns_9_12_U20 : component toplevel_sdiv_9s_9ns_9_12
    generic map (
        ID => 20,
        NUM_STAGE => 12,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        dout_WIDTH => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => toplevel_sdiv_9s_9ns_9_12_U20_ap_start,
        din0 => grp_fu_420_p0,
        din1 => grp_fu_420_p1,
        ce => grp_fu_420_ce,
        dout => grp_fu_420_p2);

    toplevel_sdiv_9s_9ns_9_12_U21 : component toplevel_sdiv_9s_9ns_9_12
    generic map (
        ID => 21,
        NUM_STAGE => 12,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        dout_WIDTH => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => toplevel_sdiv_9s_9ns_9_12_U21_ap_start,
        din0 => grp_fu_611_p0,
        din1 => grp_fu_611_p1,
        ce => grp_fu_611_ce,
        dout => grp_fu_611_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- grp_down_fu_253_ap_start_ap_start_reg assign process. --
    grp_down_fu_253_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_down_fu_253_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
                    grp_down_fu_253_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_down_fu_253_ap_ready)) then 
                    grp_down_fu_253_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- grp_right_r_fu_235_ap_start_ap_start_reg assign process. --
    grp_right_r_fu_235_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_right_r_fu_235_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_ST_st19_fsm_18 = ap_CS_fsm)) then 
                    grp_right_r_fu_235_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_right_r_fu_235_ap_ready)) then 
                    grp_right_r_fu_235_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- reg_319 assign process. --
    reg_319_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st26_fsm_25 = ap_CS_fsm)) then 
                reg_319 <= tiles_V_q1;
            elsif ((((ap_ST_st8_fsm_7 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_26_reg_849)) or (ap_ST_st9_fsm_8 = ap_CS_fsm) or ((ap_ST_st25_fsm_24 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_29_reg_937)))) then 
                reg_319 <= tiles_V_q0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st21_fsm_20 = ap_CS_fsm)) then
                pp_tile_V_addr_reg_932 <= tmp_i_i_fu_617_p1(6 - 1 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st5_fsm_4 = ap_CS_fsm) or ((ap_ST_st20_fsm_19 = ap_CS_fsm) and not((ap_const_logic_0 = grp_right_r_fu_235_ap_done)) and not((grp_right_r_fu_235_ap_return = ap_const_lv1_0))))) then
                reg_307 <= side_V;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st5_fsm_4 = ap_CS_fsm) or ((ap_ST_st20_fsm_19 = ap_CS_fsm) and not((ap_const_logic_0 = grp_right_r_fu_235_ap_done))))) then
                reg_311 <= cp_V_i;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_ST_st20_fsm_19 = ap_CS_fsm) and not((ap_const_logic_0 = grp_right_r_fu_235_ap_done)) and not((grp_right_r_fu_235_ap_return = ap_const_lv1_0))) or ((ap_ST_st5_fsm_4 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_15_i_fu_406_p2)))) then
                reg_315 <= grp_fu_283_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st26_fsm_25 = ap_CS_fsm)) then
                tmp_1_reg_978 <= tmp_1_fu_736_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st16_fsm_15 = ap_CS_fsm)) then
                tmp_25_reg_895 <= this_assign_i_i_fu_529_p3(7 downto 7);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st6_fsm_5 = ap_CS_fsm)) then
                tmp_26_reg_849 <= grp_fu_324_p2(7 downto 7);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st33_fsm_32 = ap_CS_fsm)) then
                tmp_28_reg_983 <= this_assign_i_i1_fu_759_p3(7 downto 7);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st23_fsm_22 = ap_CS_fsm)) then
                tmp_29_reg_937 <= grp_fu_324_p2(7 downto 7);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st9_fsm_8 = ap_CS_fsm)) then
                tmp_reg_890 <= tmp_fu_506_p2;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start , ap_CS_fsm , grp_right_r_fu_235_ap_done , grp_right_r_fu_235_ap_return , tmp_15_i_fu_406_p2 , grp_down_fu_253_ap_done , tmp_2_fu_382_p2 , p_i_fu_598_p2 , p_i1_fu_828_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((ap_const_lv1_0 = tmp_2_fu_382_p2)) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                if (not((ap_const_logic_0 = grp_down_fu_253_ap_done))) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st5_fsm_4 => 
                if ((ap_const_lv1_0 = tmp_15_i_fu_406_p2)) then
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                if ((ap_const_lv1_0 = p_i_fu_598_p2)) then
                    ap_NS_fsm <= ap_ST_st19_fsm_18;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                if ((not((ap_const_logic_0 = grp_right_r_fu_235_ap_done)) and not((grp_right_r_fu_235_ap_return = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_st23_fsm_22;
                elsif ((not((ap_const_logic_0 = grp_right_r_fu_235_ap_done)) and (grp_right_r_fu_235_ap_return = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st21_fsm_20;
                else
                    ap_NS_fsm <= ap_ST_st20_fsm_19;
                end if;
            when ap_ST_st21_fsm_20 => 
                ap_NS_fsm <= ap_ST_st22_fsm_21;
            when ap_ST_st22_fsm_21 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st23_fsm_22 => 
                ap_NS_fsm <= ap_ST_st24_fsm_23;
            when ap_ST_st24_fsm_23 => 
                ap_NS_fsm <= ap_ST_st25_fsm_24;
            when ap_ST_st25_fsm_24 => 
                ap_NS_fsm <= ap_ST_st26_fsm_25;
            when ap_ST_st26_fsm_25 => 
                ap_NS_fsm <= ap_ST_st27_fsm_26;
            when ap_ST_st27_fsm_26 => 
                ap_NS_fsm <= ap_ST_st28_fsm_27;
            when ap_ST_st28_fsm_27 => 
                ap_NS_fsm <= ap_ST_st29_fsm_28;
            when ap_ST_st29_fsm_28 => 
                ap_NS_fsm <= ap_ST_st30_fsm_29;
            when ap_ST_st30_fsm_29 => 
                ap_NS_fsm <= ap_ST_st31_fsm_30;
            when ap_ST_st31_fsm_30 => 
                ap_NS_fsm <= ap_ST_st32_fsm_31;
            when ap_ST_st32_fsm_31 => 
                ap_NS_fsm <= ap_ST_st33_fsm_32;
            when ap_ST_st33_fsm_32 => 
                ap_NS_fsm <= ap_ST_st34_fsm_33;
            when ap_ST_st34_fsm_33 => 
                ap_NS_fsm <= ap_ST_st35_fsm_34;
            when ap_ST_st35_fsm_34 => 
                if ((ap_const_lv1_0 = p_i1_fu_828_p2)) then
                    ap_NS_fsm <= ap_ST_st19_fsm_18;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_CS_fsm, tmp_2_fu_382_p2)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm)) or ((ap_ST_st2_fsm_1 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_2_fu_382_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm, tmp_2_fu_382_p2)
    begin
        if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_2_fu_382_p2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    avail_V_assign_fu_354_p3 <= (tmp_7_fu_344_p4 & ap_const_lv1_0);

    -- avail_V_o assign process. --
    avail_V_o_assign_proc : process(ap_start, ap_CS_fsm, avail_V_i, grp_right_r_fu_235_avail_V_o, grp_right_r_fu_235_avail_V_o_ap_vld, grp_down_fu_253_avail_V_o, grp_down_fu_253_avail_V_o_ap_vld, avail_V_assign_fu_354_p3, tmp_58_i_i_fu_632_p2)
    begin
        if ((ap_ST_st22_fsm_21 = ap_CS_fsm)) then 
            avail_V_o <= tmp_58_i_i_fu_632_p2;
        elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)))) then 
            avail_V_o <= avail_V_assign_fu_354_p3;
        elsif ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = grp_down_fu_253_avail_V_o_ap_vld)) or ((ap_const_logic_1 = grp_down_fu_253_avail_V_o_ap_vld) and (ap_ST_st4_fsm_3 = ap_CS_fsm)))) then 
            avail_V_o <= grp_down_fu_253_avail_V_o;
        elsif ((((ap_ST_st19_fsm_18 = ap_CS_fsm) and (ap_const_logic_1 = grp_right_r_fu_235_avail_V_o_ap_vld)) or ((ap_ST_st20_fsm_19 = ap_CS_fsm) and (ap_const_logic_1 = grp_right_r_fu_235_avail_V_o_ap_vld)))) then 
            avail_V_o <= grp_right_r_fu_235_avail_V_o;
        else 
            avail_V_o <= avail_V_i;
        end if; 
    end process;


    -- avail_V_o_ap_vld assign process. --
    avail_V_o_ap_vld_assign_proc : process(ap_start, ap_CS_fsm, grp_right_r_fu_235_avail_V_o_ap_vld, grp_down_fu_253_avail_V_o_ap_vld)
    begin
        if ((((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0))) or (ap_ST_st22_fsm_21 = ap_CS_fsm))) then 
            avail_V_o_ap_vld <= ap_const_logic_1;
        elsif (((ap_ST_st3_fsm_2 = ap_CS_fsm) or (ap_ST_st4_fsm_3 = ap_CS_fsm))) then 
            avail_V_o_ap_vld <= grp_down_fu_253_avail_V_o_ap_vld;
        elsif (((ap_ST_st20_fsm_19 = ap_CS_fsm) or (ap_ST_st19_fsm_18 = ap_CS_fsm))) then 
            avail_V_o_ap_vld <= grp_right_r_fu_235_avail_V_o_ap_vld;
        else 
            avail_V_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    -- colours_V_address0 assign process. --
    colours_V_address0_assign_proc : process(ap_CS_fsm, grp_right_r_fu_235_colours_V_address0, grp_down_fu_253_colours_V_address0)
    begin
        if ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
            colours_V_address0 <= grp_down_fu_253_colours_V_address0;
        elsif ((ap_ST_st20_fsm_19 = ap_CS_fsm)) then 
            colours_V_address0 <= grp_right_r_fu_235_colours_V_address0;
        else 
            colours_V_address0 <= "XXXX";
        end if; 
    end process;


    -- colours_V_address1 assign process. --
    colours_V_address1_assign_proc : process(ap_CS_fsm, grp_right_r_fu_235_colours_V_address1, grp_down_fu_253_colours_V_address1)
    begin
        if ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
            colours_V_address1 <= grp_down_fu_253_colours_V_address1;
        elsif ((ap_ST_st20_fsm_19 = ap_CS_fsm)) then 
            colours_V_address1 <= grp_right_r_fu_235_colours_V_address1;
        else 
            colours_V_address1 <= "XXXX";
        end if; 
    end process;


    -- colours_V_ce0 assign process. --
    colours_V_ce0_assign_proc : process(ap_CS_fsm, grp_right_r_fu_235_colours_V_ce0, grp_down_fu_253_colours_V_ce0)
    begin
        if ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
            colours_V_ce0 <= grp_down_fu_253_colours_V_ce0;
        elsif ((ap_ST_st20_fsm_19 = ap_CS_fsm)) then 
            colours_V_ce0 <= grp_right_r_fu_235_colours_V_ce0;
        else 
            colours_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- colours_V_ce1 assign process. --
    colours_V_ce1_assign_proc : process(ap_CS_fsm, grp_right_r_fu_235_colours_V_ce1, grp_down_fu_253_colours_V_ce1)
    begin
        if ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
            colours_V_ce1 <= grp_down_fu_253_colours_V_ce1;
        elsif ((ap_ST_st20_fsm_19 = ap_CS_fsm)) then 
            colours_V_ce1 <= grp_right_r_fu_235_colours_V_ce1;
        else 
            colours_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- cp_V_o assign process. --
    cp_V_o_assign_proc : process(ap_CS_fsm, cp_V_i, grp_down_fu_253_cp_V_o, grp_down_fu_253_cp_V_o_ap_vld, tmp_59_i_i_fu_644_p2)
    begin
        if ((ap_ST_st22_fsm_21 = ap_CS_fsm)) then 
            cp_V_o <= tmp_59_i_i_fu_644_p2;
        elsif ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = grp_down_fu_253_cp_V_o_ap_vld)) or ((ap_ST_st4_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = grp_down_fu_253_cp_V_o_ap_vld)))) then 
            cp_V_o <= grp_down_fu_253_cp_V_o;
        else 
            cp_V_o <= cp_V_i;
        end if; 
    end process;


    -- cp_V_o_ap_vld assign process. --
    cp_V_o_ap_vld_assign_proc : process(ap_CS_fsm, grp_down_fu_253_cp_V_o_ap_vld)
    begin
        if ((ap_ST_st22_fsm_21 = ap_CS_fsm)) then 
            cp_V_o_ap_vld <= ap_const_logic_1;
        elsif (((ap_ST_st3_fsm_2 = ap_CS_fsm) or (ap_ST_st4_fsm_3 = ap_CS_fsm))) then 
            cp_V_o_ap_vld <= grp_down_fu_253_cp_V_o_ap_vld;
        else 
            cp_V_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    grp_down_fu_253_ap_start <= grp_down_fu_253_ap_start_ap_start_reg;
    grp_down_fu_253_avail_V_i <= avail_V_i;
    grp_down_fu_253_colours_V_q0 <= colours_V_q0;
    grp_down_fu_253_colours_V_q1 <= colours_V_q1;
    grp_down_fu_253_cp_V_i <= cp_V_i;
    grp_down_fu_253_pp_rot_V_q0 <= pp_rot_V_q0;
    grp_down_fu_253_pp_rot_V_q1 <= pp_rot_V_q1;
    grp_down_fu_253_pp_tile_V_q0 <= pp_tile_V_q0;
    grp_down_fu_253_pp_tile_V_q1 <= pp_tile_V_q1;
    grp_down_fu_253_side_V <= side_V;
    grp_down_fu_253_tiles_V_q0 <= tiles_V_q0;
    grp_down_fu_253_tiles_V_q1 <= tiles_V_q1;
    grp_fu_283_p2 <= std_logic_vector(unsigned(cp_V_i) + unsigned(ap_const_lv8_FF));
    grp_fu_289_p2 <= (pp_rot_V_q0 xor ap_const_lv2_2);
    grp_fu_295_p2 <= std_logic_vector(unsigned(pp_rot_V_q0) + unsigned(ap_const_lv2_3));
    grp_fu_301_p2 <= std_logic_vector(unsigned(pp_rot_V_q0) + unsigned(ap_const_lv2_1));
    grp_fu_324_p2 <= std_logic_vector(unsigned(reg_311) - unsigned(reg_307));
    grp_fu_330_ce <= ap_const_logic_1;
    grp_fu_330_p0 <= reg_311;
    grp_fu_330_p1 <= reg_307;
    grp_fu_420_ce <= ap_const_logic_1;
    
    grp_fu_283_p2_temp <= signed(grp_fu_283_p2);
    grp_fu_420_p0 <= std_logic_vector(resize(grp_fu_283_p2_temp,9));

    grp_fu_420_p1 <= std_logic_vector(resize(unsigned(side_V),9));

    -- grp_fu_611_ce assign process. --
    grp_fu_611_ce_assign_proc : process(ap_CS_fsm, grp_right_r_fu_235_ap_done, grp_right_r_fu_235_ap_return)
    begin
        if ((((ap_ST_st20_fsm_19 = ap_CS_fsm) and not((ap_const_logic_0 = grp_right_r_fu_235_ap_done)) and not((grp_right_r_fu_235_ap_return = ap_const_lv1_0))) or (ap_ST_st25_fsm_24 = ap_CS_fsm) or (ap_ST_st26_fsm_25 = ap_CS_fsm) or (ap_ST_st23_fsm_22 = ap_CS_fsm) or (ap_ST_st24_fsm_23 = ap_CS_fsm) or (ap_ST_st33_fsm_32 = ap_CS_fsm) or (ap_ST_st27_fsm_26 = ap_CS_fsm) or (ap_ST_st28_fsm_27 = ap_CS_fsm) or (ap_ST_st29_fsm_28 = ap_CS_fsm) or (ap_ST_st30_fsm_29 = ap_CS_fsm) or (ap_ST_st31_fsm_30 = ap_CS_fsm) or (ap_ST_st32_fsm_31 = ap_CS_fsm))) then 
            grp_fu_611_ce <= ap_const_logic_1;
        else 
            grp_fu_611_ce <= ap_const_logic_0;
        end if; 
    end process;

    
    grp_fu_283_p2_temp <= signed(grp_fu_283_p2);
    grp_fu_611_p0 <= std_logic_vector(resize(grp_fu_283_p2_temp,9));

    grp_fu_611_p1 <= std_logic_vector(resize(unsigned(side_V),9));
    grp_right_r_fu_235_ap_start <= grp_right_r_fu_235_ap_start_ap_start_reg;
    grp_right_r_fu_235_avail_V_i <= avail_V_i;
    grp_right_r_fu_235_colours_V_q0 <= colours_V_q0;
    grp_right_r_fu_235_colours_V_q1 <= colours_V_q1;
    grp_right_r_fu_235_cp_V <= cp_V_i;
    grp_right_r_fu_235_pp_rot_V_q0 <= pp_rot_V_q0;
    grp_right_r_fu_235_pp_tile_V_q0 <= pp_tile_V_q0;
    grp_right_r_fu_235_side_V <= side_V;
    grp_right_r_fu_235_tiles_V_q0 <= tiles_V_q0;
    lhs_V_3_fu_388_p1 <= std_logic_vector(resize(unsigned(side_V),16));
    lhs_V_fu_368_p1 <= std_logic_vector(resize(unsigned(side_V),16));
    not_sel_tmp1_i1_fu_823_p2 <= (tmp_24_i1_fu_817_p2 or tmp_28_reg_983);
    not_sel_tmp1_i_fu_593_p2 <= (tmp_24_i_fu_587_p2 or tmp_25_reg_895);
    p_5_i_i1_fu_711_p3 <= 
        ap_const_lv5_1F when (tmp_29_reg_937(0) = '1') else 
        tmp_65_i_i45_cast_fu_707_p1;
    p_5_i_i_fu_481_p3 <= 
        ap_const_lv5_1F when (tmp_26_reg_849(0) = '1') else 
        tmp_65_i_i_cast_fu_477_p1;
    p_i1_fu_828_p2 <= (not_sel_tmp1_i1_fu_823_p2 and tmp_1_reg_978);
    p_i_fu_598_p2 <= (not_sel_tmp1_i_fu_593_p2 and tmp_reg_890);
    p_i_i1_fu_798_p3 <= 
        ap_const_lv5_1F when (tmp_28_reg_983(0) = '1') else 
        tmp_63_i_i30_cast_fu_794_p1;
    p_i_i_fu_568_p3 <= 
        ap_const_lv5_1F when (tmp_25_reg_895(0) = '1') else 
        tmp_63_i_i_cast_fu_564_p1;

    -- pp_rot_V_address0 assign process. --
    pp_rot_V_address0_assign_proc : process(ap_CS_fsm, grp_right_r_fu_235_pp_rot_V_address0, grp_down_fu_253_pp_rot_V_address0, tmp_i23_i_i_fu_426_p1, tmp_i2_i_fu_445_p1, tmp_i_i_i_fu_545_p1, tmp_i23_i_i1_fu_656_p1, tmp_i2_i1_fu_675_p1, tmp_i_i_i1_fu_775_p1)
    begin
        if ((ap_ST_st33_fsm_32 = ap_CS_fsm)) then 
            pp_rot_V_address0 <= tmp_i_i_i1_fu_775_p1(6 - 1 downto 0);
        elsif ((ap_ST_st24_fsm_23 = ap_CS_fsm)) then 
            pp_rot_V_address0 <= tmp_i2_i1_fu_675_p1(6 - 1 downto 0);
        elsif ((ap_ST_st23_fsm_22 = ap_CS_fsm)) then 
            pp_rot_V_address0 <= tmp_i23_i_i1_fu_656_p1(6 - 1 downto 0);
        elsif ((ap_ST_st16_fsm_15 = ap_CS_fsm)) then 
            pp_rot_V_address0 <= tmp_i_i_i_fu_545_p1(6 - 1 downto 0);
        elsif ((ap_ST_st7_fsm_6 = ap_CS_fsm)) then 
            pp_rot_V_address0 <= tmp_i2_i_fu_445_p1(6 - 1 downto 0);
        elsif ((ap_ST_st6_fsm_5 = ap_CS_fsm)) then 
            pp_rot_V_address0 <= tmp_i23_i_i_fu_426_p1(6 - 1 downto 0);
        elsif ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
            pp_rot_V_address0 <= grp_down_fu_253_pp_rot_V_address0;
        elsif ((ap_ST_st20_fsm_19 = ap_CS_fsm)) then 
            pp_rot_V_address0 <= grp_right_r_fu_235_pp_rot_V_address0;
        else 
            pp_rot_V_address0 <= "XXXXXX";
        end if; 
    end process;

    pp_rot_V_address1 <= grp_down_fu_253_pp_rot_V_address1;

    -- pp_rot_V_ce0 assign process. --
    pp_rot_V_ce0_assign_proc : process(ap_CS_fsm, grp_right_r_fu_235_pp_rot_V_ce0, grp_down_fu_253_pp_rot_V_ce0)
    begin
        if (((ap_ST_st6_fsm_5 = ap_CS_fsm) or (ap_ST_st7_fsm_6 = ap_CS_fsm) or (ap_ST_st16_fsm_15 = ap_CS_fsm) or (ap_ST_st23_fsm_22 = ap_CS_fsm) or (ap_ST_st24_fsm_23 = ap_CS_fsm) or (ap_ST_st33_fsm_32 = ap_CS_fsm))) then 
            pp_rot_V_ce0 <= ap_const_logic_1;
        elsif ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
            pp_rot_V_ce0 <= grp_down_fu_253_pp_rot_V_ce0;
        elsif ((ap_ST_st20_fsm_19 = ap_CS_fsm)) then 
            pp_rot_V_ce0 <= grp_right_r_fu_235_pp_rot_V_ce0;
        else 
            pp_rot_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- pp_rot_V_ce1 assign process. --
    pp_rot_V_ce1_assign_proc : process(ap_CS_fsm, grp_down_fu_253_pp_rot_V_ce1)
    begin
        if ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
            pp_rot_V_ce1 <= grp_down_fu_253_pp_rot_V_ce1;
        else 
            pp_rot_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- pp_rot_V_d0 assign process. --
    pp_rot_V_d0_assign_proc : process(ap_CS_fsm, grp_right_r_fu_235_pp_rot_V_d0, grp_down_fu_253_pp_rot_V_d0)
    begin
        if ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
            pp_rot_V_d0 <= grp_down_fu_253_pp_rot_V_d0;
        elsif ((ap_ST_st20_fsm_19 = ap_CS_fsm)) then 
            pp_rot_V_d0 <= grp_right_r_fu_235_pp_rot_V_d0;
        else 
            pp_rot_V_d0 <= "XX";
        end if; 
    end process;


    -- pp_rot_V_we0 assign process. --
    pp_rot_V_we0_assign_proc : process(ap_CS_fsm, grp_right_r_fu_235_pp_rot_V_we0, grp_down_fu_253_pp_rot_V_we0)
    begin
        if ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
            pp_rot_V_we0 <= grp_down_fu_253_pp_rot_V_we0;
        elsif ((ap_ST_st20_fsm_19 = ap_CS_fsm)) then 
            pp_rot_V_we0 <= grp_right_r_fu_235_pp_rot_V_we0;
        else 
            pp_rot_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- pp_tile_V_address0 assign process. --
    pp_tile_V_address0_assign_proc : process(ap_CS_fsm, pp_tile_V_addr_reg_932, grp_right_r_fu_235_pp_tile_V_address0, grp_down_fu_253_pp_tile_V_address0, tmp_i23_i_i_fu_426_p1, tmp_i2_i_fu_445_p1, tmp_i_i_i_fu_545_p1, tmp_i_i_fu_617_p1, tmp_i23_i_i1_fu_656_p1, tmp_i2_i1_fu_675_p1, tmp_i_i_i1_fu_775_p1)
    begin
        if ((ap_ST_st22_fsm_21 = ap_CS_fsm)) then 
            pp_tile_V_address0 <= pp_tile_V_addr_reg_932;
        elsif ((ap_ST_st33_fsm_32 = ap_CS_fsm)) then 
            pp_tile_V_address0 <= tmp_i_i_i1_fu_775_p1(6 - 1 downto 0);
        elsif ((ap_ST_st24_fsm_23 = ap_CS_fsm)) then 
            pp_tile_V_address0 <= tmp_i2_i1_fu_675_p1(6 - 1 downto 0);
        elsif ((ap_ST_st23_fsm_22 = ap_CS_fsm)) then 
            pp_tile_V_address0 <= tmp_i23_i_i1_fu_656_p1(6 - 1 downto 0);
        elsif ((ap_ST_st21_fsm_20 = ap_CS_fsm)) then 
            pp_tile_V_address0 <= tmp_i_i_fu_617_p1(6 - 1 downto 0);
        elsif ((ap_ST_st16_fsm_15 = ap_CS_fsm)) then 
            pp_tile_V_address0 <= tmp_i_i_i_fu_545_p1(6 - 1 downto 0);
        elsif ((ap_ST_st7_fsm_6 = ap_CS_fsm)) then 
            pp_tile_V_address0 <= tmp_i2_i_fu_445_p1(6 - 1 downto 0);
        elsif ((ap_ST_st6_fsm_5 = ap_CS_fsm)) then 
            pp_tile_V_address0 <= tmp_i23_i_i_fu_426_p1(6 - 1 downto 0);
        elsif ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
            pp_tile_V_address0 <= grp_down_fu_253_pp_tile_V_address0;
        elsif ((ap_ST_st20_fsm_19 = ap_CS_fsm)) then 
            pp_tile_V_address0 <= grp_right_r_fu_235_pp_tile_V_address0;
        else 
            pp_tile_V_address0 <= "XXXXXX";
        end if; 
    end process;

    pp_tile_V_address1 <= grp_down_fu_253_pp_tile_V_address1;

    -- pp_tile_V_ce0 assign process. --
    pp_tile_V_ce0_assign_proc : process(ap_CS_fsm, grp_right_r_fu_235_pp_tile_V_ce0, grp_down_fu_253_pp_tile_V_ce0)
    begin
        if (((ap_ST_st6_fsm_5 = ap_CS_fsm) or (ap_ST_st7_fsm_6 = ap_CS_fsm) or (ap_ST_st16_fsm_15 = ap_CS_fsm) or (ap_ST_st21_fsm_20 = ap_CS_fsm) or (ap_ST_st23_fsm_22 = ap_CS_fsm) or (ap_ST_st24_fsm_23 = ap_CS_fsm) or (ap_ST_st33_fsm_32 = ap_CS_fsm) or (ap_ST_st22_fsm_21 = ap_CS_fsm))) then 
            pp_tile_V_ce0 <= ap_const_logic_1;
        elsif ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
            pp_tile_V_ce0 <= grp_down_fu_253_pp_tile_V_ce0;
        elsif ((ap_ST_st20_fsm_19 = ap_CS_fsm)) then 
            pp_tile_V_ce0 <= grp_right_r_fu_235_pp_tile_V_ce0;
        else 
            pp_tile_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- pp_tile_V_ce1 assign process. --
    pp_tile_V_ce1_assign_proc : process(ap_CS_fsm, grp_down_fu_253_pp_tile_V_ce1)
    begin
        if ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
            pp_tile_V_ce1 <= grp_down_fu_253_pp_tile_V_ce1;
        else 
            pp_tile_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- pp_tile_V_d0 assign process. --
    pp_tile_V_d0_assign_proc : process(ap_CS_fsm, grp_right_r_fu_235_pp_tile_V_d0, grp_down_fu_253_pp_tile_V_d0)
    begin
        if ((ap_ST_st22_fsm_21 = ap_CS_fsm)) then 
            pp_tile_V_d0 <= ap_const_lv8_0;
        elsif ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
            pp_tile_V_d0 <= grp_down_fu_253_pp_tile_V_d0;
        elsif ((ap_ST_st20_fsm_19 = ap_CS_fsm)) then 
            pp_tile_V_d0 <= grp_right_r_fu_235_pp_tile_V_d0;
        else 
            pp_tile_V_d0 <= "XXXXXXXX";
        end if; 
    end process;


    -- pp_tile_V_we0 assign process. --
    pp_tile_V_we0_assign_proc : process(ap_CS_fsm, grp_right_r_fu_235_pp_tile_V_we0, grp_down_fu_253_pp_tile_V_we0)
    begin
        if (((ap_ST_st22_fsm_21 = ap_CS_fsm))) then 
            pp_tile_V_we0 <= ap_const_logic_1;
        elsif ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
            pp_tile_V_we0 <= grp_down_fu_253_pp_tile_V_we0;
        elsif ((ap_ST_st20_fsm_19 = ap_CS_fsm)) then 
            pp_tile_V_we0 <= grp_right_r_fu_235_pp_tile_V_we0;
        else 
            pp_tile_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    r_V_5_fu_392_p0 <= lhs_V_3_fu_388_p1(8 - 1 downto 0);
    r_V_5_fu_392_p1 <= lhs_V_3_fu_388_p1(8 - 1 downto 0);
    r_V_5_fu_392_p2 <= std_logic_vector(resize(unsigned(r_V_5_fu_392_p0) * unsigned(r_V_5_fu_392_p1), 16));
    r_V_6_fu_511_p1 <= grp_fu_420_p2(8 - 1 downto 0);
    r_V_7_fu_626_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv36_1),to_integer(unsigned('0' & tmp_i_i_18_fu_622_p1(31-1 downto 0)))));
    r_V_9_fu_741_p1 <= grp_fu_611_p2(8 - 1 downto 0);
    r_V_fu_372_p0 <= lhs_V_fu_368_p1(8 - 1 downto 0);
    r_V_fu_372_p1 <= lhs_V_fu_368_p1(8 - 1 downto 0);
    r_V_fu_372_p2 <= std_logic_vector(resize(unsigned(r_V_fu_372_p0) * unsigned(r_V_fu_372_p1), 16));
    sel_tmp3_i1_not_fu_730_p2 <= "1" when (tmp_26_i65_cast_fu_722_p1 = tmp_27_i66_cast_fu_726_p1) else "0";
    sel_tmp3_i_not_fu_500_p2 <= "1" when (tmp_26_i_cast_fu_492_p1 = tmp_27_i_cast_fu_496_p1) else "0";
    this_assign_i_i1_fu_759_p3 <= 
        reg_315 when (tmp_61_i_i1_fu_753_p2(0) = '1') else 
        ap_const_lv8_FF;
    this_assign_i_i_fu_529_p3 <= 
        reg_315 when (tmp_61_i_i_fu_523_p2(0) = '1') else 
        ap_const_lv8_FF;

    -- tiles_V_address0 assign process. --
    tiles_V_address0_assign_proc : process(ap_CS_fsm, grp_right_r_fu_235_tiles_V_address0, grp_down_fu_253_tiles_V_address0, tmp_3_fu_440_p1, tmp_5_fu_459_p1, tmp_14_fu_670_p1, tmp_18_fu_702_p1)
    begin
        if ((ap_ST_st25_fsm_24 = ap_CS_fsm)) then 
            tiles_V_address0 <= tmp_18_fu_702_p1(8 - 1 downto 0);
        elsif ((ap_ST_st24_fsm_23 = ap_CS_fsm)) then 
            tiles_V_address0 <= tmp_14_fu_670_p1(8 - 1 downto 0);
        elsif ((ap_ST_st8_fsm_7 = ap_CS_fsm)) then 
            tiles_V_address0 <= tmp_5_fu_459_p1(8 - 1 downto 0);
        elsif ((ap_ST_st7_fsm_6 = ap_CS_fsm)) then 
            tiles_V_address0 <= tmp_3_fu_440_p1(8 - 1 downto 0);
        elsif ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
            tiles_V_address0 <= grp_down_fu_253_tiles_V_address0;
        elsif ((ap_ST_st20_fsm_19 = ap_CS_fsm)) then 
            tiles_V_address0 <= grp_right_r_fu_235_tiles_V_address0;
        else 
            tiles_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    -- tiles_V_address1 assign process. --
    tiles_V_address1_assign_proc : process(ap_CS_fsm, grp_down_fu_253_tiles_V_address1, tmp_10_fu_472_p1, tmp_9_fu_559_p1, tmp_16_fu_689_p1, tmp_12_fu_789_p1)
    begin
        if ((ap_ST_st34_fsm_33 = ap_CS_fsm)) then 
            tiles_V_address1 <= tmp_12_fu_789_p1(8 - 1 downto 0);
        elsif ((ap_ST_st25_fsm_24 = ap_CS_fsm)) then 
            tiles_V_address1 <= tmp_16_fu_689_p1(8 - 1 downto 0);
        elsif ((ap_ST_st17_fsm_16 = ap_CS_fsm)) then 
            tiles_V_address1 <= tmp_9_fu_559_p1(8 - 1 downto 0);
        elsif ((ap_ST_st8_fsm_7 = ap_CS_fsm)) then 
            tiles_V_address1 <= tmp_10_fu_472_p1(8 - 1 downto 0);
        elsif ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
            tiles_V_address1 <= grp_down_fu_253_tiles_V_address1;
        else 
            tiles_V_address1 <= "XXXXXXXX";
        end if; 
    end process;


    -- tiles_V_ce0 assign process. --
    tiles_V_ce0_assign_proc : process(ap_CS_fsm, grp_right_r_fu_235_tiles_V_ce0, grp_down_fu_253_tiles_V_ce0)
    begin
        if (((ap_ST_st8_fsm_7 = ap_CS_fsm) or (ap_ST_st25_fsm_24 = ap_CS_fsm) or (ap_ST_st7_fsm_6 = ap_CS_fsm) or (ap_ST_st24_fsm_23 = ap_CS_fsm))) then 
            tiles_V_ce0 <= ap_const_logic_1;
        elsif ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
            tiles_V_ce0 <= grp_down_fu_253_tiles_V_ce0;
        elsif ((ap_ST_st20_fsm_19 = ap_CS_fsm)) then 
            tiles_V_ce0 <= grp_right_r_fu_235_tiles_V_ce0;
        else 
            tiles_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- tiles_V_ce1 assign process. --
    tiles_V_ce1_assign_proc : process(ap_CS_fsm, grp_down_fu_253_tiles_V_ce1)
    begin
        if (((ap_ST_st8_fsm_7 = ap_CS_fsm) or (ap_ST_st25_fsm_24 = ap_CS_fsm) or (ap_ST_st17_fsm_16 = ap_CS_fsm) or (ap_ST_st34_fsm_33 = ap_CS_fsm))) then 
            tiles_V_ce1 <= ap_const_logic_1;
        elsif ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
            tiles_V_ce1 <= grp_down_fu_253_tiles_V_ce1;
        else 
            tiles_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_472_p1 <= std_logic_vector(resize(unsigned(tmp_6_fu_464_p3),64));
    tmp_11_fu_781_p3 <= (pp_tile_V_q0 & grp_fu_301_p2);
    tmp_12_fu_789_p1 <= std_logic_vector(resize(unsigned(tmp_11_fu_781_p3),64));
    tmp_13_fu_662_p3 <= (pp_tile_V_q0 & grp_fu_289_p2);
    tmp_14_fu_670_p1 <= std_logic_vector(resize(unsigned(tmp_13_fu_662_p3),64));
    tmp_15_fu_681_p3 <= (pp_tile_V_q0 & grp_fu_295_p2);
    tmp_15_i_fu_406_p2 <= "1" when (tmp_i_cast_fu_398_p1 = tmp_i_cast_16_fu_402_p1) else "0";
    tmp_16_fu_689_p1 <= std_logic_vector(resize(unsigned(tmp_15_fu_681_p3),64));
    tmp_17_fu_694_p3 <= (pp_tile_V_q0 & pp_rot_V_q0);
    tmp_18_fu_702_p1 <= std_logic_vector(resize(unsigned(tmp_17_fu_694_p3),64));
    tmp_1_fu_736_p2 <= (tmp_29_reg_937 or sel_tmp3_i1_not_fu_730_p2);
    
    p_i_i1_fu_798_p3_temp <= signed(p_i_i1_fu_798_p3);
    tmp_23_i60_cast_fu_813_p0 <= std_logic_vector(resize(p_i_i1_fu_798_p3_temp,8));

    tmp_23_i60_cast_fu_813_p1 <= std_logic_vector(resize(unsigned(tmp_23_i60_cast_fu_813_p0),9));
    
    p_i_i_fu_568_p3_temp <= signed(p_i_i_fu_568_p3);
    tmp_23_i_cast_fu_583_p0 <= std_logic_vector(resize(p_i_i_fu_568_p3_temp,8));

    tmp_23_i_cast_fu_583_p1 <= std_logic_vector(resize(unsigned(tmp_23_i_cast_fu_583_p0),9));
    tmp_24_i1_fu_817_p2 <= "1" when (tmp_i59_cast_fu_809_p1 = tmp_23_i60_cast_fu_813_p1) else "0";
    tmp_24_i_fu_587_p2 <= "1" when (tmp_i3_cast_fu_579_p1 = tmp_23_i_cast_fu_583_p1) else "0";
    tmp_26_i65_cast_fu_722_p1 <= std_logic_vector(resize(unsigned(tiles_V_q0),9));
    tmp_26_i_cast_fu_492_p1 <= std_logic_vector(resize(unsigned(tiles_V_q1),9));
    
    p_5_i_i1_fu_711_p3_temp <= signed(p_5_i_i1_fu_711_p3);
    tmp_27_i66_cast_fu_726_p0 <= std_logic_vector(resize(p_5_i_i1_fu_711_p3_temp,8));

    tmp_27_i66_cast_fu_726_p1 <= std_logic_vector(resize(unsigned(tmp_27_i66_cast_fu_726_p0),9));
    
    p_5_i_i_fu_481_p3_temp <= signed(p_5_i_i_fu_481_p3);
    tmp_27_i_cast_fu_496_p0 <= std_logic_vector(resize(p_5_i_i_fu_481_p3_temp,8));

    tmp_27_i_cast_fu_496_p1 <= std_logic_vector(resize(unsigned(tmp_27_i_cast_fu_496_p0),9));
    tmp_2_fu_382_p2 <= "1" when (unsigned(tmp_cast_fu_378_p1) < unsigned(r_V_fu_372_p2)) else "0";
    tmp_3_fu_440_p1 <= std_logic_vector(resize(unsigned(tmp_s_fu_432_p3),64));
    tmp_4_fu_451_p3 <= (pp_tile_V_q0 & grp_fu_295_p2);
    tmp_58_i_i_fu_632_p2 <= (avail_V_i or r_V_7_fu_626_p2);
    tmp_59_i_i_fu_644_p2 <= std_logic_vector(unsigned(reg_311) + unsigned(ap_const_lv8_FF));
    tmp_5_fu_459_p1 <= std_logic_vector(resize(unsigned(tmp_4_fu_451_p3),64));
    tmp_60_i_i14_cast_fu_749_p1 <= std_logic_vector(resize(unsigned(grp_fu_330_p2),9));
    tmp_60_i_i_cast_fu_519_p1 <= std_logic_vector(resize(unsigned(grp_fu_330_p2),9));
    
    r_V_9_fu_741_p1_temp <= signed(r_V_9_fu_741_p1);
    tmp_61_i_i1_fu_753_p0 <= std_logic_vector(resize(r_V_9_fu_741_p1_temp,9));

    tmp_61_i_i1_fu_753_p2 <= "1" when (tmp_61_i_i1_fu_753_p0 = tmp_60_i_i14_cast_fu_749_p1) else "0";
    
    r_V_6_fu_511_p1_temp <= signed(r_V_6_fu_511_p1);
    tmp_61_i_i_fu_523_p0 <= std_logic_vector(resize(r_V_6_fu_511_p1_temp,9));

    tmp_61_i_i_fu_523_p2 <= "1" when (tmp_61_i_i_fu_523_p0 = tmp_60_i_i_cast_fu_519_p1) else "0";
    tmp_63_i_i30_cast_fu_794_p1 <= std_logic_vector(resize(unsigned(tiles_V_q1),5));
    tmp_63_i_i_cast_fu_564_p1 <= std_logic_vector(resize(unsigned(tiles_V_q1),5));
    tmp_65_i_i45_cast_fu_707_p1 <= std_logic_vector(resize(unsigned(reg_319),5));
    tmp_65_i_i_cast_fu_477_p1 <= std_logic_vector(resize(unsigned(reg_319),5));
    tmp_6_fu_464_p3 <= (pp_tile_V_q0 & pp_rot_V_q0);
    tmp_7_fu_344_p4 <= avail_V_i(35 downto 1);
    tmp_8_fu_551_p3 <= (pp_tile_V_q0 & grp_fu_301_p2);
    tmp_9_fu_559_p1 <= std_logic_vector(resize(unsigned(tmp_8_fu_551_p3),64));
    tmp_cast_fu_378_p1 <= std_logic_vector(resize(unsigned(cp_V_i),16));
    tmp_fu_506_p2 <= (tmp_26_reg_849 or sel_tmp3_i_not_fu_500_p2);
    tmp_i23_i_i1_fu_656_p1 <= std_logic_vector(resize(unsigned(grp_fu_324_p2),64));
    tmp_i23_i_i_fu_426_p1 <= std_logic_vector(resize(unsigned(grp_fu_324_p2),64));
    tmp_i2_i1_fu_675_p1 <= std_logic_vector(resize(unsigned(reg_311),64));
    tmp_i2_i_fu_445_p1 <= std_logic_vector(resize(unsigned(reg_311),64));
    tmp_i3_cast_fu_579_p1 <= std_logic_vector(resize(unsigned(reg_319),9));
    tmp_i59_cast_fu_809_p1 <= std_logic_vector(resize(unsigned(reg_319),9));
    tmp_i_cast_16_fu_402_p1 <= std_logic_vector(resize(unsigned(r_V_5_fu_392_p2),17));
    tmp_i_cast_fu_398_p1 <= std_logic_vector(resize(unsigned(cp_V_i),17));
    tmp_i_i_18_fu_622_p1 <= std_logic_vector(resize(unsigned(pp_tile_V_q0),36));
    tmp_i_i_fu_617_p1 <= std_logic_vector(resize(unsigned(reg_311),64));
    tmp_i_i_i1_fu_775_p1 <= std_logic_vector(resize(unsigned(this_assign_i_i1_fu_759_p3),64));
    tmp_i_i_i_fu_545_p1 <= std_logic_vector(resize(unsigned(this_assign_i_i_fu_529_p3),64));
    tmp_s_fu_432_p3 <= (pp_tile_V_q0 & grp_fu_289_p2);

    -- toplevel_sdiv_9s_9ns_9_12_U20_ap_start assign process. --
    toplevel_sdiv_9s_9ns_9_12_U20_ap_start_assign_proc : process(ap_CS_fsm, tmp_15_i_fu_406_p2)
    begin
        if (((ap_ST_st5_fsm_4 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_15_i_fu_406_p2))) then 
            toplevel_sdiv_9s_9ns_9_12_U20_ap_start <= ap_const_logic_1;
        else 
            toplevel_sdiv_9s_9ns_9_12_U20_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    -- toplevel_sdiv_9s_9ns_9_12_U21_ap_start assign process. --
    toplevel_sdiv_9s_9ns_9_12_U21_ap_start_assign_proc : process(ap_CS_fsm, grp_right_r_fu_235_ap_done, grp_right_r_fu_235_ap_return)
    begin
        if (((ap_ST_st20_fsm_19 = ap_CS_fsm) and not((ap_const_logic_0 = grp_right_r_fu_235_ap_done)) and not((grp_right_r_fu_235_ap_return = ap_const_lv1_0)))) then 
            toplevel_sdiv_9s_9ns_9_12_U21_ap_start <= ap_const_logic_1;
        else 
            toplevel_sdiv_9s_9ns_9_12_U21_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    -- toplevel_udiv_8ns_8ns_8_11_U19_ap_start assign process. --
    toplevel_udiv_8ns_8ns_8_11_U19_ap_start_assign_proc : process(ap_CS_fsm)
    begin
        if (((ap_ST_st6_fsm_5 = ap_CS_fsm) or (ap_ST_st23_fsm_22 = ap_CS_fsm))) then 
            toplevel_udiv_8ns_8ns_8_11_U19_ap_start <= ap_const_logic_1;
        else 
            toplevel_udiv_8ns_8ns_8_11_U19_ap_start <= ap_const_logic_0;
        end if; 
    end process;

end behav;
