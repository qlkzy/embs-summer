-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2013.4
-- Copyright (C) 2013 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity down is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ntiles_V : IN STD_LOGIC_VECTOR (7 downto 0);
    cp_V_i : IN STD_LOGIC_VECTOR (7 downto 0);
    cp_V_o : OUT STD_LOGIC_VECTOR (7 downto 0);
    cp_V_o_ap_vld : OUT STD_LOGIC;
    avail_V_i : IN STD_LOGIC_VECTOR (35 downto 0);
    avail_V_o : OUT STD_LOGIC_VECTOR (35 downto 0);
    avail_V_o_ap_vld : OUT STD_LOGIC;
    side_V : IN STD_LOGIC_VECTOR (7 downto 0);
    pp_tile_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    pp_tile_V_ce0 : OUT STD_LOGIC;
    pp_tile_V_we0 : OUT STD_LOGIC;
    pp_tile_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    pp_tile_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    pp_rot_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    pp_rot_V_ce0 : OUT STD_LOGIC;
    pp_rot_V_we0 : OUT STD_LOGIC;
    pp_rot_V_d0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    pp_rot_V_q0 : IN STD_LOGIC_VECTOR (1 downto 0);
    tiles_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    tiles_V_ce0 : OUT STD_LOGIC;
    tiles_V_q0 : IN STD_LOGIC_VECTOR (3 downto 0);
    colours_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    colours_V_ce0 : OUT STD_LOGIC;
    colours_V_q0 : IN STD_LOGIC_VECTOR (35 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of down is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (4 downto 0) := "01011";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (4 downto 0) := "01100";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (4 downto 0) := "01101";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (4 downto 0) := "01110";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv36_FFFFFFFFF : STD_LOGIC_VECTOR (35 downto 0) := "111111111111111111111111111111111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv36_1 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000001";
    constant ap_const_lv36_0 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal t_V_reg_425 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_cast_25_fu_211_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal cp_V_i_temp: signed (8-1 downto 0);
    signal tmp_7_fu_215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_435 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_4_fu_221_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_4_reg_439 : STD_LOGIC_VECTOR (7 downto 0);
    signal possible_V_reg_445 : STD_LOGIC_VECTOR (35 downto 0);
    signal tmp_i_fu_237_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_reg_451 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_40_tr_i_fu_243_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_i_26_fu_271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_26_reg_466 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_36_reg_495 : STD_LOGIC_VECTOR (0 downto 0);
    signal agg_result_V_i2_fu_349_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal agg_result_V_i2_reg_520 : STD_LOGIC_VECTOR (35 downto 0);
    signal tmp2_fu_356_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal tmp2_reg_525 : STD_LOGIC_VECTOR (35 downto 0);
    signal t_fu_366_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal agg_result_V_i_reg_147 : STD_LOGIC_VECTOR (35 downto 0);
    signal op2_assign_reg_161 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_392_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_361_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_s_phi_fu_177_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_s_reg_173 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i_fu_277_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_fu_296_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_i_fu_301_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_i3_fu_319_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_32_fu_339_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i7_fu_344_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_398_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_4_reg_439_temp: signed (8-1 downto 0);
    signal tmp_4_fu_409_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal tmp_cast_fu_197_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_7_fu_215_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal op2_assign_4_fu_201_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_247_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_247_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_257_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_4_fu_221_p2_temp: signed (8-1 downto 0);
    signal grp_fu_257_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_247_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_257_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_11_fu_263_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_12_fu_267_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_s_fu_282_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_288_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal up_V_fu_306_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_2_fu_325_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_31_fu_331_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_s_fu_372_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal r_V_13_fu_376_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal tmp3_fu_382_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal r_V_fu_387_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal p_3_fu_403_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal toplevel_sdiv_9s_9ns_9_12_U1_ap_start : STD_LOGIC;
    signal grp_fu_247_ce : STD_LOGIC;
    signal toplevel_sdiv_9s_9ns_9_12_U2_ap_start : STD_LOGIC;
    signal grp_fu_257_ce : STD_LOGIC;
    signal ap_return_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_bdd_374 : BOOLEAN;
    signal ap_sig_bdd_149 : BOOLEAN;

    component toplevel_sdiv_9s_9ns_9_12 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;



begin
    toplevel_sdiv_9s_9ns_9_12_U1 : component toplevel_sdiv_9s_9ns_9_12
    generic map (
        ID => 1,
        NUM_STAGE => 12,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        dout_WIDTH => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => toplevel_sdiv_9s_9ns_9_12_U1_ap_start,
        din0 => grp_fu_247_p0,
        din1 => grp_fu_247_p1,
        ce => grp_fu_247_ce,
        dout => grp_fu_247_p2);

    toplevel_sdiv_9s_9ns_9_12_U2 : component toplevel_sdiv_9s_9ns_9_12
    generic map (
        ID => 2,
        NUM_STAGE => 12,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        dout_WIDTH => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => toplevel_sdiv_9s_9ns_9_12_U2_ap_start,
        din0 => grp_fu_257_p0,
        din1 => grp_fu_257_p1,
        ce => grp_fu_257_ce,
        dout => grp_fu_257_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_return_preg assign process. --
    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv1_0;
            else
                if (((ap_ST_st19_fsm_18 = ap_CS_fsm) and ((tmp_7_reg_435 = ap_const_lv1_0) or (ap_const_lv1_0 = tmp_2_fu_392_p2) or (ap_const_lv1_0 = tmp_9_fu_361_p2)))) then 
                    ap_return_preg <= p_s_phi_fu_177_p6;
                end if; 
            end if;
        end if;
    end process;


    -- agg_result_V_i_reg_147 assign process. --
    agg_result_V_i_reg_147_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)) and not((tmp_7_fu_215_p2 = ap_const_lv1_0)) and not((ap_const_lv1_0 = tmp_i_fu_237_p2))) or ((ap_ST_st12_fsm_11 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_i_26_fu_271_p2)))) then 
                agg_result_V_i_reg_147 <= ap_const_lv36_FFFFFFFFF;
            elsif (((ap_ST_st15_fsm_14 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_i_reg_451) and not((ap_const_lv1_0 = tmp_i_26_reg_466)))) then 
                agg_result_V_i_reg_147 <= colours_V_q0;
            end if; 
        end if;
    end process;

    -- op2_assign_reg_161 assign process. --
    op2_assign_reg_161_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st19_fsm_18 = ap_CS_fsm) and not((tmp_7_reg_435 = ap_const_lv1_0)) and not((ap_const_lv1_0 = tmp_2_fu_392_p2)) and not((ap_const_lv1_0 = tmp_9_fu_361_p2)))) then 
                op2_assign_reg_161 <= t_fu_366_p2;
            elsif ((ap_ST_st18_fsm_17 = ap_CS_fsm)) then 
                op2_assign_reg_161 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    -- p_s_reg_173 assign process. --
    p_s_reg_173_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)) and (tmp_7_fu_215_p2 = ap_const_lv1_0)) or ((ap_ST_st19_fsm_18 = ap_CS_fsm) and not((tmp_7_reg_435 = ap_const_lv1_0)) and (ap_const_lv1_0 = tmp_9_fu_361_p2)))) then 
                p_s_reg_173 <= ap_const_lv1_0;
            elsif (((ap_ST_st19_fsm_18 = ap_CS_fsm) and not((tmp_7_reg_435 = ap_const_lv1_0)) and (ap_const_lv1_0 = tmp_2_fu_392_p2) and not((ap_const_lv1_0 = tmp_9_fu_361_p2)))) then 
                p_s_reg_173 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st18_fsm_17 = ap_CS_fsm)) then
                agg_result_V_i2_reg_520 <= agg_result_V_i2_fu_349_p3;
                tmp2_reg_525 <= tmp2_fu_356_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)) and not((tmp_7_fu_215_p2 = ap_const_lv1_0)))) then
                p_4_reg_439 <= p_4_fu_221_p2;
                possible_V_reg_445 <= avail_V_i;
                tmp_i_reg_451 <= tmp_i_fu_237_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)))) then
                t_V_reg_425 <= cp_V_i;
                tmp_7_reg_435 <= tmp_7_fu_215_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st15_fsm_14 = ap_CS_fsm)) then
                tmp_36_reg_495 <= up_V_fu_306_p2(7 downto 7);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st12_fsm_11 = ap_CS_fsm)) then
                tmp_i_26_reg_466 <= tmp_i_26_fu_271_p2;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start , ap_CS_fsm , tmp_7_fu_215_p2 , tmp_7_reg_435 , tmp_i_fu_237_p2 , tmp_i_26_fu_271_p2 , tmp_2_fu_392_p2 , tmp_9_fu_361_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if ((not((ap_start = ap_const_logic_0)) and not((tmp_7_fu_215_p2 = ap_const_lv1_0)) and not((ap_const_lv1_0 = tmp_i_fu_237_p2)))) then
                    ap_NS_fsm <= ap_ST_st15_fsm_14;
                elsif ((not((ap_start = ap_const_logic_0)) and not((tmp_7_fu_215_p2 = ap_const_lv1_0)) and (ap_const_lv1_0 = tmp_i_fu_237_p2))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                elsif ((not((ap_start = ap_const_logic_0)) and (tmp_7_fu_215_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st19_fsm_18;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                if ((ap_const_lv1_0 = tmp_i_26_fu_271_p2)) then
                    ap_NS_fsm <= ap_ST_st15_fsm_14;
                else
                    ap_NS_fsm <= ap_ST_st13_fsm_12;
                end if;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                if (((tmp_7_reg_435 = ap_const_lv1_0) or (ap_const_lv1_0 = tmp_2_fu_392_p2) or (ap_const_lv1_0 = tmp_9_fu_361_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st19_fsm_18;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    agg_result_V_i2_fu_349_p3 <= 
        ap_const_lv36_FFFFFFFFF when (tmp_36_reg_495(0) = '1') else 
        colours_V_q0;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_CS_fsm, tmp_7_reg_435, tmp_2_fu_392_p2, tmp_9_fu_361_p2)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm)) or ((ap_ST_st19_fsm_18 = ap_CS_fsm) and ((tmp_7_reg_435 = ap_const_lv1_0) or (ap_const_lv1_0 = tmp_2_fu_392_p2) or (ap_const_lv1_0 = tmp_9_fu_361_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm, tmp_7_reg_435, tmp_2_fu_392_p2, tmp_9_fu_361_p2)
    begin
        if (((ap_ST_st19_fsm_18 = ap_CS_fsm) and ((tmp_7_reg_435 = ap_const_lv1_0) or (ap_const_lv1_0 = tmp_2_fu_392_p2) or (ap_const_lv1_0 = tmp_9_fu_361_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_return assign process. --
    ap_return_assign_proc : process(ap_CS_fsm, tmp_7_reg_435, tmp_2_fu_392_p2, tmp_9_fu_361_p2, p_s_phi_fu_177_p6, ap_return_preg)
    begin
        if (((ap_ST_st19_fsm_18 = ap_CS_fsm) and ((tmp_7_reg_435 = ap_const_lv1_0) or (ap_const_lv1_0 = tmp_2_fu_392_p2) or (ap_const_lv1_0 = tmp_9_fu_361_p2)))) then 
            ap_return <= p_s_phi_fu_177_p6;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;


    -- ap_sig_bdd_149 assign process. --
    ap_sig_bdd_149_assign_proc : process(ap_CS_fsm, tmp_7_reg_435)
    begin
                ap_sig_bdd_149 <= ((ap_ST_st19_fsm_18 = ap_CS_fsm) and not((tmp_7_reg_435 = ap_const_lv1_0)));
    end process;


    -- ap_sig_bdd_374 assign process. --
    ap_sig_bdd_374_assign_proc : process(tmp_2_fu_392_p2, tmp_9_fu_361_p2)
    begin
                ap_sig_bdd_374 <= ((ap_const_lv1_0 = tmp_2_fu_392_p2) and not((ap_const_lv1_0 = tmp_9_fu_361_p2)));
    end process;


    -- avail_V_o assign process. --
    avail_V_o_assign_proc : process(ap_CS_fsm, avail_V_i, tmp_7_reg_435, tmp_2_fu_392_p2, tmp_9_fu_361_p2, tmp_4_fu_409_p2)
    begin
        if (((ap_ST_st19_fsm_18 = ap_CS_fsm) and not((tmp_7_reg_435 = ap_const_lv1_0)) and (ap_const_lv1_0 = tmp_2_fu_392_p2) and not((ap_const_lv1_0 = tmp_9_fu_361_p2)))) then 
            avail_V_o <= tmp_4_fu_409_p2;
        else 
            avail_V_o <= avail_V_i;
        end if; 
    end process;


    -- avail_V_o_ap_vld assign process. --
    avail_V_o_ap_vld_assign_proc : process(ap_CS_fsm, tmp_7_reg_435, tmp_2_fu_392_p2, tmp_9_fu_361_p2)
    begin
        if (((ap_ST_st19_fsm_18 = ap_CS_fsm) and not((tmp_7_reg_435 = ap_const_lv1_0)) and (ap_const_lv1_0 = tmp_2_fu_392_p2) and not((ap_const_lv1_0 = tmp_9_fu_361_p2)))) then 
            avail_V_o_ap_vld <= ap_const_logic_1;
        else 
            avail_V_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    -- colours_V_address0 assign process. --
    colours_V_address0_assign_proc : process(ap_CS_fsm, tmp_30_i_fu_301_p1, tmp_i7_fu_344_p1)
    begin
        if ((ap_ST_st17_fsm_16 = ap_CS_fsm)) then 
            colours_V_address0 <= tmp_i7_fu_344_p1(4 - 1 downto 0);
        elsif ((ap_ST_st14_fsm_13 = ap_CS_fsm)) then 
            colours_V_address0 <= tmp_30_i_fu_301_p1(4 - 1 downto 0);
        else 
            colours_V_address0 <= "XXXX";
        end if; 
    end process;


    -- colours_V_ce0 assign process. --
    colours_V_ce0_assign_proc : process(ap_CS_fsm)
    begin
        if (((ap_ST_st14_fsm_13 = ap_CS_fsm) or (ap_ST_st17_fsm_16 = ap_CS_fsm))) then 
            colours_V_ce0 <= ap_const_logic_1;
        else 
            colours_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- cp_V_o assign process. --
    cp_V_o_assign_proc : process(ap_start, ap_CS_fsm, cp_V_i, tmp_7_fu_215_p2, p_4_fu_221_p2)
    begin
        if (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)) and not((tmp_7_fu_215_p2 = ap_const_lv1_0)))) then 
            cp_V_o <= p_4_fu_221_p2;
        else 
            cp_V_o <= cp_V_i;
        end if; 
    end process;


    -- cp_V_o_ap_vld assign process. --
    cp_V_o_ap_vld_assign_proc : process(ap_start, ap_CS_fsm, tmp_7_fu_215_p2)
    begin
        if (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)) and not((tmp_7_fu_215_p2 = ap_const_lv1_0)))) then 
            cp_V_o_ap_vld <= ap_const_logic_1;
        else 
            cp_V_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_247_ce <= ap_const_logic_1;
    grp_fu_247_p0 <= tmp_cast_25_fu_211_p1;
    grp_fu_247_p1 <= tmp_40_tr_i_fu_243_p1;
    grp_fu_257_ce <= ap_const_logic_1;
    
    p_4_fu_221_p2_temp <= signed(p_4_fu_221_p2);
    grp_fu_257_p0 <= std_logic_vector(resize(p_4_fu_221_p2_temp,9));

    grp_fu_257_p1 <= tmp_40_tr_i_fu_243_p1;
    op2_assign_4_fu_201_p2 <= std_logic_vector(unsigned(tmp_cast_fu_197_p1) + unsigned(ap_const_lv9_1FF));
    p_3_fu_403_p2 <= (r_V_13_fu_376_p2 xor ap_const_lv36_FFFFFFFFF);
    p_4_fu_221_p2 <= std_logic_vector(unsigned(cp_V_i) + unsigned(ap_const_lv8_1));

    -- p_s_phi_fu_177_p6 assign process. --
    p_s_phi_fu_177_p6_assign_proc : process(tmp_9_fu_361_p2, p_s_reg_173, ap_sig_bdd_374, ap_sig_bdd_149)
    begin
        if (ap_sig_bdd_149) then
            if ((ap_const_lv1_0 = tmp_9_fu_361_p2)) then 
                p_s_phi_fu_177_p6 <= ap_const_lv1_0;
            elsif (ap_sig_bdd_374) then 
                p_s_phi_fu_177_p6 <= ap_const_lv1_1;
            else 
                p_s_phi_fu_177_p6 <= p_s_reg_173;
            end if;
        else 
            p_s_phi_fu_177_p6 <= p_s_reg_173;
        end if; 
    end process;


    -- pp_rot_V_address0 assign process. --
    pp_rot_V_address0_assign_proc : process(ap_CS_fsm, tmp_i_i_fu_277_p1, tmp_i_i3_fu_319_p1, tmp_3_fu_398_p1)
    begin
        if ((ap_ST_st19_fsm_18 = ap_CS_fsm)) then 
            pp_rot_V_address0 <= tmp_3_fu_398_p1(6 - 1 downto 0);
        elsif ((ap_ST_st15_fsm_14 = ap_CS_fsm)) then 
            pp_rot_V_address0 <= tmp_i_i3_fu_319_p1(6 - 1 downto 0);
        elsif ((ap_ST_st12_fsm_11 = ap_CS_fsm)) then 
            pp_rot_V_address0 <= tmp_i_i_fu_277_p1(6 - 1 downto 0);
        else 
            pp_rot_V_address0 <= "XXXXXX";
        end if; 
    end process;


    -- pp_rot_V_ce0 assign process. --
    pp_rot_V_ce0_assign_proc : process(ap_CS_fsm)
    begin
        if (((ap_ST_st12_fsm_11 = ap_CS_fsm) or (ap_ST_st15_fsm_14 = ap_CS_fsm) or (ap_ST_st19_fsm_18 = ap_CS_fsm))) then 
            pp_rot_V_ce0 <= ap_const_logic_1;
        else 
            pp_rot_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    pp_rot_V_d0 <= ap_const_lv2_0;

    -- pp_rot_V_we0 assign process. --
    pp_rot_V_we0_assign_proc : process(ap_CS_fsm, tmp_7_reg_435, tmp_2_fu_392_p2, tmp_9_fu_361_p2)
    begin
        if ((((ap_ST_st19_fsm_18 = ap_CS_fsm) and not((tmp_7_reg_435 = ap_const_lv1_0)) and (ap_const_lv1_0 = tmp_2_fu_392_p2) and not((ap_const_lv1_0 = tmp_9_fu_361_p2))))) then 
            pp_rot_V_we0 <= ap_const_logic_1;
        else 
            pp_rot_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- pp_tile_V_address0 assign process. --
    pp_tile_V_address0_assign_proc : process(ap_CS_fsm, tmp_i_i_fu_277_p1, tmp_i_i3_fu_319_p1, tmp_3_fu_398_p1)
    begin
        if ((ap_ST_st19_fsm_18 = ap_CS_fsm)) then 
            pp_tile_V_address0 <= tmp_3_fu_398_p1(6 - 1 downto 0);
        elsif ((ap_ST_st15_fsm_14 = ap_CS_fsm)) then 
            pp_tile_V_address0 <= tmp_i_i3_fu_319_p1(6 - 1 downto 0);
        elsif ((ap_ST_st12_fsm_11 = ap_CS_fsm)) then 
            pp_tile_V_address0 <= tmp_i_i_fu_277_p1(6 - 1 downto 0);
        else 
            pp_tile_V_address0 <= "XXXXXX";
        end if; 
    end process;


    -- pp_tile_V_ce0 assign process. --
    pp_tile_V_ce0_assign_proc : process(ap_CS_fsm)
    begin
        if (((ap_ST_st12_fsm_11 = ap_CS_fsm) or (ap_ST_st15_fsm_14 = ap_CS_fsm) or (ap_ST_st19_fsm_18 = ap_CS_fsm))) then 
            pp_tile_V_ce0 <= ap_const_logic_1;
        else 
            pp_tile_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    pp_tile_V_d0 <= op2_assign_reg_161;

    -- pp_tile_V_we0 assign process. --
    pp_tile_V_we0_assign_proc : process(ap_CS_fsm, tmp_7_reg_435, tmp_2_fu_392_p2, tmp_9_fu_361_p2)
    begin
        if ((((ap_ST_st19_fsm_18 = ap_CS_fsm) and not((tmp_7_reg_435 = ap_const_lv1_0)) and (ap_const_lv1_0 = tmp_2_fu_392_p2) and not((ap_const_lv1_0 = tmp_9_fu_361_p2))))) then 
            pp_tile_V_we0 <= ap_const_logic_1;
        else 
            pp_tile_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    r_V_11_fu_263_p1 <= grp_fu_247_p2(8 - 1 downto 0);
    r_V_12_fu_267_p1 <= grp_fu_257_p2(8 - 1 downto 0);
    r_V_13_fu_376_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv36_1),to_integer(unsigned('0' & tmp_s_fu_372_p1(31-1 downto 0)))));
    r_V_2_fu_325_p2 <= (pp_rot_V_q0 xor ap_const_lv2_2);
    r_V_fu_387_p2 <= (tmp3_fu_382_p2 and tmp2_reg_525);
    r_V_s_fu_282_p2 <= std_logic_vector(unsigned(pp_rot_V_q0) + unsigned(ap_const_lv2_1));
    t_fu_366_p2 <= std_logic_vector(unsigned(op2_assign_reg_161) + unsigned(ap_const_lv8_1));

    -- tiles_V_address0 assign process. --
    tiles_V_address0_assign_proc : process(ap_CS_fsm, tmp_30_fu_296_p1, tmp_32_fu_339_p1)
    begin
        if ((ap_ST_st16_fsm_15 = ap_CS_fsm)) then 
            tiles_V_address0 <= tmp_32_fu_339_p1(8 - 1 downto 0);
        elsif ((ap_ST_st13_fsm_12 = ap_CS_fsm)) then 
            tiles_V_address0 <= tmp_30_fu_296_p1(8 - 1 downto 0);
        else 
            tiles_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    -- tiles_V_ce0 assign process. --
    tiles_V_ce0_assign_proc : process(ap_CS_fsm)
    begin
        if (((ap_ST_st13_fsm_12 = ap_CS_fsm) or (ap_ST_st16_fsm_15 = ap_CS_fsm))) then 
            tiles_V_ce0 <= ap_const_logic_1;
        else 
            tiles_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp2_fu_356_p2 <= (agg_result_V_i_reg_147 and possible_V_reg_445);
    tmp3_fu_382_p2 <= (agg_result_V_i2_reg_520 and r_V_13_fu_376_p2);
    tmp_2_fu_392_p2 <= "1" when (r_V_fu_387_p2 = ap_const_lv36_0) else "0";
    tmp_30_fu_296_p1 <= std_logic_vector(resize(unsigned(tmp_fu_288_p3),64));
    tmp_30_i_fu_301_p1 <= std_logic_vector(resize(unsigned(tiles_V_q0),64));
    tmp_31_fu_331_p3 <= (pp_tile_V_q0 & r_V_2_fu_325_p2);
    tmp_32_fu_339_p1 <= std_logic_vector(resize(unsigned(tmp_31_fu_331_p3),64));
    
    p_4_reg_439_temp <= signed(p_4_reg_439);
    tmp_3_fu_398_p1 <= std_logic_vector(resize(p_4_reg_439_temp,64));

    tmp_40_tr_i_fu_243_p1 <= std_logic_vector(resize(unsigned(side_V),9));
    tmp_4_fu_409_p2 <= (possible_V_reg_445 and p_3_fu_403_p2);
    tmp_7_fu_215_p0 <= tmp_cast_25_fu_211_p1;
    tmp_7_fu_215_p2 <= "1" when (unsigned(tmp_7_fu_215_p0) < unsigned(op2_assign_4_fu_201_p2)) else "0";
    tmp_9_fu_361_p2 <= "1" when (unsigned(op2_assign_reg_161) < unsigned(ntiles_V)) else "0";
    
    cp_V_i_temp <= signed(cp_V_i);
    tmp_cast_25_fu_211_p1 <= std_logic_vector(resize(cp_V_i_temp,9));

    tmp_cast_fu_197_p1 <= std_logic_vector(resize(unsigned(ntiles_V),9));
    tmp_fu_288_p3 <= (pp_tile_V_q0 & r_V_s_fu_282_p2);
    tmp_i7_fu_344_p1 <= std_logic_vector(resize(unsigned(tiles_V_q0),64));
    tmp_i_26_fu_271_p2 <= "1" when (r_V_11_fu_263_p1 = r_V_12_fu_267_p1) else "0";
    tmp_i_fu_237_p2 <= "1" when (p_4_fu_221_p2 = ap_const_lv8_0) else "0";
    tmp_i_i3_fu_319_p1 <= std_logic_vector(resize(unsigned(up_V_fu_306_p2),64));
    tmp_i_i_fu_277_p1 <= std_logic_vector(resize(unsigned(t_V_reg_425),64));
    tmp_s_fu_372_p1 <= std_logic_vector(resize(unsigned(op2_assign_reg_161),36));

    -- toplevel_sdiv_9s_9ns_9_12_U1_ap_start assign process. --
    toplevel_sdiv_9s_9ns_9_12_U1_ap_start_assign_proc : process(ap_start, ap_CS_fsm, tmp_7_fu_215_p2, tmp_i_fu_237_p2)
    begin
        if (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)) and not((tmp_7_fu_215_p2 = ap_const_lv1_0)) and (ap_const_lv1_0 = tmp_i_fu_237_p2))) then 
            toplevel_sdiv_9s_9ns_9_12_U1_ap_start <= ap_const_logic_1;
        else 
            toplevel_sdiv_9s_9ns_9_12_U1_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    -- toplevel_sdiv_9s_9ns_9_12_U2_ap_start assign process. --
    toplevel_sdiv_9s_9ns_9_12_U2_ap_start_assign_proc : process(ap_start, ap_CS_fsm, tmp_7_fu_215_p2, tmp_i_fu_237_p2)
    begin
        if (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)) and not((tmp_7_fu_215_p2 = ap_const_lv1_0)) and (ap_const_lv1_0 = tmp_i_fu_237_p2))) then 
            toplevel_sdiv_9s_9ns_9_12_U2_ap_start <= ap_const_logic_1;
        else 
            toplevel_sdiv_9s_9ns_9_12_U2_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    up_V_fu_306_p2 <= std_logic_vector(unsigned(p_4_reg_439) - unsigned(side_V));
end behav;
