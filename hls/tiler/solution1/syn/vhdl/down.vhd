-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2013.4
-- Copyright (C) 2013 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity down is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    avail_V_i : IN STD_LOGIC_VECTOR (35 downto 0);
    avail_V_o : OUT STD_LOGIC_VECTOR (35 downto 0);
    avail_V_o_ap_vld : OUT STD_LOGIC;
    cp_V_i : IN STD_LOGIC_VECTOR (7 downto 0);
    cp_V_o : OUT STD_LOGIC_VECTOR (7 downto 0);
    cp_V_o_ap_vld : OUT STD_LOGIC;
    side_V : IN STD_LOGIC_VECTOR (7 downto 0);
    pp_tile_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    pp_tile_V_ce0 : OUT STD_LOGIC;
    pp_tile_V_we0 : OUT STD_LOGIC;
    pp_tile_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    pp_tile_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    pp_tile_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    pp_tile_V_ce1 : OUT STD_LOGIC;
    pp_tile_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    pp_rot_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    pp_rot_V_ce0 : OUT STD_LOGIC;
    pp_rot_V_we0 : OUT STD_LOGIC;
    pp_rot_V_d0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    pp_rot_V_q0 : IN STD_LOGIC_VECTOR (1 downto 0);
    pp_rot_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    pp_rot_V_ce1 : OUT STD_LOGIC;
    pp_rot_V_q1 : IN STD_LOGIC_VECTOR (1 downto 0);
    tiles_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    tiles_V_ce0 : OUT STD_LOGIC;
    tiles_V_q0 : IN STD_LOGIC_VECTOR (3 downto 0);
    tiles_V_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    tiles_V_ce1 : OUT STD_LOGIC;
    tiles_V_q1 : IN STD_LOGIC_VECTOR (3 downto 0);
    colours_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    colours_V_ce0 : OUT STD_LOGIC;
    colours_V_q0 : IN STD_LOGIC_VECTOR (35 downto 0);
    colours_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    colours_V_ce1 : OUT STD_LOGIC;
    colours_V_q1 : IN STD_LOGIC_VECTOR (35 downto 0) );
end;


architecture behav of down is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv36_FFFFFFFFF : STD_LOGIC_VECTOR (35 downto 0) := "111111111111111111111111111111111111";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv36_1 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000001";
    constant ap_const_lv36_0 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal t_V_reg_439 : STD_LOGIC_VECTOR (7 downto 0);
    signal cp_V_assign_fu_191_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal cp_V_assign_reg_462 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_31_reg_469 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_reg_485 : STD_LOGIC_VECTOR (0 downto 0);
    signal possible_V_reg_521 : STD_LOGIC_VECTOR (35 downto 0);
    signal possible_V_2_fu_353_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal possible_V_2_reg_526 : STD_LOGIC_VECTOR (35 downto 0);
    signal r_V_fu_363_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_reg_531 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_369_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal tmp_reg_536 : STD_LOGIC_VECTOR (35 downto 0);
    signal t_fu_380_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal op2_assign_reg_157 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_fu_406_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i_fu_244_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i23_i_fu_258_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_fu_278_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_22_fu_297_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_332_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_337_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_412_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_428_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_185_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal cp_V_i_temp: signed (8-1 downto 0);
    signal grp_fu_185_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_202_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_202_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_185_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_11_fu_211_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_202_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_61_i_fu_223_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_11_fu_211_p1_temp: signed (8-1 downto 0);
    signal tmp_60_i_cast_fu_219_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_61_i_fu_223_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal this_assign_i_fu_229_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal up_V_fu_207_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_s_fu_264_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_19_fu_270_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_1_fu_283_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_21_fu_289_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_63_i_cast_fu_302_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_i_fu_306_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_65_i_cast_fu_317_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_5_i_fu_321_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_3_fu_332_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_i_fu_306_p3_temp: signed (5-1 downto 0);
    signal tmp_5_fu_337_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_5_i_fu_321_p3_temp: signed (5-1 downto 0);
    signal r_V_fu_363_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_V_fu_360_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_fu_363_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal possible_V_1_fu_346_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal tmp_s_fu_386_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal r_V_12_fu_390_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal tmp3_fu_396_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal r_V_4_fu_401_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal p_2_fu_422_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal toplevel_sdiv_9s_9ns_9_12_U1_ap_start : STD_LOGIC;
    signal grp_fu_185_ce : STD_LOGIC;
    signal toplevel_udiv_8ns_8ns_8_11_U2_ap_start : STD_LOGIC;
    signal grp_fu_202_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);

    component toplevel_sdiv_9s_9ns_9_12 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component toplevel_udiv_8ns_8ns_8_11 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    toplevel_sdiv_9s_9ns_9_12_U1 : component toplevel_sdiv_9s_9ns_9_12
    generic map (
        ID => 1,
        NUM_STAGE => 12,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        dout_WIDTH => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => toplevel_sdiv_9s_9ns_9_12_U1_ap_start,
        din0 => grp_fu_185_p0,
        din1 => grp_fu_185_p1,
        ce => grp_fu_185_ce,
        dout => grp_fu_185_p2);

    toplevel_udiv_8ns_8ns_8_11_U2 : component toplevel_udiv_8ns_8ns_8_11
    generic map (
        ID => 2,
        NUM_STAGE => 11,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => toplevel_udiv_8ns_8ns_8_11_U2_ap_start,
        din0 => grp_fu_202_p0,
        din1 => grp_fu_202_p1,
        ce => grp_fu_202_ce,
        dout => grp_fu_202_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- op2_assign_reg_157 assign process. --
    op2_assign_reg_157_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st16_fsm_15 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_6_fu_406_p2)) and not((ap_const_lv1_0 = tmp_8_fu_375_p2)))) then 
                op2_assign_reg_157 <= t_fu_380_p2;
            elsif ((ap_ST_st15_fsm_14 = ap_CS_fsm)) then 
                op2_assign_reg_157 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then
                cp_V_assign_reg_462 <= cp_V_assign_fu_191_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st15_fsm_14 = ap_CS_fsm)) then
                possible_V_2_reg_526 <= possible_V_2_fu_353_p3;
                possible_V_reg_521 <= avail_V_i;
                r_V_reg_531 <= r_V_fu_363_p2;
                tmp_reg_536 <= tmp_fu_369_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)))) then
                t_V_reg_439 <= cp_V_i;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st12_fsm_11 = ap_CS_fsm)) then
                tmp_31_reg_469 <= this_assign_i_fu_229_p3(7 downto 7);
                tmp_32_reg_485 <= up_V_fu_207_p2(7 downto 7);
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start , ap_CS_fsm , tmp_6_fu_406_p2 , tmp_8_fu_375_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                if (((ap_const_lv1_0 = tmp_6_fu_406_p2) or (ap_const_lv1_0 = tmp_8_fu_375_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st16_fsm_15;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_CS_fsm, tmp_6_fu_406_p2, tmp_8_fu_375_p2)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm)) or ((ap_ST_st16_fsm_15 = ap_CS_fsm) and ((ap_const_lv1_0 = tmp_6_fu_406_p2) or (ap_const_lv1_0 = tmp_8_fu_375_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm, tmp_6_fu_406_p2, tmp_8_fu_375_p2)
    begin
        if (((ap_ST_st16_fsm_15 = ap_CS_fsm) and ((ap_const_lv1_0 = tmp_6_fu_406_p2) or (ap_const_lv1_0 = tmp_8_fu_375_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- avail_V_o assign process. --
    avail_V_o_assign_proc : process(ap_CS_fsm, avail_V_i, tmp_6_fu_406_p2, tmp_8_fu_375_p2, tmp_1_fu_428_p2)
    begin
        if (((ap_ST_st16_fsm_15 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_6_fu_406_p2) and not((ap_const_lv1_0 = tmp_8_fu_375_p2)))) then 
            avail_V_o <= tmp_1_fu_428_p2;
        else 
            avail_V_o <= avail_V_i;
        end if; 
    end process;


    -- avail_V_o_ap_vld assign process. --
    avail_V_o_ap_vld_assign_proc : process(ap_CS_fsm, tmp_6_fu_406_p2, tmp_8_fu_375_p2)
    begin
        if (((ap_ST_st16_fsm_15 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_6_fu_406_p2) and not((ap_const_lv1_0 = tmp_8_fu_375_p2)))) then 
            avail_V_o_ap_vld <= ap_const_logic_1;
        else 
            avail_V_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    colours_V_address0 <= tmp_3_fu_332_p1(4 - 1 downto 0);
    colours_V_address1 <= tmp_5_fu_337_p1(4 - 1 downto 0);

    -- colours_V_ce0 assign process. --
    colours_V_ce0_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st14_fsm_13 = ap_CS_fsm)) then 
            colours_V_ce0 <= ap_const_logic_1;
        else 
            colours_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- colours_V_ce1 assign process. --
    colours_V_ce1_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st14_fsm_13 = ap_CS_fsm)) then 
            colours_V_ce1 <= ap_const_logic_1;
        else 
            colours_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    cp_V_assign_fu_191_p2 <= std_logic_vector(unsigned(t_V_reg_439) + unsigned(ap_const_lv8_1));

    -- cp_V_o assign process. --
    cp_V_o_assign_proc : process(ap_CS_fsm, cp_V_i, cp_V_assign_fu_191_p2)
    begin
        if ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
            cp_V_o <= cp_V_assign_fu_191_p2;
        else 
            cp_V_o <= cp_V_i;
        end if; 
    end process;


    -- cp_V_o_ap_vld assign process. --
    cp_V_o_ap_vld_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
            cp_V_o_ap_vld <= ap_const_logic_1;
        else 
            cp_V_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_185_ce <= ap_const_logic_1;
    
    cp_V_i_temp <= signed(cp_V_i);
    grp_fu_185_p0 <= std_logic_vector(resize(cp_V_i_temp,9));

    grp_fu_185_p1 <= std_logic_vector(resize(unsigned(side_V),9));
    grp_fu_202_ce <= ap_const_logic_1;
    grp_fu_202_p0 <= std_logic_vector(unsigned(t_V_reg_439) + unsigned(ap_const_lv8_1));
    grp_fu_202_p1 <= side_V;
    lhs_V_fu_360_p1 <= std_logic_vector(resize(unsigned(side_V),16));
    p_2_fu_422_p2 <= (r_V_12_fu_390_p2 xor ap_const_lv36_FFFFFFFFF);
    p_5_i_fu_321_p3 <= 
        ap_const_lv5_1F when (tmp_32_reg_485(0) = '1') else 
        tmp_65_i_cast_fu_317_p1;
    p_i_fu_306_p3 <= 
        ap_const_lv5_1F when (tmp_31_reg_469(0) = '1') else 
        tmp_63_i_cast_fu_302_p1;
    possible_V_1_fu_346_p3 <= 
        ap_const_lv36_FFFFFFFFF when (tmp_31_reg_469(0) = '1') else 
        colours_V_q0;
    possible_V_2_fu_353_p3 <= 
        ap_const_lv36_FFFFFFFFF when (tmp_32_reg_485(0) = '1') else 
        colours_V_q1;

    -- pp_rot_V_address0 assign process. --
    pp_rot_V_address0_assign_proc : process(ap_CS_fsm, tmp_i_i_fu_244_p1, tmp_7_fu_412_p1)
    begin
        if ((ap_ST_st16_fsm_15 = ap_CS_fsm)) then 
            pp_rot_V_address0 <= tmp_7_fu_412_p1(6 - 1 downto 0);
        elsif ((ap_ST_st12_fsm_11 = ap_CS_fsm)) then 
            pp_rot_V_address0 <= tmp_i_i_fu_244_p1(6 - 1 downto 0);
        else 
            pp_rot_V_address0 <= "XXXXXX";
        end if; 
    end process;

    pp_rot_V_address1 <= tmp_i23_i_fu_258_p1(6 - 1 downto 0);

    -- pp_rot_V_ce0 assign process. --
    pp_rot_V_ce0_assign_proc : process(ap_CS_fsm)
    begin
        if (((ap_ST_st12_fsm_11 = ap_CS_fsm) or (ap_ST_st16_fsm_15 = ap_CS_fsm))) then 
            pp_rot_V_ce0 <= ap_const_logic_1;
        else 
            pp_rot_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- pp_rot_V_ce1 assign process. --
    pp_rot_V_ce1_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st12_fsm_11 = ap_CS_fsm)) then 
            pp_rot_V_ce1 <= ap_const_logic_1;
        else 
            pp_rot_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    pp_rot_V_d0 <= ap_const_lv2_0;

    -- pp_rot_V_we0 assign process. --
    pp_rot_V_we0_assign_proc : process(ap_CS_fsm, tmp_6_fu_406_p2, tmp_8_fu_375_p2)
    begin
        if ((((ap_ST_st16_fsm_15 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_6_fu_406_p2) and not((ap_const_lv1_0 = tmp_8_fu_375_p2))))) then 
            pp_rot_V_we0 <= ap_const_logic_1;
        else 
            pp_rot_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- pp_tile_V_address0 assign process. --
    pp_tile_V_address0_assign_proc : process(ap_CS_fsm, tmp_i_i_fu_244_p1, tmp_7_fu_412_p1)
    begin
        if ((ap_ST_st16_fsm_15 = ap_CS_fsm)) then 
            pp_tile_V_address0 <= tmp_7_fu_412_p1(6 - 1 downto 0);
        elsif ((ap_ST_st12_fsm_11 = ap_CS_fsm)) then 
            pp_tile_V_address0 <= tmp_i_i_fu_244_p1(6 - 1 downto 0);
        else 
            pp_tile_V_address0 <= "XXXXXX";
        end if; 
    end process;

    pp_tile_V_address1 <= tmp_i23_i_fu_258_p1(6 - 1 downto 0);

    -- pp_tile_V_ce0 assign process. --
    pp_tile_V_ce0_assign_proc : process(ap_CS_fsm)
    begin
        if (((ap_ST_st12_fsm_11 = ap_CS_fsm) or (ap_ST_st16_fsm_15 = ap_CS_fsm))) then 
            pp_tile_V_ce0 <= ap_const_logic_1;
        else 
            pp_tile_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- pp_tile_V_ce1 assign process. --
    pp_tile_V_ce1_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st12_fsm_11 = ap_CS_fsm)) then 
            pp_tile_V_ce1 <= ap_const_logic_1;
        else 
            pp_tile_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    pp_tile_V_d0 <= op2_assign_reg_157(8 - 1 downto 0);

    -- pp_tile_V_we0 assign process. --
    pp_tile_V_we0_assign_proc : process(ap_CS_fsm, tmp_6_fu_406_p2, tmp_8_fu_375_p2)
    begin
        if ((((ap_ST_st16_fsm_15 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_6_fu_406_p2) and not((ap_const_lv1_0 = tmp_8_fu_375_p2))))) then 
            pp_tile_V_we0 <= ap_const_logic_1;
        else 
            pp_tile_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    r_V_11_fu_211_p1 <= grp_fu_185_p2(8 - 1 downto 0);
    r_V_12_fu_390_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv36_1),to_integer(unsigned('0' & tmp_s_fu_386_p1(31-1 downto 0)))));
    r_V_1_fu_283_p2 <= (pp_rot_V_q1 xor ap_const_lv2_2);
    r_V_4_fu_401_p2 <= (tmp3_fu_396_p2 and tmp_reg_536);
    r_V_fu_363_p0 <= lhs_V_fu_360_p1(8 - 1 downto 0);
    r_V_fu_363_p1 <= lhs_V_fu_360_p1(8 - 1 downto 0);
    r_V_fu_363_p2 <= std_logic_vector(resize(unsigned(r_V_fu_363_p0) * unsigned(r_V_fu_363_p1), 16));
    r_V_s_fu_264_p2 <= std_logic_vector(unsigned(pp_rot_V_q0) + unsigned(ap_const_lv2_1));
    t_fu_380_p2 <= std_logic_vector(unsigned(op2_assign_reg_157) + unsigned(ap_const_lv16_1));
    this_assign_i_fu_229_p3 <= 
        t_V_reg_439 when (tmp_61_i_fu_223_p2(0) = '1') else 
        ap_const_lv8_FF;
    tiles_V_address0 <= tmp_20_fu_278_p1(8 - 1 downto 0);
    tiles_V_address1 <= tmp_22_fu_297_p1(8 - 1 downto 0);

    -- tiles_V_ce0 assign process. --
    tiles_V_ce0_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st13_fsm_12 = ap_CS_fsm)) then 
            tiles_V_ce0 <= ap_const_logic_1;
        else 
            tiles_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- tiles_V_ce1 assign process. --
    tiles_V_ce1_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st13_fsm_12 = ap_CS_fsm)) then 
            tiles_V_ce1 <= ap_const_logic_1;
        else 
            tiles_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp3_fu_396_p2 <= (possible_V_2_reg_526 and r_V_12_fu_390_p2);
    tmp_19_fu_270_p3 <= (pp_tile_V_q0 & r_V_s_fu_264_p2);
    tmp_1_fu_428_p2 <= (possible_V_reg_521 and p_2_fu_422_p2);
    tmp_20_fu_278_p1 <= std_logic_vector(resize(unsigned(tmp_19_fu_270_p3),64));
    tmp_21_fu_289_p3 <= (pp_tile_V_q1 & r_V_1_fu_283_p2);
    tmp_22_fu_297_p1 <= std_logic_vector(resize(unsigned(tmp_21_fu_289_p3),64));
    
    p_i_fu_306_p3_temp <= signed(p_i_fu_306_p3);
    tmp_3_fu_332_p0 <= std_logic_vector(resize(p_i_fu_306_p3_temp,8));

    tmp_3_fu_332_p1 <= std_logic_vector(resize(unsigned(tmp_3_fu_332_p0),64));
    
    p_5_i_fu_321_p3_temp <= signed(p_5_i_fu_321_p3);
    tmp_5_fu_337_p0 <= std_logic_vector(resize(p_5_i_fu_321_p3_temp,8));

    tmp_5_fu_337_p1 <= std_logic_vector(resize(unsigned(tmp_5_fu_337_p0),64));
    tmp_60_i_cast_fu_219_p1 <= std_logic_vector(resize(unsigned(grp_fu_202_p2),9));
    
    r_V_11_fu_211_p1_temp <= signed(r_V_11_fu_211_p1);
    tmp_61_i_fu_223_p0 <= std_logic_vector(resize(r_V_11_fu_211_p1_temp,9));

    tmp_61_i_fu_223_p2 <= "1" when (tmp_61_i_fu_223_p0 = tmp_60_i_cast_fu_219_p1) else "0";
    tmp_63_i_cast_fu_302_p1 <= std_logic_vector(resize(unsigned(tiles_V_q0),5));
    tmp_65_i_cast_fu_317_p1 <= std_logic_vector(resize(unsigned(tiles_V_q1),5));
    tmp_6_fu_406_p2 <= "1" when (r_V_4_fu_401_p2 = ap_const_lv36_0) else "0";
    tmp_7_fu_412_p1 <= std_logic_vector(resize(unsigned(cp_V_assign_reg_462),64));
    tmp_8_fu_375_p2 <= "1" when (unsigned(op2_assign_reg_157) < unsigned(r_V_reg_531)) else "0";
    tmp_fu_369_p2 <= (avail_V_i and possible_V_1_fu_346_p3);
    tmp_i23_i_fu_258_p1 <= std_logic_vector(resize(unsigned(up_V_fu_207_p2),64));
    tmp_i_i_fu_244_p1 <= std_logic_vector(resize(unsigned(this_assign_i_fu_229_p3),64));
    tmp_s_fu_386_p1 <= std_logic_vector(resize(unsigned(op2_assign_reg_157),36));

    -- toplevel_sdiv_9s_9ns_9_12_U1_ap_start assign process. --
    toplevel_sdiv_9s_9ns_9_12_U1_ap_start_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)))) then 
            toplevel_sdiv_9s_9ns_9_12_U1_ap_start <= ap_const_logic_1;
        else 
            toplevel_sdiv_9s_9ns_9_12_U1_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    -- toplevel_udiv_8ns_8ns_8_11_U2_ap_start assign process. --
    toplevel_udiv_8ns_8ns_8_11_U2_ap_start_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
            toplevel_udiv_8ns_8ns_8_11_U2_ap_start <= ap_const_logic_1;
        else 
            toplevel_udiv_8ns_8ns_8_11_U2_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    up_V_fu_207_p2 <= std_logic_vector(unsigned(cp_V_assign_reg_462) - unsigned(side_V));
end behav;
